<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[读SDWebImage源码心得]]></title>
    <url>%2F2020%2F06%2F07%2F%E8%AF%BBSDWebImage%E6%BA%90%E7%A0%81%E5%BF%83%E5%BE%97%2F</url>
    <content type="text"><![CDATA[一、前言 笔者在业余时间对iOS著名图片加载框架SDWebImage V5.8.0源码进行了阅读，发现和V5.0之前版本架构设计有很大的不同，V5.0之后的版本是面向协议的架构设计，将图片缓存、编码解码、下载、自定义转换定义了一套标准协议方法，使用者想自定义一些操作，通过遵循协议，可以很方便的进行扩展。总之，SDWebImage源码是非常值得阅读，它应用了软件设计原则，和设计模式，使软件架构层次清晰，更容易理解阅读，扩展。SDWebImage源码还是有点多的，在零零散散的时间花了几天粗略的读了一遍，收获还是颇多的，由于笔者现在水平有限，对于有些源码理解不是很到位，有理解描述不对的地方，希望能批评指正。 二、官方架构图解High Level Diagram Overall Class Diagram Top Level API Diagram Main Sequence Diagram 三、思维导图 3.1、Utils主要定义了一些常用工具类，宏定义（如，平台判断，信号量锁）、不同平台命名统一、位移枚举，错误枚举，加载菊花，图片加载动画等。 3.2、Private私有工具类，文件、颜色，自定义NSOperation封装，封装NSBezierPath等 封装了定时器SDDisplayLink及避免循环引用SDWeakProxy 3.3、Cache图片缓存类，处理图片缓存，查找，删除，最大存储容量配置，过期数据处理。 SDImageCacheConfig：缓存配置类，实现了NSCopying协议，图片默认磁盘缓存为一周 SDMemoryCache：内存缓存，继承NSCache实现，其内部用到了NSMapTable，默认shouldUseWeakMemoryCache为YES 12345/// 定义属性@property (nonatomic, strong, nonnull) NSMapTable&lt;KeyType, ObjectType&gt; *weakCache; // strong-weak cache/// 创建self.weakCache = [[NSMapTable alloc] initWithKeyOptions:NSPointerFunctionsStrongMemory valueOptions:NSPointerFunctionsWeakMemory capacity:0]; SDDiskCache：磁盘缓存，实现了存储、查询、删除等同步/异步操作，图片容量超容处理 12345678910111213141516171819202122232425/// APP进入后台，对过期数据进行处理#if SD_UIKIT- (void)applicationDidEnterBackground:(NSNotification *)notification &#123; if (!self.config.shouldRemoveExpiredDataWhenEnterBackground) &#123; return; &#125; Class UIApplicationClass = NSClassFromString(@&quot;UIApplication&quot;); if(!UIApplicationClass || ![UIApplicationClass respondsToSelector:@selector(sharedApplication)]) &#123; return; &#125; UIApplication *application = [UIApplication performSelector:@selector(sharedApplication)]; __block UIBackgroundTaskIdentifier bgTask = [application beginBackgroundTaskWithExpirationHandler:^&#123; // Clean up any unfinished task business by marking where you // stopped or ending the task outright. [application endBackgroundTask:bgTask]; bgTask = UIBackgroundTaskInvalid; &#125;]; // Start the long-running task and return immediately. [self deleteOldFilesWithCompletionBlock:^&#123; [application endBackgroundTask:bgTask]; bgTask = UIBackgroundTaskInvalid; &#125;];&#125;#endif 清理核心方法 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889909192- (void)removeExpiredData &#123; NSURL *diskCacheURL = [NSURL fileURLWithPath:self.diskCachePath isDirectory:YES]; // Compute content date key to be used for tests NSURLResourceKey cacheContentDateKey = NSURLContentModificationDateKey; switch (self.config.diskCacheExpireType) &#123; case SDImageCacheConfigExpireTypeAccessDate: cacheContentDateKey = NSURLContentAccessDateKey; break; case SDImageCacheConfigExpireTypeModificationDate: cacheContentDateKey = NSURLContentModificationDateKey; break; case SDImageCacheConfigExpireTypeCreationDate: cacheContentDateKey = NSURLCreationDateKey; break; case SDImageCacheConfigExpireTypeChangeDate: cacheContentDateKey = NSURLAttributeModificationDateKey; break; default: break; &#125; NSArray&lt;NSString *&gt; *resourceKeys = @[NSURLIsDirectoryKey, cacheContentDateKey, NSURLTotalFileAllocatedSizeKey]; // This enumerator prefetches useful properties for our cache files. NSDirectoryEnumerator *fileEnumerator = [self.fileManager enumeratorAtURL:diskCacheURL includingPropertiesForKeys:resourceKeys options:NSDirectoryEnumerationSkipsHiddenFiles errorHandler:NULL]; NSDate *expirationDate = (self.config.maxDiskAge &lt; 0) ? nil: [NSDate dateWithTimeIntervalSinceNow:-self.config.maxDiskAge]; NSMutableDictionary&lt;NSURL *, NSDictionary&lt;NSString *, id&gt; *&gt; *cacheFiles = [NSMutableDictionary dictionary]; NSUInteger currentCacheSize = 0; // Enumerate all of the files in the cache directory. This loop has two purposes: // // 1. Removing files that are older than the expiration date. // 2. Storing file attributes for the size-based cleanup pass. NSMutableArray&lt;NSURL *&gt; *urlsToDelete = [[NSMutableArray alloc] init]; for (NSURL *fileURL in fileEnumerator) &#123; NSError *error; NSDictionary&lt;NSString *, id&gt; *resourceValues = [fileURL resourceValuesForKeys:resourceKeys error:&amp;error]; // Skip directories and errors. if (error || !resourceValues || [resourceValues[NSURLIsDirectoryKey] boolValue]) &#123; continue; &#125; // Remove files that are older than the expiration date; NSDate *modifiedDate = resourceValues[cacheContentDateKey]; if (expirationDate &amp;&amp; [[modifiedDate laterDate:expirationDate] isEqualToDate:expirationDate]) &#123; [urlsToDelete addObject:fileURL]; continue; &#125; // Store a reference to this file and account for its total size. NSNumber *totalAllocatedSize = resourceValues[NSURLTotalFileAllocatedSizeKey]; currentCacheSize += totalAllocatedSize.unsignedIntegerValue; cacheFiles[fileURL] = resourceValues; &#125; for (NSURL *fileURL in urlsToDelete) &#123; [self.fileManager removeItemAtURL:fileURL error:nil]; &#125; // If our remaining disk cache exceeds a configured maximum size, perform a second // size-based cleanup pass. We delete the oldest files first. NSUInteger maxDiskSize = self.config.maxDiskSize; if (maxDiskSize &gt; 0 &amp;&amp; currentCacheSize &gt; maxDiskSize) &#123; // Target half of our maximum cache size for this cleanup pass. const NSUInteger desiredCacheSize = maxDiskSize / 2; // Sort the remaining cache files by their last modification time or last access time (oldest first). NSArray&lt;NSURL *&gt; *sortedFiles = [cacheFiles keysSortedByValueWithOptions:NSSortConcurrent usingComparator:^NSComparisonResult(id obj1, id obj2) &#123; return [obj1[cacheContentDateKey] compare:obj2[cacheContentDateKey]]; &#125;]; // Delete files until we fall below our desired cache size. for (NSURL *fileURL in sortedFiles) &#123; if ([self.fileManager removeItemAtURL:fileURL error:nil]) &#123; NSDictionary&lt;NSString *, id&gt; *resourceValues = cacheFiles[fileURL]; NSNumber *totalAllocatedSize = resourceValues[NSURLTotalFileAllocatedSizeKey]; currentCacheSize -= totalAllocatedSize.unsignedIntegerValue; if (currentCacheSize &lt; desiredCacheSize) &#123; break; &#125; &#125; &#125; &#125;&#125; SDImageCachesManager：管理遵循SDImageCache协议的对象，同时自己也遵循SDImageCache协议，将相关操作派发的具体的处理类，如磁盘、内存缓存。 3.4、Prefetcher Prefetch some URLs in the cache for future use. Images are downloaded in low priority. 预取缓存中的一些url以备将来使用。以低优先级下载图像。 3.5、Transformer /** A transformer protocol to transform the image load from cache or from download. You can provide transformer to cache and manager (Through the transformer property or context option SDWebImageContextImageTransformer). @note The transform process is called from a global queue in order to not to block the main queue. */ 图片转化相关属性包装，现在提供了这几种SDImagePipelineTransformer，SDImageRoundCornerTransformer、SDImageResizingTransformer、SDImageCroppingTransformer、SDImageFlippingTransformer、SDImageRotationTransformer、SDImageTintTransformer、SDImageBlurTransformer、SDImageFilterTransformer，见名知意这些Transformer的用途，其实现类UIImage+Transform Category中。 3.6、Downloader图片下载处理相关类，下载结果通过Block回调。提供了根据URL下载图片，可控制暂停、取消，最大下载并发数量，默认是6个，下载一些状态获取。 SDWebImageDownloaderConfig：下载相关配置，如最大并发数量，请求超时设置，队列执行顺序，证书设置等 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374/** The class contains all the config for image downloader @note This class conform to NSCopying, make sure to add the property in `copyWithZone:` as well. */@interface SDWebImageDownloaderConfig : NSObject &lt;NSCopying&gt;/** Gets the default downloader config used for shared instance or initialization when it does not provide any downloader config. Such as `SDWebImageDownloader.sharedDownloader`. @note You can modify the property on default downloader config, which can be used for later created downloader instance. The already created downloader instance does not get affected. */@property (nonatomic, class, readonly, nonnull) SDWebImageDownloaderConfig *defaultDownloaderConfig;/** * The maximum number of concurrent downloads. * Defaults to 6. */@property (nonatomic, assign) NSInteger maxConcurrentDownloads;/** * The timeout value (in seconds) for each download operation. * Defaults to 15.0. */@property (nonatomic, assign) NSTimeInterval downloadTimeout;/** * The minimum interval about progress percent during network downloading. Which means the next progress callback and current progress callback&apos;s progress percent difference should be larger or equal to this value. However, the final finish download progress callback does not get effected. * The value should be 0.0-1.0. * @note If you&apos;re using progressive decoding feature, this will also effect the image refresh rate. * @note This value may enhance the performance if you don&apos;t want progress callback too frequently. * Defaults to 0, which means each time we receive the new data from URLSession, we callback the progressBlock immediately. */@property (nonatomic, assign) double minimumProgressInterval;/** * The custom session configuration in use by NSURLSession. If you don&apos;t provide one, we will use `defaultSessionConfiguration` instead. * Defatuls to nil. * @note This property does not support dynamic changes, means it&apos;s immutable after the downloader instance initialized. */@property (nonatomic, strong, nullable) NSURLSessionConfiguration *sessionConfiguration;/** * Gets/Sets a subclass of `SDWebImageDownloaderOperation` as the default * `NSOperation` to be used each time SDWebImage constructs a request * operation to download an image. * Defaults to nil. * @note Passing `NSOperation&lt;SDWebImageDownloaderOperation&gt;` to set as default. Passing `nil` will revert to `SDWebImageDownloaderOperation`. */@property (nonatomic, assign, nullable) Class operationClass;/** * Changes download operations execution order. * Defaults to `SDWebImageDownloaderFIFOExecutionOrder`. */@property (nonatomic, assign) SDWebImageDownloaderExecutionOrder executionOrder;/** * Set the default URL credential to be set for request operations. * Defaults to nil. */@property (nonatomic, copy, nullable) NSURLCredential *urlCredential;/** * Set username using for HTTP Basic authentication. * Defaults to nil. */@property (nonatomic, copy, nullable) NSString *username;/** * Set password using for HTTP Basic authentication. * Defautls to nil. */@property (nonatomic, copy, nullable) NSString *password;@end SDWebImageDownloaderRequestModifier：封装NSMutableURLRequest相关设置，可通过提供Block配置。 SDWebImageDownloaderResponseModifier：请求NSHTTPURLResponse配置，可通过提供Block配置。 SDWebImageDownloaderDecryptor：图片二进制加密处理，可通过提供Block配置。默认Base64。 SDImageLoader：定义了图片下载方法协议SDImageLoader，图片解码方法 12345678910111213141516171819202122232425/** This is the built-in decoding process for image download from network or local file. @note If you want to implement your custom loader with `requestImageWithURL:options:context:progress:completed:` API, but also want to keep compatible with SDWebImage&apos;s behavior, you&apos;d better use this to produce image. @param imageData The image data from the network. Should not be nil @param imageURL The image URL from the input. Should not be nil @param options The options arg from the input @param context The context arg from the input @return The decoded image for current image data load from the network */FOUNDATION_EXPORT UIImage * _Nullable SDImageLoaderDecodeImageData(NSData * _Nonnull imageData, NSURL * _Nonnull imageURL, SDWebImageOptions options, SDWebImageContext * _Nullable context);/** This is the built-in decoding process for image progressive download from network. It&apos;s used when `SDWebImageProgressiveLoad` option is set. (It&apos;s not required when your loader does not support progressive image loading) @note If you want to implement your custom loader with `requestImageWithURL:options:context:progress:completed:` API, but also want to keep compatible with SDWebImage&apos;s behavior, you&apos;d better use this to produce image. @param imageData The image data from the network so far. Should not be nil @param imageURL The image URL from the input. Should not be nil @param finished Pass NO to specify the download process has not finished. Pass YES when all image data has finished. @param operation The loader operation associated with current progressive download. Why to provide this is because progressive decoding need to store the partial decoded context for each operation to avoid conflict. You should provide the operation from `loadImageWithURL:` method return value. @param options The options arg from the input @param context The context arg from the input @return The decoded progressive image for current image data load from the network */FOUNDATION_EXPORT UIImage * _Nullable SDImageLoaderDecodeProgressiveImageData(NSData * _Nonnull imageData, NSURL * _Nonnull imageURL, BOOL finished, id&lt;SDWebImageOperation&gt; _Nonnull operation, SDWebImageOptions options, SDWebImageContext * _Nullable context); SDWebImageDownloaderOperation: 自定义NSOperation子类，封装了图片下载任务 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182/// 图片下载任务方法- (void)start &#123; @synchronized (self) &#123; if (self.isCancelled) &#123; self.finished = YES; // Operation cancelled by user before sending the request [self callCompletionBlocksWithError:[NSError errorWithDomain:SDWebImageErrorDomain code:SDWebImageErrorCancelled userInfo:@&#123;NSLocalizedDescriptionKey : @&quot;Operation cancelled by user before sending the request&quot;&#125;]]; [self reset]; return; &#125;#if SD_UIKIT Class UIApplicationClass = NSClassFromString(@&quot;UIApplication&quot;); BOOL hasApplication = UIApplicationClass &amp;&amp; [UIApplicationClass respondsToSelector:@selector(sharedApplication)]; if (hasApplication &amp;&amp; [self shouldContinueWhenAppEntersBackground]) &#123; __weak typeof(self) wself = self; UIApplication * app = [UIApplicationClass performSelector:@selector(sharedApplication)]; self.backgroundTaskId = [app beginBackgroundTaskWithExpirationHandler:^&#123; [wself cancel]; &#125;]; &#125;#endif NSURLSession *session = self.unownedSession; if (!session) &#123; NSURLSessionConfiguration *sessionConfig = [NSURLSessionConfiguration defaultSessionConfiguration]; sessionConfig.timeoutIntervalForRequest = 15; /** * Create the session for this task * We send nil as delegate queue so that the session creates a serial operation queue for performing all delegate * method calls and completion handler calls. */ session = [NSURLSession sessionWithConfiguration:sessionConfig delegate:self delegateQueue:nil]; self.ownedSession = session; &#125; if (self.options &amp; SDWebImageDownloaderIgnoreCachedResponse) &#123; // Grab the cached data for later check NSURLCache *URLCache = session.configuration.URLCache; if (!URLCache) &#123; URLCache = [NSURLCache sharedURLCache]; &#125; NSCachedURLResponse *cachedResponse; // NSURLCache&apos;s `cachedResponseForRequest:` is not thread-safe, see https://developer.apple.com/documentation/foundation/nsurlcache#2317483 @synchronized (URLCache) &#123; cachedResponse = [URLCache cachedResponseForRequest:self.request]; &#125; if (cachedResponse) &#123; self.cachedData = cachedResponse.data; &#125; &#125; self.dataTask = [session dataTaskWithRequest:self.request]; self.executing = YES; &#125; if (self.dataTask) &#123; if (self.options &amp; SDWebImageDownloaderHighPriority) &#123; self.dataTask.priority = NSURLSessionTaskPriorityHigh; self.coderQueue.qualityOfService = NSQualityOfServiceUserInteractive; &#125; else if (self.options &amp; SDWebImageDownloaderLowPriority) &#123; self.dataTask.priority = NSURLSessionTaskPriorityLow; self.coderQueue.qualityOfService = NSQualityOfServiceBackground; &#125; else &#123; self.dataTask.priority = NSURLSessionTaskPriorityDefault; self.coderQueue.qualityOfService = NSQualityOfServiceDefault; &#125; [self.dataTask resume]; for (SDWebImageDownloaderProgressBlock progressBlock in [self callbacksForKey:kProgressCallbackKey]) &#123; progressBlock(0, NSURLResponseUnknownLength, self.request.URL); &#125; __block typeof(self) strongSelf = self; dispatch_async(dispatch_get_main_queue(), ^&#123; [[NSNotificationCenter defaultCenter] postNotificationName:SDWebImageDownloadStartNotification object:strongSelf]; &#125;); &#125; else &#123; [self callCompletionBlocksWithError:[NSError errorWithDomain:SDWebImageErrorDomain code:SDWebImageErrorInvalidDownloadOperation userInfo:@&#123;NSLocalizedDescriptionKey : @&quot;Task can&apos;t be initialized&quot;&#125;]]; [self done]; &#125;&#125; SDWebImageDownloader：图片下载类，遵循了SDImageLoader，内部持有SDWebImageDownloaderConfig，SDWebImageDownloaderResponseModifier、SDWebImageDownloaderRequestModifier等实例类。图片下载核心方法如下： 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970/// 开始一个图片下载任务- (nullable SDWebImageDownloadToken *)downloadImageWithURL:(nullable NSURL *)url options:(SDWebImageDownloaderOptions)options context:(nullable SDWebImageContext *)context progress:(nullable SDWebImageDownloaderProgressBlock)progressBlock completed:(nullable SDWebImageDownloaderCompletedBlock)completedBlock &#123; // The URL will be used as the key to the callbacks dictionary so it cannot be nil. If it is nil immediately call the completed block with no image or data. if (url == nil) &#123; if (completedBlock) &#123; NSError *error = [NSError errorWithDomain:SDWebImageErrorDomain code:SDWebImageErrorInvalidURL userInfo:@&#123;NSLocalizedDescriptionKey : @&quot;Image url is nil&quot;&#125;]; completedBlock(nil, nil, error, YES); &#125; return nil; &#125; SD_LOCK(self.operationsLock); id downloadOperationCancelToken; NSOperation&lt;SDWebImageDownloaderOperation&gt; *operation = [self.URLOperations objectForKey:url]; // There is a case that the operation may be marked as finished or cancelled, but not been removed from `self.URLOperations`. if (!operation || operation.isFinished || operation.isCancelled) &#123; operation = [self createDownloaderOperationWithUrl:url options:options context:context]; if (!operation) &#123; SD_UNLOCK(self.operationsLock); if (completedBlock) &#123; NSError *error = [NSError errorWithDomain:SDWebImageErrorDomain code:SDWebImageErrorInvalidDownloadOperation userInfo:@&#123;NSLocalizedDescriptionKey : @&quot;Downloader operation is nil&quot;&#125;]; completedBlock(nil, nil, error, YES); &#125; return nil; &#125; @weakify(self); operation.completionBlock = ^&#123; @strongify(self); if (!self) &#123; return; &#125; SD_LOCK(self.operationsLock); [self.URLOperations removeObjectForKey:url]; SD_UNLOCK(self.operationsLock); &#125;; self.URLOperations[url] = operation; // Add the handlers before submitting to operation queue, avoid the race condition that operation finished before setting handlers. downloadOperationCancelToken = [operation addHandlersForProgress:progressBlock completed:completedBlock]; // Add operation to operation queue only after all configuration done according to Apple&apos;s doc. // `addOperation:` does not synchronously execute the `operation.completionBlock` so this will not cause deadlock. [self.downloadQueue addOperation:operation]; &#125; else &#123; // When we reuse the download operation to attach more callbacks, there may be thread safe issue because the getter of callbacks may in another queue (decoding queue or delegate queue) // So we lock the operation here, and in `SDWebImageDownloaderOperation`, we use `@synchonzied (self)`, to ensure the thread safe between these two classes. @synchronized (operation) &#123; downloadOperationCancelToken = [operation addHandlersForProgress:progressBlock completed:completedBlock]; &#125; if (!operation.isExecuting) &#123; if (options &amp; SDWebImageDownloaderHighPriority) &#123; operation.queuePriority = NSOperationQueuePriorityHigh; &#125; else if (options &amp; SDWebImageDownloaderLowPriority) &#123; operation.queuePriority = NSOperationQueuePriorityLow; &#125; else &#123; operation.queuePriority = NSOperationQueuePriorityNormal; &#125; &#125; &#125; SD_UNLOCK(self.operationsLock); SDWebImageDownloadToken *token = [[SDWebImageDownloadToken alloc] initWithDownloadOperation:operation]; token.url = url; token.request = operation.request; token.downloadOperationCancelToken = downloadOperationCancelToken; return token;&#125; SDImageLoadersManager：遵循SDImageLoader协议，管理遵循了SDImageLoader协议的数组，主要代码如下： 12345678910111213141516171819202122232425262728293031323334#pragma mark - SDImageLoader- (BOOL)canRequestImageForURL:(nullable NSURL *)url &#123; NSArray&lt;id&lt;SDImageLoader&gt;&gt; *loaders = self.loaders; for (id&lt;SDImageLoader&gt; loader in loaders.reverseObjectEnumerator) &#123; if ([loader canRequestImageForURL:url]) &#123; return YES; &#125; &#125; return NO;&#125;- (id&lt;SDWebImageOperation&gt;)requestImageWithURL:(NSURL *)url options:(SDWebImageOptions)options context:(SDWebImageContext *)context progress:(SDImageLoaderProgressBlock)progressBlock completed:(SDImageLoaderCompletedBlock)completedBlock &#123; if (!url) &#123; return nil; &#125; NSArray&lt;id&lt;SDImageLoader&gt;&gt; *loaders = self.loaders; for (id&lt;SDImageLoader&gt; loader in loaders.reverseObjectEnumerator) &#123; if ([loader canRequestImageForURL:url]) &#123; return [loader requestImageWithURL:url options:options context:context progress:progressBlock completed:completedBlock]; &#125; &#125; return nil;&#125;- (BOOL)shouldBlockFailedURLWithURL:(NSURL *)url error:(NSError *)error &#123; NSArray&lt;id&lt;SDImageLoader&gt;&gt; *loaders = self.loaders; for (id&lt;SDImageLoader&gt; loader in loaders.reverseObjectEnumerator) &#123; if ([loader canRequestImageForURL:url]) &#123; return [loader shouldBlockFailedURLWithURL:url error:error]; &#125; &#125; return NO;&#125; 3.5、Decoder图片编/解码。支持的图片格式如下： 123456789101112131415/** You can use switch case like normal enum. It&apos;s also recommended to add a default case. You should not assume anything about the raw value. For custom coder plugin, it can also extern the enum for supported format. See `SDImageCoder` for more detailed information. */typedef NSInteger SDImageFormat NS_TYPED_EXTENSIBLE_ENUM;static const SDImageFormat SDImageFormatUndefined = -1;static const SDImageFormat SDImageFormatJPEG = 0;static const SDImageFormat SDImageFormatPNG = 1;static const SDImageFormat SDImageFormatGIF = 2;static const SDImageFormat SDImageFormatTIFF = 3;static const SDImageFormat SDImageFormatWebP = 4; /// SDWebImage默认不支持static const SDImageFormat SDImageFormatHEIC = 5;static const SDImageFormat SDImageFormatHEIF = 6;static const SDImageFormat SDImageFormatPDF = 7;static const SDImageFormat SDImageFormatSVG = 8; 对于特殊格式的图片，SDWebImage创建了一个对应的编解码子类，遵循了SDImageIOAnimatedCoder，SDImageIOAnimatedCoder又遵循了&lt;SDProgressiveImageCoder, SDAnimatedImageCoder&gt;协议。这部分内容还是相对来说枯燥复杂的。 SDImageCoder：定义了主要编解码方法，同时也定义了SDProgressiveImageCoder、SDAnimatedImageCoder、SDAnimatedImageProvider等协议 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657#pragma mark - Coder/** This is the image coder protocol to provide custom image decoding/encoding. These methods are all required to implement. @note Pay attention that these methods are not called from main queue. */@protocol SDImageCoder &lt;NSObject&gt;@required#pragma mark - Decoding/** Returns YES if this coder can decode some data. Otherwise, the data should be passed to another coder. @param data The image data so we can look at it @return YES if this coder can decode the data, NO otherwise */- (BOOL)canDecodeFromData:(nullable NSData *)data;/** Decode the image data to image. @note This protocol may supports decode animated image frames. You can use `+[SDImageCoderHelper animatedImageWithFrames:]` to produce an animated image with frames. @param data The image data to be decoded @param options A dictionary containing any decoding options. Pass @&#123;SDImageCoderDecodeScaleFactor: @(1.0)&#125; to specify scale factor for image. Pass @&#123;SDImageCoderDecodeFirstFrameOnly: @(YES)&#125; to decode the first frame only. @return The decoded image from data */- (nullable UIImage *)decodedImageWithData:(nullable NSData *)data options:(nullable SDImageCoderOptions *)options;#pragma mark - Encoding/** Returns YES if this coder can encode some image. Otherwise, it should be passed to another coder. For custom coder which introduce new image format, you&apos;d better define a new `SDImageFormat` using like this. If you&apos;re creating public coder plugin for new image format, also update `https://github.com/rs/SDWebImage/wiki/Coder-Plugin-List` to avoid same value been defined twice. * @code static const SDImageFormat SDImageFormatHEIF = 10; * @endcode @param format The image format @return YES if this coder can encode the image, NO otherwise */- (BOOL)canEncodeToFormat:(SDImageFormat)format NS_SWIFT_NAME(canEncode(to:));/** Encode the image to image data. @note This protocol may supports encode animated image frames. You can use `+[SDImageCoderHelper framesFromAnimatedImage:]` to assemble an animated image with frames. @param image The image to be encoded @param format The image format to encode, you should note `SDImageFormatUndefined` format is also possible @param options A dictionary containing any encoding options. Pass @&#123;SDImageCoderEncodeCompressionQuality: @(1)&#125; to specify compression quality. @return The encoded image data */- (nullable NSData *)encodedDataWithImage:(nullable UIImage *)image format:(SDImageFormat)format options:(nullable SDImageCoderOptions *)options;@end SDImageCodersManager：管理了各种图片格式编/解码类，同时遵循了SDImageCoder协议，核心代码如下： 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849#pragma mark - SDImageCoder- (BOOL)canDecodeFromData:(NSData *)data &#123; NSArray&lt;id&lt;SDImageCoder&gt;&gt; *coders = self.coders; for (id&lt;SDImageCoder&gt; coder in coders.reverseObjectEnumerator) &#123; if ([coder canDecodeFromData:data]) &#123; return YES; &#125; &#125; return NO;&#125;- (BOOL)canEncodeToFormat:(SDImageFormat)format &#123; NSArray&lt;id&lt;SDImageCoder&gt;&gt; *coders = self.coders; for (id&lt;SDImageCoder&gt; coder in coders.reverseObjectEnumerator) &#123; if ([coder canEncodeToFormat:format]) &#123; return YES; &#125; &#125; return NO;&#125;- (UIImage *)decodedImageWithData:(NSData *)data options:(nullable SDImageCoderOptions *)options &#123; if (!data) &#123; return nil; &#125; UIImage *image; NSArray&lt;id&lt;SDImageCoder&gt;&gt; *coders = self.coders; for (id&lt;SDImageCoder&gt; coder in coders.reverseObjectEnumerator) &#123; if ([coder canDecodeFromData:data]) &#123; image = [coder decodedImageWithData:data options:options]; break; &#125; &#125; return image;&#125;- (NSData *)encodedDataWithImage:(UIImage *)image format:(SDImageFormat)format options:(nullable SDImageCoderOptions *)options &#123; if (!image) &#123; return nil; &#125; NSArray&lt;id&lt;SDImageCoder&gt;&gt; *coders = self.coders; for (id&lt;SDImageCoder&gt; coder in coders.reverseObjectEnumerator) &#123; if ([coder canEncodeToFormat:format]) &#123; return [coder encodedDataWithImage:image format:format options:options]; &#125; &#125; return nil;&#125; 3.7、ManagerUIKit相关UI控件分类API调用上游类， 管理图片缓存、下载、编/解码、转换等操作。 SDWebImageManager：SDWebImage核心类。提供了各种操作实例代码。 初始化方法 12345/** * Allows to specify instance of cache and image loader used with image manager. * @return new instance of `SDWebImageManager` with specified cache and loader. */- (nonnull instancetype)initWithCache:(nonnull id&lt;SDImageCache&gt;)cache loader:(nonnull id&lt;SDImageLoader&gt;)loader NS_DESIGNATED_INITIALIZER; 下载图片方法定义 1234567891011121314151617/** * Downloads the image at the given URL if not present in cache or return the cached version otherwise. * * @param url The URL to the image * @param options A mask to specify options to use for this request * @param context A context contains different options to perform specify changes or processes, see `SDWebImageContextOption`. This hold the extra objects which `options` enum can not hold. * @param progressBlock A block called while image is downloading * @note the progress block is executed on a background queue * @param completedBlock A block called when operation has been completed. * * @return Returns an instance of SDWebImageCombinedOperation, which you can cancel the loading process. */- (nullable SDWebImageCombinedOperation *)loadImageWithURL:(nullable NSURL *)url options:(SDWebImageOptions)options context:(nullable SDWebImageContext *)context progress:(nullable SDImageLoaderProgressBlock)progressBlock completed:(nonnull SDInternalCompletionBlock)completedBlock; 下载图片方法实现 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229230231232233234235236237238239240241242243244245246247248249250251252253254255256257258259260261262263264265266267268269270271272273274275276277278279280281282283284285286287288289290291292293294295296297298299300301302303304305306307308309310311312313314315316317318319320321322323324325326327328329330331332333334335336337338339340341342343344345346347348349350351352353354355356357358359360361/// 实现- (SDWebImageCombinedOperation *)loadImageWithURL:(nullable NSURL *)url options:(SDWebImageOptions)options context:(nullable SDWebImageContext *)context progress:(nullable SDImageLoaderProgressBlock)progressBlock completed:(nonnull SDInternalCompletionBlock)completedBlock &#123; // Invoking this method without a completedBlock is pointless NSAssert(completedBlock != nil, @&quot;If you mean to prefetch the image, use -[SDWebImagePrefetcher prefetchURLs] instead&quot;); // Very common mistake is to send the URL using NSString object instead of NSURL. For some strange reason, Xcode won&apos;t // throw any warning for this type mismatch. Here we failsafe this error by allowing URLs to be passed as NSString. if ([url isKindOfClass:NSString.class]) &#123; url = [NSURL URLWithString:(NSString *)url]; &#125; // Prevents app crashing on argument type error like sending NSNull instead of NSURL if (![url isKindOfClass:NSURL.class]) &#123; url = nil; &#125; SDWebImageCombinedOperation *operation = [SDWebImageCombinedOperation new]; operation.manager = self; BOOL isFailedUrl = NO; if (url) &#123; SD_LOCK(self.failedURLsLock); isFailedUrl = [self.failedURLs containsObject:url]; SD_UNLOCK(self.failedURLsLock); &#125; if (url.absoluteString.length == 0 || (!(options &amp; SDWebImageRetryFailed) &amp;&amp; isFailedUrl)) &#123; NSString *description = isFailedUrl ? @&quot;Image url is blacklisted&quot; : @&quot;Image url is nil&quot;; NSInteger code = isFailedUrl ? SDWebImageErrorBlackListed : SDWebImageErrorInvalidURL; [self callCompletionBlockForOperation:operation completion:completedBlock error:[NSError errorWithDomain:SDWebImageErrorDomain code:code userInfo:@&#123;NSLocalizedDescriptionKey : description&#125;] url:url]; return operation; &#125; SD_LOCK(self.runningOperationsLock); [self.runningOperations addObject:operation]; SD_UNLOCK(self.runningOperationsLock); // Preprocess the options and context arg to decide the final the result for manager SDWebImageOptionsResult *result = [self processedResultForURL:url options:options context:context]; // Start the entry to load image from cache [self callCacheProcessForOperation:operation url:url options:result.options context:result.context progress:progressBlock completed:completedBlock]; return operation;&#125;#pragma mark - Private// Query normal cache process- (void)callCacheProcessForOperation:(nonnull SDWebImageCombinedOperation *)operation url:(nonnull NSURL *)url options:(SDWebImageOptions)options context:(nullable SDWebImageContext *)context progress:(nullable SDImageLoaderProgressBlock)progressBlock completed:(nullable SDInternalCompletionBlock)completedBlock &#123; // Grab the image cache to use id&lt;SDImageCache&gt; imageCache; if ([context[SDWebImageContextImageCache] conformsToProtocol:@protocol(SDImageCache)]) &#123; imageCache = context[SDWebImageContextImageCache]; &#125; else &#123; imageCache = self.imageCache; &#125; // Get the query cache type SDImageCacheType queryCacheType = SDImageCacheTypeAll; if (context[SDWebImageContextQueryCacheType]) &#123; queryCacheType = [context[SDWebImageContextQueryCacheType] integerValue]; &#125; // Check whether we should query cache BOOL shouldQueryCache = !SD_OPTIONS_CONTAINS(options, SDWebImageFromLoaderOnly); if (shouldQueryCache) &#123; NSString *key = [self cacheKeyForURL:url context:context]; @weakify(operation); operation.cacheOperation = [imageCache queryImageForKey:key options:options context:context cacheType:queryCacheType completion:^(UIImage * _Nullable cachedImage, NSData * _Nullable cachedData, SDImageCacheType cacheType) &#123; @strongify(operation); if (!operation || operation.isCancelled) &#123; // Image combined operation cancelled by user [self callCompletionBlockForOperation:operation completion:completedBlock error:[NSError errorWithDomain:SDWebImageErrorDomain code:SDWebImageErrorCancelled userInfo:@&#123;NSLocalizedDescriptionKey : @&quot;Operation cancelled by user during querying the cache&quot;&#125;] url:url]; [self safelyRemoveOperationFromRunning:operation]; return; &#125; else if (context[SDWebImageContextImageTransformer] &amp;&amp; !cachedImage) &#123; // Have a chance to quary original cache instead of downloading [self callOriginalCacheProcessForOperation:operation url:url options:options context:context progress:progressBlock completed:completedBlock]; return; &#125; // Continue download process [self callDownloadProcessForOperation:operation url:url options:options context:context cachedImage:cachedImage cachedData:cachedData cacheType:cacheType progress:progressBlock completed:completedBlock]; &#125;]; &#125; else &#123; // Continue download process [self callDownloadProcessForOperation:operation url:url options:options context:context cachedImage:nil cachedData:nil cacheType:SDImageCacheTypeNone progress:progressBlock completed:completedBlock]; &#125;&#125;// Query original cache process- (void)callOriginalCacheProcessForOperation:(nonnull SDWebImageCombinedOperation *)operation url:(nonnull NSURL *)url options:(SDWebImageOptions)options context:(nullable SDWebImageContext *)context progress:(nullable SDImageLoaderProgressBlock)progressBlock completed:(nullable SDInternalCompletionBlock)completedBlock &#123; // Grab the image cache to use id&lt;SDImageCache&gt; imageCache; if ([context[SDWebImageContextImageCache] conformsToProtocol:@protocol(SDImageCache)]) &#123; imageCache = context[SDWebImageContextImageCache]; &#125; else &#123; imageCache = self.imageCache; &#125; // Get the original query cache type SDImageCacheType originalQueryCacheType = SDImageCacheTypeNone; if (context[SDWebImageContextOriginalQueryCacheType]) &#123; originalQueryCacheType = [context[SDWebImageContextOriginalQueryCacheType] integerValue]; &#125; // Check whether we should query original cache BOOL shouldQueryOriginalCache = (originalQueryCacheType != SDImageCacheTypeNone); if (shouldQueryOriginalCache) &#123; // Change originContext to mutable SDWebImageMutableContext * __block originContext; if (context) &#123; originContext = [context mutableCopy]; &#125; else &#123; originContext = [NSMutableDictionary dictionary]; &#125; // Disable transformer for cache key generation id&lt;SDImageTransformer&gt; transformer = originContext[SDWebImageContextImageTransformer]; originContext[SDWebImageContextImageTransformer] = [NSNull null]; NSString *key = [self cacheKeyForURL:url context:originContext]; @weakify(operation); operation.cacheOperation = [imageCache queryImageForKey:key options:options context:context cacheType:originalQueryCacheType completion:^(UIImage * _Nullable cachedImage, NSData * _Nullable cachedData, SDImageCacheType cacheType) &#123; @strongify(operation); if (!operation || operation.isCancelled) &#123; // Image combined operation cancelled by user [self callCompletionBlockForOperation:operation completion:completedBlock error:[NSError errorWithDomain:SDWebImageErrorDomain code:SDWebImageErrorCancelled userInfo:@&#123;NSLocalizedDescriptionKey : @&quot;Operation cancelled by user during querying the cache&quot;&#125;] url:url]; [self safelyRemoveOperationFromRunning:operation]; return; &#125; // Add original transformer if (transformer) &#123; originContext[SDWebImageContextImageTransformer] = transformer; &#125; // Use the store cache process instead of downloading, and ignore .refreshCached option for now [self callStoreCacheProcessForOperation:operation url:url options:options context:context downloadedImage:cachedImage downloadedData:cachedData finished:YES progress:progressBlock completed:completedBlock]; [self safelyRemoveOperationFromRunning:operation]; &#125;]; &#125; else &#123; // Continue download process [self callDownloadProcessForOperation:operation url:url options:options context:context cachedImage:nil cachedData:nil cacheType:originalQueryCacheType progress:progressBlock completed:completedBlock]; &#125;&#125;// Download process- (void)callDownloadProcessForOperation:(nonnull SDWebImageCombinedOperation *)operation url:(nonnull NSURL *)url options:(SDWebImageOptions)options context:(SDWebImageContext *)context cachedImage:(nullable UIImage *)cachedImage cachedData:(nullable NSData *)cachedData cacheType:(SDImageCacheType)cacheType progress:(nullable SDImageLoaderProgressBlock)progressBlock completed:(nullable SDInternalCompletionBlock)completedBlock &#123; // Grab the image loader to use id&lt;SDImageLoader&gt; imageLoader; if ([context[SDWebImageContextImageLoader] conformsToProtocol:@protocol(SDImageLoader)]) &#123; imageLoader = context[SDWebImageContextImageLoader]; &#125; else &#123; imageLoader = self.imageLoader; &#125; // Check whether we should download image from network BOOL shouldDownload = !SD_OPTIONS_CONTAINS(options, SDWebImageFromCacheOnly); shouldDownload &amp;= (!cachedImage || options &amp; SDWebImageRefreshCached); shouldDownload &amp;= (![self.delegate respondsToSelector:@selector(imageManager:shouldDownloadImageForURL:)] || [self.delegate imageManager:self shouldDownloadImageForURL:url]); shouldDownload &amp;= [imageLoader canRequestImageForURL:url]; if (shouldDownload) &#123; if (cachedImage &amp;&amp; options &amp; SDWebImageRefreshCached) &#123; // If image was found in the cache but SDWebImageRefreshCached is provided, notify about the cached image // AND try to re-download it in order to let a chance to NSURLCache to refresh it from server. [self callCompletionBlockForOperation:operation completion:completedBlock image:cachedImage data:cachedData error:nil cacheType:cacheType finished:YES url:url]; // Pass the cached image to the image loader. The image loader should check whether the remote image is equal to the cached image. SDWebImageMutableContext *mutableContext; if (context) &#123; mutableContext = [context mutableCopy]; &#125; else &#123; mutableContext = [NSMutableDictionary dictionary]; &#125; mutableContext[SDWebImageContextLoaderCachedImage] = cachedImage; context = [mutableContext copy]; &#125; @weakify(operation); operation.loaderOperation = [imageLoader requestImageWithURL:url options:options context:context progress:progressBlock completed:^(UIImage *downloadedImage, NSData *downloadedData, NSError *error, BOOL finished) &#123; @strongify(operation); if (!operation || operation.isCancelled) &#123; // Image combined operation cancelled by user [self callCompletionBlockForOperation:operation completion:completedBlock error:[NSError errorWithDomain:SDWebImageErrorDomain code:SDWebImageErrorCancelled userInfo:@&#123;NSLocalizedDescriptionKey : @&quot;Operation cancelled by user during sending the request&quot;&#125;] url:url]; &#125; else if (cachedImage &amp;&amp; options &amp; SDWebImageRefreshCached &amp;&amp; [error.domain isEqualToString:SDWebImageErrorDomain] &amp;&amp; error.code == SDWebImageErrorCacheNotModified) &#123; // Image refresh hit the NSURLCache cache, do not call the completion block &#125; else if ([error.domain isEqualToString:SDWebImageErrorDomain] &amp;&amp; error.code == SDWebImageErrorCancelled) &#123; // Download operation cancelled by user before sending the request, don&apos;t block failed URL [self callCompletionBlockForOperation:operation completion:completedBlock error:error url:url]; &#125; else if (error) &#123; [self callCompletionBlockForOperation:operation completion:completedBlock error:error url:url]; BOOL shouldBlockFailedURL = [self shouldBlockFailedURLWithURL:url error:error options:options context:context]; if (shouldBlockFailedURL) &#123; SD_LOCK(self.failedURLsLock); [self.failedURLs addObject:url]; SD_UNLOCK(self.failedURLsLock); &#125; &#125; else &#123; if ((options &amp; SDWebImageRetryFailed)) &#123; SD_LOCK(self.failedURLsLock); [self.failedURLs removeObject:url]; SD_UNLOCK(self.failedURLsLock); &#125; // Continue store cache process [self callStoreCacheProcessForOperation:operation url:url options:options context:context downloadedImage:downloadedImage downloadedData:downloadedData finished:finished progress:progressBlock completed:completedBlock]; &#125; if (finished) &#123; [self safelyRemoveOperationFromRunning:operation]; &#125; &#125;]; &#125; else if (cachedImage) &#123; [self callCompletionBlockForOperation:operation completion:completedBlock image:cachedImage data:cachedData error:nil cacheType:cacheType finished:YES url:url]; [self safelyRemoveOperationFromRunning:operation]; &#125; else &#123; // Image not in cache and download disallowed by delegate [self callCompletionBlockForOperation:operation completion:completedBlock image:nil data:nil error:nil cacheType:SDImageCacheTypeNone finished:YES url:url]; [self safelyRemoveOperationFromRunning:operation]; &#125;&#125;// Store cache process- (void)callStoreCacheProcessForOperation:(nonnull SDWebImageCombinedOperation *)operation url:(nonnull NSURL *)url options:(SDWebImageOptions)options context:(SDWebImageContext *)context downloadedImage:(nullable UIImage *)downloadedImage downloadedData:(nullable NSData *)downloadedData finished:(BOOL)finished progress:(nullable SDImageLoaderProgressBlock)progressBlock completed:(nullable SDInternalCompletionBlock)completedBlock &#123; // the target image store cache type SDImageCacheType storeCacheType = SDImageCacheTypeAll; if (context[SDWebImageContextStoreCacheType]) &#123; storeCacheType = [context[SDWebImageContextStoreCacheType] integerValue]; &#125; // the original store image cache type SDImageCacheType originalStoreCacheType = SDImageCacheTypeNone; if (context[SDWebImageContextOriginalStoreCacheType]) &#123; originalStoreCacheType = [context[SDWebImageContextOriginalStoreCacheType] integerValue]; &#125; // origin cache key SDWebImageMutableContext *originContext = [context mutableCopy]; // disable transformer for cache key generation originContext[SDWebImageContextImageTransformer] = [NSNull null]; NSString *key = [self cacheKeyForURL:url context:originContext]; id&lt;SDImageTransformer&gt; transformer = context[SDWebImageContextImageTransformer]; if (![transformer conformsToProtocol:@protocol(SDImageTransformer)]) &#123; transformer = nil; &#125; id&lt;SDWebImageCacheSerializer&gt; cacheSerializer = context[SDWebImageContextCacheSerializer]; BOOL shouldTransformImage = downloadedImage &amp;&amp; transformer; shouldTransformImage = shouldTransformImage &amp;&amp; (!downloadedImage.sd_isAnimated || (options &amp; SDWebImageTransformAnimatedImage)); shouldTransformImage = shouldTransformImage &amp;&amp; (!downloadedImage.sd_isVector || (options &amp; SDWebImageTransformVectorImage)); BOOL shouldCacheOriginal = downloadedImage &amp;&amp; finished; // if available, store original image to cache if (shouldCacheOriginal) &#123; // normally use the store cache type, but if target image is transformed, use original store cache type instead SDImageCacheType targetStoreCacheType = shouldTransformImage ? originalStoreCacheType : storeCacheType; if (cacheSerializer &amp;&amp; (targetStoreCacheType == SDImageCacheTypeDisk || targetStoreCacheType == SDImageCacheTypeAll)) &#123; dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_HIGH, 0), ^&#123; @autoreleasepool &#123; NSData *cacheData = [cacheSerializer cacheDataWithImage:downloadedImage originalData:downloadedData imageURL:url]; [self storeImage:downloadedImage imageData:cacheData forKey:key cacheType:targetStoreCacheType options:options context:context completion:^&#123; // Continue transform process [self callTransformProcessForOperation:operation url:url options:options context:context originalImage:downloadedImage originalData:downloadedData finished:finished progress:progressBlock completed:completedBlock]; &#125;]; &#125; &#125;); &#125; else &#123; [self storeImage:downloadedImage imageData:downloadedData forKey:key cacheType:targetStoreCacheType options:options context:context completion:^&#123; // Continue transform process [self callTransformProcessForOperation:operation url:url options:options context:context originalImage:downloadedImage originalData:downloadedData finished:finished progress:progressBlock completed:completedBlock]; &#125;]; &#125; &#125; else &#123; // Continue transform process [self callTransformProcessForOperation:operation url:url options:options context:context originalImage:downloadedImage originalData:downloadedData finished:finished progress:progressBlock completed:completedBlock]; &#125;&#125;// Transform process- (void)callTransformProcessForOperation:(nonnull SDWebImageCombinedOperation *)operation url:(nonnull NSURL *)url options:(SDWebImageOptions)options context:(SDWebImageContext *)context originalImage:(nullable UIImage *)originalImage originalData:(nullable NSData *)originalData finished:(BOOL)finished progress:(nullable SDImageLoaderProgressBlock)progressBlock completed:(nullable SDInternalCompletionBlock)completedBlock &#123; // the target image store cache type SDImageCacheType storeCacheType = SDImageCacheTypeAll; if (context[SDWebImageContextStoreCacheType]) &#123; storeCacheType = [context[SDWebImageContextStoreCacheType] integerValue]; &#125; // transformed cache key NSString *key = [self cacheKeyForURL:url context:context]; id&lt;SDImageTransformer&gt; transformer = context[SDWebImageContextImageTransformer]; if (![transformer conformsToProtocol:@protocol(SDImageTransformer)]) &#123; transformer = nil; &#125; id&lt;SDWebImageCacheSerializer&gt; cacheSerializer = context[SDWebImageContextCacheSerializer]; BOOL shouldTransformImage = originalImage &amp;&amp; transformer; shouldTransformImage = shouldTransformImage &amp;&amp; (!originalImage.sd_isAnimated || (options &amp; SDWebImageTransformAnimatedImage)); shouldTransformImage = shouldTransformImage &amp;&amp; (!originalImage.sd_isVector || (options &amp; SDWebImageTransformVectorImage)); // if available, store transformed image to cache if (shouldTransformImage) &#123; dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_HIGH, 0), ^&#123; @autoreleasepool &#123; UIImage *transformedImage = [transformer transformedImageWithImage:originalImage forKey:key]; if (transformedImage &amp;&amp; finished) &#123; BOOL imageWasTransformed = ![transformedImage isEqual:originalImage]; NSData *cacheData; // pass nil if the image was transformed, so we can recalculate the data from the image if (cacheSerializer &amp;&amp; (storeCacheType == SDImageCacheTypeDisk || storeCacheType == SDImageCacheTypeAll)) &#123; cacheData = [cacheSerializer cacheDataWithImage:transformedImage originalData:(imageWasTransformed ? nil : originalData) imageURL:url]; &#125; else &#123; cacheData = (imageWasTransformed ? nil : originalData); &#125; [self storeImage:transformedImage imageData:cacheData forKey:key cacheType:storeCacheType options:options context:context completion:^&#123; [self callCompletionBlockForOperation:operation completion:completedBlock image:transformedImage data:originalData error:nil cacheType:SDImageCacheTypeNone finished:finished url:url]; &#125;]; &#125; else &#123; [self callCompletionBlockForOperation:operation completion:completedBlock image:transformedImage data:originalData error:nil cacheType:SDImageCacheTypeNone finished:finished url:url]; &#125; &#125; &#125;); &#125; else &#123; [self callCompletionBlockForOperation:operation completion:completedBlock image:originalImage data:originalData error:nil cacheType:SDImageCacheTypeNone finished:finished url:url]; &#125;&#125; 先检查内存是否有缓存，没有从磁盘查找，都没有开启一个图片下载任务，拿到图片数据缓存到内存，磁盘，磁盘查找源码如下： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104- (nullable NSOperation *)queryCacheOperationForKey:(nullable NSString *)key options:(SDImageCacheOptions)options context:(nullable SDWebImageContext *)context cacheType:(SDImageCacheType)queryCacheType done:(nullable SDImageCacheQueryCompletionBlock)doneBlock &#123; if (!key) &#123; if (doneBlock) &#123; doneBlock(nil, nil, SDImageCacheTypeNone); &#125; return nil; &#125; // Invalid cache type if (queryCacheType == SDImageCacheTypeNone) &#123; if (doneBlock) &#123; doneBlock(nil, nil, SDImageCacheTypeNone); &#125; return nil; &#125; // First check the in-memory cache... UIImage *image; if (queryCacheType != SDImageCacheTypeDisk) &#123; image = [self imageFromMemoryCacheForKey:key]; &#125; if (image) &#123; if (options &amp; SDImageCacheDecodeFirstFrameOnly) &#123; // Ensure static image Class animatedImageClass = image.class; if (image.sd_isAnimated || ([animatedImageClass isSubclassOfClass:[UIImage class]] &amp;&amp; [animatedImageClass conformsToProtocol:@protocol(SDAnimatedImage)])) &#123;#if SD_MAC image = [[NSImage alloc] initWithCGImage:image.CGImage scale:image.scale orientation:kCGImagePropertyOrientationUp];#else image = [[UIImage alloc] initWithCGImage:image.CGImage scale:image.scale orientation:image.imageOrientation];#endif &#125; &#125; else if (options &amp; SDImageCacheMatchAnimatedImageClass) &#123; // Check image class matching Class animatedImageClass = image.class; Class desiredImageClass = context[SDWebImageContextAnimatedImageClass]; if (desiredImageClass &amp;&amp; ![animatedImageClass isSubclassOfClass:desiredImageClass]) &#123; image = nil; &#125; &#125; &#125; BOOL shouldQueryMemoryOnly = (queryCacheType == SDImageCacheTypeMemory) || (image &amp;&amp; !(options &amp; SDImageCacheQueryMemoryData)); if (shouldQueryMemoryOnly) &#123; if (doneBlock) &#123; doneBlock(image, nil, SDImageCacheTypeMemory); &#125; return nil; &#125; // Second check the disk cache... NSOperation *operation = [NSOperation new]; // Check whether we need to synchronously query disk // 1. in-memory cache hit &amp; memoryDataSync // 2. in-memory cache miss &amp; diskDataSync BOOL shouldQueryDiskSync = ((image &amp;&amp; options &amp; SDImageCacheQueryMemoryDataSync) || (!image &amp;&amp; options &amp; SDImageCacheQueryDiskDataSync)); void(^queryDiskBlock)(void) = ^&#123; if (operation.isCancelled) &#123; if (doneBlock) &#123; doneBlock(nil, nil, SDImageCacheTypeNone); &#125; return; &#125; @autoreleasepool &#123; NSData *diskData = [self diskImageDataBySearchingAllPathsForKey:key]; UIImage *diskImage; SDImageCacheType cacheType = SDImageCacheTypeNone; if (image) &#123; // the image is from in-memory cache, but need image data diskImage = image; cacheType = SDImageCacheTypeMemory; &#125; else if (diskData) &#123; cacheType = SDImageCacheTypeDisk; // decode image data only if in-memory cache missed diskImage = [self diskImageForKey:key data:diskData options:options context:context]; if (diskImage &amp;&amp; self.config.shouldCacheImagesInMemory) &#123; NSUInteger cost = diskImage.sd_memoryCost; [self.memoryCache setObject:diskImage forKey:key cost:cost]; &#125; &#125; if (doneBlock) &#123; if (shouldQueryDiskSync) &#123; doneBlock(diskImage, diskData, cacheType); &#125; else &#123; dispatch_async(dispatch_get_main_queue(), ^&#123; doneBlock(diskImage, diskData, cacheType); &#125;); &#125; &#125; &#125; &#125;; // Query in ioQueue to keep IO-safe if (shouldQueryDiskSync) &#123; dispatch_sync(self.ioQueue, queryDiskBlock); &#125; else &#123; dispatch_async(self.ioQueue, queryDiskBlock); &#125; return operation;&#125; 3.8、AnimatedImage类似FLAnimatedImage高性能播放GIF格式图片，对于大容量GIF图片，直接加载会导致内存暴涨，这点在我负责的APP深有体会，由于GIF图片过大，导致首次加载界面会出现卡顿，界面渲染延迟，后来换成了FLAnimatedImage，解决了播放GIF大图内存的问题。现在SDWebImage也提供了GIT图片加载类，提高性能。 SDAnimatedImage：继承自UIImage SDAnimatedImageView：继承UIImageView，处理GIF图片播放 SDAnimatedImageView+WebCache：提供类似普通图片加载API，加载网络或本地 12345678/** * Set the imageView `image` with an `url`. * * The download is asynchronous and cached. * * @param url The url for the image. */- (void)sd_setImageWithURL:(nullable NSURL *)url NS_REFINED_FOR_SWIFT; SDAnimatedImagePlayer：A player to control the playback of animated image, which can be used to drive Animated ImageView or any rendering usage, like CALayer/WatchKit/SwiftUI rendering. 3.9、Categories图片相关分类 NSData+ImageContentType：图片格式判断，字符串转换 UIImage+ExtendedCacheData：给图片关联数据，需遵循NSCoding协议 UIImage+GIF：将二进制数据转化为GIF图片 UIImage+Metadata： UIImage category for image metadata, including animation, loop count, format, incremental, etc. UIImage+MultiFormat：图片编码解码 UIImage+ForceDecode：UIImage category about force decode feature (avoid Image/IO’s lazy decoding during rendering behavior). UIImage+Transform： Provide some commen method for UIImage.Image process is based on Core Graphics and vImage. UIImage+MemoryCacheCost：图片内存消耗 NSImage+Compatibility：This category is provided to easily write cross-platform(AppKit/UIKit) code. For common usage, see UIImage+Metadata.h UIView+WebCacheOperation：These methods are used to support canceling for UIView image loading, it’s designed to be used internal but not external. All the stored operations are weak, so it will be dalloced after image loading finished. If you need to store operations, use your own class to keep a strong reference for them. 3.10、WebCache Categories支持图片设置UI控件设置图片分类。UIView+WebCache分类添加了图片主要设置逻辑。其次就是我们熟知的UIImageView+WebCache、UIImageView+HighlightedWebCache、UIButton+WebCache、NSButton+WebCache、 UIView+WebCache 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556/** * Set the imageView `image` with an `url` and optionally a placeholder image. * * The download is asynchronous and cached. * * @param url The url for the image. * @param placeholder The image to be set initially, until the image request finishes. * @param options The options to use when downloading the image. @see SDWebImageOptions for the possible values. * @param context A context contains different options to perform specify changes or processes, see `SDWebImageContextOption`. This hold the extra objects which `options` enum can not hold. * @param setImageBlock Block used for custom set image code. If not provide, use the built-in set image code (supports `UIImageView/NSImageView` and `UIButton/NSButton` currently) * @param progressBlock A block called while image is downloading * @note the progress block is executed on a background queue * @param completedBlock A block called when operation has been completed. * This block has no return value and takes the requested UIImage as first parameter and the NSData representation as second parameter. * In case of error the image parameter is nil and the third parameter may contain an NSError. * * The forth parameter is an `SDImageCacheType` enum indicating if the image was retrieved from the local cache * or from the memory cache or from the network. * * The fith parameter normally is always YES. However, if you provide SDWebImageAvoidAutoSetImage with SDWebImageProgressiveLoad options to enable progressive downloading and set the image yourself. This block is thus called repeatedly with a partial image. When image is fully downloaded, the * block is called a last time with the full image and the last parameter set to YES. * * The last parameter is the original image URL */- (void)sd_internalSetImageWithURL:(nullable NSURL *)url placeholderImage:(nullable UIImage *)placeholder options:(SDWebImageOptions)options context:(nullable SDWebImageContext *)context setImageBlock:(nullable SDSetImageBlock)setImageBlock progress:(nullable SDImageLoaderProgressBlock)progressBlock completed:(nullable SDInternalCompletionBlock)completedBlock;/** * Cancel the current image load */- (void)sd_cancelCurrentImageLoad;#if SD_UIKIT || SD_MAC#pragma mark - Image Transition/** The image transition when image load finished. See `SDWebImageTransition`. If you specify nil, do not do transition. Defautls to nil. */@property (nonatomic, strong, nullable) SDWebImageTransition *sd_imageTransition;#pragma mark - Image Indicator/** The image indicator during the image loading. If you do not need indicator, specify nil. Defaults to nil The setter will remove the old indicator view and add new indicator view to current view&apos;s subview. @note Because this is UI related, you should access only from the main queue. */@property (nonatomic, strong, nullable) id&lt;SDWebImageIndicator&gt; sd_imageIndicator;#endif 方法实现： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229230231232233234235236237238239240241242243244245246247248249250251252253254255256257258259260261262263264- (void)sd_internalSetImageWithURL:(nullable NSURL *)url placeholderImage:(nullable UIImage *)placeholder options:(SDWebImageOptions)options context:(nullable SDWebImageContext *)context setImageBlock:(nullable SDSetImageBlock)setImageBlock progress:(nullable SDImageLoaderProgressBlock)progressBlock completed:(nullable SDInternalCompletionBlock)completedBlock &#123; if (context) &#123; // copy to avoid mutable object context = [context copy]; &#125; else &#123; context = [NSDictionary dictionary]; &#125; NSString *validOperationKey = context[SDWebImageContextSetImageOperationKey]; if (!validOperationKey) &#123; // pass through the operation key to downstream, which can used for tracing operation or image view class validOperationKey = NSStringFromClass([self class]); SDWebImageMutableContext *mutableContext = [context mutableCopy]; mutableContext[SDWebImageContextSetImageOperationKey] = validOperationKey; context = [mutableContext copy]; &#125; self.sd_latestOperationKey = validOperationKey; /// 取消上一次的下载任务 [self sd_cancelImageLoadOperationWithKey:validOperationKey]; self.sd_imageURL = url; /// 如果不延迟加载展位图，就先显示占位图 if (!(options &amp; SDWebImageDelayPlaceholder)) &#123; dispatch_main_async_safe(^&#123; [self sd_setImage:placeholder imageData:nil basedOnClassOrViaCustomSetImageBlock:setImageBlock cacheType:SDImageCacheTypeNone imageURL:url]; &#125;); &#125; if (url) &#123; // reset the progress NSProgress *imageProgress = objc_getAssociatedObject(self, @selector(sd_imageProgress)); if (imageProgress) &#123; imageProgress.totalUnitCount = 0; imageProgress.completedUnitCount = 0; &#125; #if SD_UIKIT || SD_MAC // check and start image indicator [self sd_startImageIndicator]; id&lt;SDWebImageIndicator&gt; imageIndicator = self.sd_imageIndicator;#endif SDWebImageManager *manager = context[SDWebImageContextCustomManager]; if (!manager) &#123; manager = [SDWebImageManager sharedManager]; &#125; else &#123; // remove this manager to avoid retain cycle (manger -&gt; loader -&gt; operation -&gt; context -&gt; manager) SDWebImageMutableContext *mutableContext = [context mutableCopy]; mutableContext[SDWebImageContextCustomManager] = nil; context = [mutableContext copy]; &#125; SDImageLoaderProgressBlock combinedProgressBlock = ^(NSInteger receivedSize, NSInteger expectedSize, NSURL * _Nullable targetURL) &#123; if (imageProgress) &#123; imageProgress.totalUnitCount = expectedSize; imageProgress.completedUnitCount = receivedSize; &#125;#if SD_UIKIT || SD_MAC if ([imageIndicator respondsToSelector:@selector(updateIndicatorProgress:)]) &#123; double progress = 0; if (expectedSize != 0) &#123; progress = (double)receivedSize / expectedSize; &#125; progress = MAX(MIN(progress, 1), 0); // 0.0 - 1.0 dispatch_async(dispatch_get_main_queue(), ^&#123; [imageIndicator updateIndicatorProgress:progress]; &#125;); &#125;#endif /// 回调下载进度 if (progressBlock) &#123; progressBlock(receivedSize, expectedSize, targetURL); &#125; &#125;; @weakify(self); id &lt;SDWebImageOperation&gt; operation = [manager loadImageWithURL:url options:options context:context progress:combinedProgressBlock completed:^(UIImage *image, NSData *data, NSError *error, SDImageCacheType cacheType, BOOL finished, NSURL *imageURL) &#123; @strongify(self); if (!self) &#123; return; &#125; // if the progress not been updated, mark it to complete state if (imageProgress &amp;&amp; finished &amp;&amp; !error &amp;&amp; imageProgress.totalUnitCount == 0 &amp;&amp; imageProgress.completedUnitCount == 0) &#123; imageProgress.totalUnitCount = SDWebImageProgressUnitCountUnknown; imageProgress.completedUnitCount = SDWebImageProgressUnitCountUnknown; &#125; #if SD_UIKIT || SD_MAC // check and stop image indicator if (finished) &#123; [self sd_stopImageIndicator]; &#125;#endif BOOL shouldCallCompletedBlock = finished || (options &amp; SDWebImageAvoidAutoSetImage); BOOL shouldNotSetImage = ((image &amp;&amp; (options &amp; SDWebImageAvoidAutoSetImage)) || (!image &amp;&amp; !(options &amp; SDWebImageDelayPlaceholder))); SDWebImageNoParamsBlock callCompletedBlockClojure = ^&#123; if (!self) &#123; return; &#125; if (!shouldNotSetImage) &#123; [self sd_setNeedsLayout]; &#125; if (completedBlock &amp;&amp; shouldCallCompletedBlock) &#123; completedBlock(image, data, error, cacheType, finished, url); &#125; &#125;; // case 1a: we got an image, but the SDWebImageAvoidAutoSetImage flag is set // OR // case 1b: we got no image and the SDWebImageDelayPlaceholder is not set if (shouldNotSetImage) &#123; dispatch_main_async_safe(callCompletedBlockClojure); return; &#125; UIImage *targetImage = nil; NSData *targetData = nil; if (image) &#123; // case 2a: we got an image and the SDWebImageAvoidAutoSetImage is not set targetImage = image; targetData = data; &#125; else if (options &amp; SDWebImageDelayPlaceholder) &#123; // case 2b: we got no image and the SDWebImageDelayPlaceholder flag is set targetImage = placeholder; targetData = nil; &#125; #if SD_UIKIT || SD_MAC // check whether we should use the image transition SDWebImageTransition *transition = nil; if (finished &amp;&amp; (options &amp; SDWebImageForceTransition || cacheType == SDImageCacheTypeNone)) &#123; transition = self.sd_imageTransition; &#125;#endif dispatch_main_async_safe(^&#123;#if SD_UIKIT || SD_MAC /// 设置缓存或网络加载图片 [self sd_setImage:targetImage imageData:targetData basedOnClassOrViaCustomSetImageBlock:setImageBlock transition:transition cacheType:cacheType imageURL:imageURL];#else [self sd_setImage:targetImage imageData:targetData basedOnClassOrViaCustomSetImageBlock:setImageBlock cacheType:cacheType imageURL:imageURL];#endif callCompletedBlockClojure(); &#125;); &#125;]; /// 存储图片下载operation [self sd_setImageLoadOperation:operation forKey:validOperationKey]; &#125; else &#123;#if SD_UIKIT || SD_MAC [self sd_stopImageIndicator];#endif dispatch_main_async_safe(^&#123; if (completedBlock) &#123; NSError *error = [NSError errorWithDomain:SDWebImageErrorDomain code:SDWebImageErrorInvalidURL userInfo:@&#123;NSLocalizedDescriptionKey : @&quot;Image url is nil&quot;&#125;]; completedBlock(nil, nil, error, SDImageCacheTypeNone, YES, url); &#125; &#125;); &#125;&#125;- (void)sd_setImage:(UIImage *)image imageData:(NSData *)imageData basedOnClassOrViaCustomSetImageBlock:(SDSetImageBlock)setImageBlock cacheType:(SDImageCacheType)cacheType imageURL:(NSURL *)imageURL &#123;#if SD_UIKIT || SD_MAC [self sd_setImage:image imageData:imageData basedOnClassOrViaCustomSetImageBlock:setImageBlock transition:nil cacheType:cacheType imageURL:imageURL];#else // watchOS does not support view transition. Simplify the logic if (setImageBlock) &#123; setImageBlock(image, imageData, cacheType, imageURL); &#125; else if ([self isKindOfClass:[UIImageView class]]) &#123; UIImageView *imageView = (UIImageView *)self; [imageView setImage:image]; &#125;#endif&#125;#if SD_UIKIT || SD_MAC- (void)sd_setImage:(UIImage *)image imageData:(NSData *)imageData basedOnClassOrViaCustomSetImageBlock:(SDSetImageBlock)setImageBlock transition:(SDWebImageTransition *)transition cacheType:(SDImageCacheType)cacheType imageURL:(NSURL *)imageURL &#123; UIView *view = self; SDSetImageBlock finalSetImageBlock; if (setImageBlock) &#123; finalSetImageBlock = setImageBlock; &#125; else if ([view isKindOfClass:[UIImageView class]]) &#123; UIImageView *imageView = (UIImageView *)view; finalSetImageBlock = ^(UIImage *setImage, NSData *setImageData, SDImageCacheType setCacheType, NSURL *setImageURL) &#123; imageView.image = setImage; &#125;; &#125;#if SD_UIKIT else if ([view isKindOfClass:[UIButton class]]) &#123; UIButton *button = (UIButton *)view; finalSetImageBlock = ^(UIImage *setImage, NSData *setImageData, SDImageCacheType setCacheType, NSURL *setImageURL) &#123; [button setImage:setImage forState:UIControlStateNormal]; &#125;; &#125;#endif#if SD_MAC else if ([view isKindOfClass:[NSButton class]]) &#123; NSButton *button = (NSButton *)view; finalSetImageBlock = ^(UIImage *setImage, NSData *setImageData, SDImageCacheType setCacheType, NSURL *setImageURL) &#123; button.image = setImage; &#125;; &#125;#endif if (transition) &#123;#if SD_UIKIT [UIView transitionWithView:view duration:0 options:0 animations:^&#123; // 0 duration to let UIKit render placeholder and prepares block if (transition.prepares) &#123; transition.prepares(view, image, imageData, cacheType, imageURL); &#125; &#125; completion:^(BOOL finished) &#123; [UIView transitionWithView:view duration:transition.duration options:transition.animationOptions animations:^&#123; if (finalSetImageBlock &amp;&amp; !transition.avoidAutoSetImage) &#123; finalSetImageBlock(image, imageData, cacheType, imageURL); &#125; if (transition.animations) &#123; transition.animations(view, image); &#125; &#125; completion:transition.completion]; &#125;];#elif SD_MAC [NSAnimationContext runAnimationGroup:^(NSAnimationContext * _Nonnull prepareContext) &#123; // 0 duration to let AppKit render placeholder and prepares block prepareContext.duration = 0; if (transition.prepares) &#123; transition.prepares(view, image, imageData, cacheType, imageURL); &#125; &#125; completionHandler:^&#123; [NSAnimationContext runAnimationGroup:^(NSAnimationContext * _Nonnull context) &#123; context.duration = transition.duration; #pragma clang diagnostic push #pragma clang diagnostic ignored &quot;-Wdeprecated-declarations&quot; CAMediaTimingFunction *timingFunction = transition.timingFunction; #pragma clang diagnostic pop if (!timingFunction) &#123; timingFunction = SDTimingFunctionFromAnimationOptions(transition.animationOptions); &#125; context.timingFunction = timingFunction; context.allowsImplicitAnimation = SD_OPTIONS_CONTAINS(transition.animationOptions, SDWebImageAnimationOptionAllowsImplicitAnimation); if (finalSetImageBlock &amp;&amp; !transition.avoidAutoSetImage) &#123; finalSetImageBlock(image, imageData, cacheType, imageURL); &#125; CATransition *trans = SDTransitionFromAnimationOptions(transition.animationOptions); if (trans) &#123; [view.layer addAnimation:trans forKey:kCATransition]; &#125; if (transition.animations) &#123; transition.animations(view, image); &#125; &#125; completionHandler:^&#123; if (transition.completion) &#123; transition.completion(YES); &#125; &#125;]; &#125;];#endif &#125; else &#123; if (finalSetImageBlock) &#123; finalSetImageBlock(image, imageData, cacheType, imageURL); &#125; &#125;&#125;#endif 取消下载任务 12345678910111213141516171819- (void)sd_cancelImageLoadOperationWithKey:(nullable NSString *)key &#123; if (key) &#123; // Cancel in progress downloader from queue SDOperationsDictionary *operationDictionary = [self sd_operationDictionary]; id&lt;SDWebImageOperation&gt; operation; @synchronized (self) &#123; operation = [operationDictionary objectForKey:key]; &#125; if (operation) &#123; if ([operation conformsToProtocol:@protocol(SDWebImageOperation)]) &#123; [operation cancel]; &#125; @synchronized (self) &#123; [operationDictionary removeObjectForKey:key]; &#125; &#125; &#125;&#125; 总的来说，5.0之后的版本，图片设置分类代码简化了许多，因为相关逻辑都被抽离到了Manager里，分类里之需关注方法调用，不用再处理复杂图片的查询，下载，缓存等逻辑。 3.11、SDWebImageMapKit主要为MKAnnotationView添加了设置图片分类。 四、软件架构设计需知识储备 对源码阅读一遍，我所理解的设计图片加载库所需要的知识储备 CocoTouch各种framework 多线程 图片编/解码 网络 文件系统 跨平台适配 设计模式 软件设计原则 算法 五、相关插件Coders for additional image formats Plugin Description SDWebImageWebPCoder coder for WebP format. Based on libwebp SDWebImageHEIFCoder coder for HEIF format, iOS 8+/macOS 10.10+ support. Based on libheif SDWebImageBPGCoder coder for BPG format. Based on libbpg SDWebImageFLIFCoder coder for FLIF format. Based on libflif SDWebImageAVIFCoder coder for AVIF (AV1-based) format. Based on libavif SDWebImagePDFCoder coder for PDF vector format. Using built-in frameworks SDWebImageSVGCoder coder for SVG vector format. Using built-in frameworks SDWebImageLottieCoder coder for Lottie animation format. Based on rlottie Custom Caches Plugin Description SDWebImageYYPlugin plugin to support caching images with YYCache SDWebImagePINPlugin plugin to support caching images with PINCache Custom Loaders Plugin Description SDWebImagePhotosPlugin plugin to support loading images from Photos (using Photos.framework) SDWebImageLinkPlugin plugin to support loading images from rich link url, as well as LPLinkView (using LinkPresentation.framework) Integration with 3rd party libraries Plugin Description SDWebImageLottiePlugin plugin to support Lottie-iOS, vector animation rending with remote JSON files SDWebImageSVGKitPlugin plugin to support SVGKit, SVG rendering using Core Animation, iOS 8+/macOS 10.10+ support SDWebImageFLPlugin plugin to support FLAnimatedImage as the engine for animated GIFs SDWebImageYYPlugin plugin to integrate YYImage &amp; YYCache for image rendering &amp; caching 六、结语 到这里，对源码的解读也就告一段落了。最新版本的架构设计也更加合理，使用协议，使扩展相当灵活，也更容易插件化，对各个功能能够轻松实现替换。框架图片编码解码处理，对于现在的我来说，理解还是有些吃力，总的来说，这次的源码阅读，我收获颇多，好的框架，更易于让人使用，阅读，理解，希望自己在以后编码设计中，能够汲取其优秀的编程设计思想，灵活运用。以后有时间，也会继续阅读源码，相信每次阅读，都会有新的体会与收获。如文章有解读不对的地方，希望能批评指正。]]></content>
      <categories>
        <category>iOS</category>
      </categories>
      <tags>
        <tag>iOS</tag>
        <tag>SDWebImage</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[设计模式]]></title>
    <url>%2F2020%2F06%2F06%2F%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%2F</url>
    <content type="text"><![CDATA[前言 笔者在现在iOS开发中很少使用设计模式，但在日常开发中，接触的CocoTouch开发框架中，很多开发类库都用到了软件设计原则，和设计模式。遵循软件设计原则，合理使用设计模式，对于提高软件可阅读性，扩展性，可维护性，稳定性，是很有必要的。自己现在也是通过浏览博客，查阅资料，对软件设计原则，设计模式有一个大概的了解，先做下文章记录，以后自己在开发中有更深入的学习和应用，会更新博客，写下自己的见解。 软件设计7大原则 编写 全称 中文名称 S Single Responsibility Principle 单一职责原则 O Open Close Principle 开闭原则 L Liskov Substitution Principle 里氏替换原则 I Interface Segregation Principle 接口隔离原则 D Dependence Inversion Principle 依赖倒置原则 L Law Of Demeter 迪米特法则 C Composite/Aggregate Reuse Principle CARP 组合/聚合复用原则 前5中被称之为SOLID原则 思维导图 设计原则定义开闭原则（Open Close Principle）一个软件实体如类、模块和函数应该对扩展开放，对修改关闭。 单一职责原则（Single Responsibility Principle）一个类只允许有一个职责，即只有一个导致该类变更的原因。 依赖倒置原则（Dependency Inversion Principle） 依赖抽象，而不是依赖实现。 抽象不应该依赖细节；细节应该依赖抽象。 高层模块不能依赖低层模块，二者都应该依赖抽象。 接口分离原则（Interface Segregation Principle）多个特定的客户端接口要好于一个通用性的总接口。 迪米特法则（Law of Demeter）一个对象应该对尽可能少的对象有接触，也就是只接触那些真正需要接触的对象。 里氏替换原则（Liskov Substitution Principle）所有引用基类的地方必须能透明地使用其子类的对象，也就是说子类对象可以替换其父类对象，而程序执行效果不变。 组合/聚合复用原则要尽量使用合成/聚合，尽量不要使用继承。 23种设计模式思维导图 设计模式的三个分类创建型模式：对象实例化的模式，创建型模式用于解耦对象的实例化过程。 结构型模式：把类或对象结合在一起形成一个更大的结构。 行为型模式：类和对象如何交互，及划分责任和算法。 分类模式的关键点单例模式某个类只能有一个实例，提供一个全局的访问点。 简单工厂一个工厂类根据传入的参量决定创建出那一种产品类的实例。 工厂方法定义一个创建对象的接口，让子类决定实例化那个类。 抽象工厂创建相关或依赖对象的家族，而无需明确指定具体类。 建造者模式封装一个复杂对象的构建过程，并可以按步骤构造。 原型模式通过复制现有的实例来创建新的实例。 适配器模式将一个类的方法接口转换成客户希望的另外一个接口。 组合模式将对象组合成树形结构以表示“”部分-整体“”的层次结构。 装饰模式动态的给对象添加新的功能。 代理模式为其他对象提供一个代理以便控制这个对象的访问。 亨元（蝇量）模式通过共享技术来有效的支持大量细粒度的对象。 外观模式对外提供一个统一的方法，来访问子系统中的一群接口。 桥接模式将抽象部分和它的实现部分分离，使它们都可以独立的变化。 模板模式：定义一个算法结构，而将一些步骤延迟到子类实现。 解释器模式给定一个语言，定义它的文法的一种表示，并定义一个解释器。 策略模式定义一系列算法，把他们封装起来，并且使它们可以相互替换。 状态模式允许一个对象在其对象内部状态改变时改变它的行为。 观察者模式对象间的一对多的依赖关系。 备忘录模式在不破坏封装的前提下，保持对象的内部状态。 中介者模式用一个中介对象来封装一系列的对象交互。 命令模式将命令请求封装为一个对象，使得可以用不同的请求来进行参数化。 访问者模式在不改变数据结构的前提下，增加作用于一组对象元素的新功能。 责任链模式将请求的发送者和接收者解耦，使的多个对象都有处理这个请求的机会。 迭代器模式一种遍历访问聚合对象中各个元素的方法，不暴露该对象的内部结构。 ReferenceiOS设计模式详解 JAVA设计模式总结之23种设计模式] 面向对象设计的六大设计原则（附 Demo &amp; UML类图）]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>iOS</tag>
        <tag>设计模式</tag>
        <tag>软件设计原则</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CTMediator源码浅析及实践]]></title>
    <url>%2F2020%2F06%2F04%2FCTMediator%E6%BA%90%E7%A0%81%E6%B5%85%E6%9E%90%E5%8F%8A%E5%AE%9E%E8%B7%B5%2F</url>
    <content type="text"><![CDATA[前言 组件化开发的概念已经出现很久了，当APP业务庞大到无法很好的团队协作开发，组件化开发模式就派上用场了。发展演变的今天，已经有很多解决方案了，最具有代表的就是Target-Action，URL，Protocol这三种方式，不管用哪一种，适合才是最好的。 从自己接触到这个概念，就一直很感兴趣，但那会儿公司也没有强制要求用组件化开发，确实公司业务也没有达到需要用这种模式，盲目实行只会增加维护管理的成本。 最近在公司项目，基于Target-Action中间着模式，对现有的工程进行组件化改造，他是casatwy老师开源的一个组件化库，最近对源码进行了阅读，源码并不多，就一百来行，精简但是却很强大。下面对源码进行解读吧。 思维导图 实现原理CTMediator其实现原理是基于Runtime实现方法调度 1- (id)performSelector:(SEL)aSelector withObject:(id)object; 1NSInvocation 核心源码 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566- (id)safePerformAction:(SEL)action target:(NSObject *)target params:(NSDictionary *)params&#123; NSMethodSignature* methodSig = [target methodSignatureForSelector:action]; if(methodSig == nil) &#123; return nil; &#125; const char* retType = [methodSig methodReturnType]; if (strcmp(retType, @encode(void)) == 0) &#123; NSInvocation *invocation = [NSInvocation invocationWithMethodSignature:methodSig]; [invocation setArgument:&amp;params atIndex:2]; [invocation setSelector:action]; [invocation setTarget:target]; [invocation invoke]; return nil; &#125; if (strcmp(retType, @encode(NSInteger)) == 0) &#123; NSInvocation *invocation = [NSInvocation invocationWithMethodSignature:methodSig]; [invocation setArgument:&amp;params atIndex:2]; [invocation setSelector:action]; [invocation setTarget:target]; [invocation invoke]; NSInteger result = 0; [invocation getReturnValue:&amp;result]; return @(result); &#125; if (strcmp(retType, @encode(BOOL)) == 0) &#123; NSInvocation *invocation = [NSInvocation invocationWithMethodSignature:methodSig]; [invocation setArgument:&amp;params atIndex:2]; [invocation setSelector:action]; [invocation setTarget:target]; [invocation invoke]; BOOL result = 0; [invocation getReturnValue:&amp;result]; return @(result); &#125; if (strcmp(retType, @encode(CGFloat)) == 0) &#123; NSInvocation *invocation = [NSInvocation invocationWithMethodSignature:methodSig]; [invocation setArgument:&amp;params atIndex:2]; [invocation setSelector:action]; [invocation setTarget:target]; [invocation invoke]; CGFloat result = 0; [invocation getReturnValue:&amp;result]; return @(result); &#125; if (strcmp(retType, @encode(NSUInteger)) == 0) &#123; NSInvocation *invocation = [NSInvocation invocationWithMethodSignature:methodSig]; [invocation setArgument:&amp;params atIndex:2]; [invocation setSelector:action]; [invocation setTarget:target]; [invocation invoke]; NSUInteger result = 0; [invocation getReturnValue:&amp;result]; return @(result); &#125;#pragma clang diagnostic push#pragma clang diagnostic ignored &quot;-Warc-performSelector-leaks&quot; return [target performSelector:action withObject:params];#pragma clang diagnostic pop&#125; 头文件开放的两个接口方法，都是对上面这个方法传入参数进行处理，包括一些容错处理 1234// 远程App调用入口- (id _Nullable)performActionWithUrl:(NSURL * _Nullable)url completion:(void(^_Nullable)(NSDictionary * _Nullable info))completion;// 本地组件调用入口- (id _Nullable )performTarget:(NSString * _Nullable)targetName action:(NSString * _Nullable)actionName params:(NSDictionary * _Nullable)params shouldCacheTarget:(BOOL)shouldCacheTarget; CTMediator+HandyToolsCTMediator的扩展方法，可以不再VC类里实现跳转，减少依赖，实现解耦。 123- (UIViewController * _Nullable)topViewController;- (void)pushViewController:(UIViewController *)viewController animated:(BOOL)animated;- (void)presentViewController:(UIViewController *)viewControllerToPresent animated:(BOOL)animated completion:(void (^ _Nullable )(void))completion; 实际应用一开始就实施如果一开始都采用这种架构模式，实现组件化开发还是很容易的，可以更多的专注于业务开发。 在现有工程实施如果是对现有工程实施改造，如果之前模块划分混乱，那么改造起来是相当的痛苦，各种依赖，剪不断，理还乱。 第一步，制作基础依赖库，供上层业务依赖，如网络请求，工具类，基础UI组件，比较稳定，变动较少 第二步，拆分业务模块，跳转实施改造，创建Target_XX，文件，XX是targetName，nativeFetchDetailViewController是actionName 1234567- (UIViewController *)Action_nativeFetchDetailViewController:(NSDictionary *)params&#123; // 因为action是从属于ModuleA的，所以action直接可以使用ModuleA里的所有声明 DemoModuleADetailViewController *viewController = [[DemoModuleADetailViewController alloc] init]; viewController.valueLabel.text = params[@&quot;key&quot;]; return viewController;&#125; 创建CTMediator (CTMediatorModuleAActions)分类，添加跳转方法，这个文件就是需要维护的依赖文件，实现依赖解耦 1- (UIViewController *)CTMediator_viewControllerForDetail; 第三步，解决编译报错，并集成到主工程，让主工程编译通过 当然，CTMediator主要通过Runtime方法调度，不仅仅是实现跳转，它可以动态调度Target_XX任意返回值得方法，如基础数据类型，void，OC的类，从而达到解耦的目的，在调用的时候，可以传参是否缓存Target，这在cell复用的时候非常有用，在VC销毁时清除Target即可。 结语 相对于一般的开源库，casatwy老师的这个库，代码非常的精简，但却非常实用强大，可看出作者优秀的架构设计能力。代码不在多，而在精。对于我们日常开发也是很有启发的，对于一个新功能的开发，在开发之前，是不是应该考虑到可扩展，可复用，稳定性，实用性，然后才进行开发。组件化的实施，对于业务多，团队开发，还是很有必要的，但实施工程也会有各种各样的问题，需要不断优化解决，才能让APP更加稳定，更加易于维护。]]></content>
      <categories>
        <category>iOS</category>
      </categories>
      <tags>
        <tag>iOS</tag>
        <tag>CocoaPods</tag>
        <tag>组件化</tag>
        <tag>APP架构</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[MJExtension源码阅读笔记]]></title>
    <url>%2F2020%2F05%2F29%2FMJExtension%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0%2F</url>
    <content type="text"><![CDATA[前言 编写native界面，就避免不了和JSON数据打交道，界面数据填充，我们可以通过原生的字典取值，这样做似乎不是很优雅，于是我们通过一个字典去初始化一个模型类，通过属性名取值，但这样似乎不是很自动化。于是后来就有了JSON自动转模型框架，如MJExtension、YYModel等高性能转化框架。MJExtension可以轻松实现JSON和模型互转，自定义别名，自定义转换，归档解档，总之相当的强大。 实现原理浅析通过阅读源码，其实现原理主要运用了Runtime技术、KVC实现的。 框架思维导图 实用技巧标注方法过期当我们设计一个开源库的时候，有时候考虑的可能并不是很全面，比如方法命名不准确，不能表明用途，或者不推荐使用了，可以给出相应的提示 1234567/// MJExtensionConst/// 过期#define MJExtensionDeprecated(instead) NS_DEPRECATED(2_0, 2_0, 2_0, 2_0, instead)/// 具体使用- (void)mj_keyValuesDidFinishConvertingToObject MJExtensionDeprecated(&quot;请使用`mj_didConvertToObjectWithKeyValues:`替代&quot;); 遍历Protocol的PropertyList1234567891011121314151617181920212223+ (BOOL)isFromNSObjectProtocolProperty:(NSString *)propertyName&#123; if (!propertyName) return NO; static NSSet&lt;NSString *&gt; *objectProtocolPropertyNames; static dispatch_once_t onceToken; dispatch_once(&amp;onceToken, ^&#123; unsigned int count = 0; objc_property_t *propertyList = protocol_copyPropertyList(@protocol(NSObject), &amp;count); NSMutableSet *propertyNames = [NSMutableSet setWithCapacity:count]; for (int i = 0; i &lt; count; i++) &#123; objc_property_t property = propertyList[i]; NSString *propertyName = [NSString stringWithCString:property_getName(property) encoding:NSUTF8StringEncoding]; if (propertyName) &#123; [propertyNames addObject:propertyName]; &#125; &#125; objectProtocolPropertyNames = [propertyNames copy]; free(propertyList); &#125;); return [objectProtocolPropertyNames containsObject:propertyName];&#125; 获得类所有成员变量123456789101112131415161718192021222324252627282930313233343536373839/// NSObject+MJKeyValue+ (NSMutableArray *)mj_properties&#123; NSMutableArray *cachedProperties = [self mj_propertyDictForKey:&amp;MJCachedPropertiesKey][NSStringFromClass(self)]; if (cachedProperties == nil) &#123; if (cachedProperties == nil) &#123; cachedProperties = [NSMutableArray array]; /// 遍历类 [self mj_enumerateClasses:^(__unsafe_unretained Class c, BOOL *stop) &#123; // 1.获得所有的成员变量 unsigned int outCount = 0; objc_property_t *properties = class_copyPropertyList(c, &amp;outCount); // 2.遍历每一个成员变量 for (unsigned int i = 0; i&lt;outCount; i++) &#123; MJProperty *property = [MJProperty cachedPropertyWithProperty:properties[i]]; // 过滤掉Foundation框架类里面的属性 if ([MJFoundation isClassFromFoundation:property.srcClass]) continue; // 过滤掉`hash`, `superclass`, `description`, `debugDescription` if ([MJFoundation isFromNSObjectProtocolProperty:property.name]) continue; property.srcClass = c; [property setOriginKey:[self mj_propertyKey:property.name] forClass:self]; [property setObjectClassInArray:[self mj_propertyObjectClassInArray:property.name] forClass:self]; [cachedProperties addObject:property]; &#125; // 3.释放内存 free(properties); &#125;]; [self mj_propertyDictForKey:&amp;MJCachedPropertiesKey][NSStringFromClass(self)] = cachedProperties; &#125; &#125; return cachedProperties;&#125; 属性类型说明Objective-C type encodings Code Meaning c A char i An int s A short l A long`l` is treated as a 32-bit quantity on 64-bit programs. q A long long C An unsigned char I An unsigned int S An unsigned short L An unsigned long Q An unsigned long long f A float d A double B A C++ bool or a C99 _Bool v A void * A character string (char *) @ An object (whether statically typed or typed id) # A class object (Class) : A method selector (SEL) [array type] An array {name=type…} A structure (name=type…) A union bnum A bit field of num bits ^type A pointer to type ? An unknown type (among other things, this code is used for function pointers) 对于可变字典或数组，添加信号量锁保证线程安全12345678910111213/// MJProperty_propertyKeysLock = dispatch_semaphore_create(1);- (NSArray *)propertyKeysForClass:(Class)c&#123; NSString *key = NSStringFromClass(c); if (!key) return nil; MJ_LOCK(self.propertyKeysLock); NSArray *propertyKeys = self.propertyKeysDict[key]; MJ_UNLOCK(self.propertyKeysLock); return propertyKeys;&#125; 通过block实现类遍历类似系统数组Block遍历可，可通过stop控制遍历结束 123456789101112131415161718192021222324252627/** * 遍历所有类的block（父类） */typedef void (^MJClassesEnumeration)(Class c, BOOL *stop);+ (void)mj_enumerateClasses:(MJClassesEnumeration)enumeration&#123; // 1.没有block就直接返回 if (enumeration == nil) return; // 2.停止遍历的标记 BOOL stop = NO; // 3.当前正在遍历的类 Class c = self; // 4.开始遍历每一个类 while (c &amp;&amp; !stop) &#123; // 4.1.执行操作 enumeration(c, &amp;stop); // 4.2.获得父类 c = class_getSuperclass(c); if ([MJFoundation isClassFromFoundation:c]) break; &#125;&#125; 基于Runtime自动归档解档 如果模型属性很多的话，手动实现每个属性的归档解档，还是相当麻烦的，通过Runtime遍历成员变量，调用KVC，实现自动化归档解档 123456789101112131415161718192021222324252627282930313233343536373839404142/// NSObject (MJCoding)@implementation NSObject (MJCoding)- (void)mj_encode:(NSCoder *)encoder&#123; Class clazz = [self class]; NSArray *allowedCodingPropertyNames = [clazz mj_totalAllowedCodingPropertyNames]; NSArray *ignoredCodingPropertyNames = [clazz mj_totalIgnoredCodingPropertyNames]; [clazz mj_enumerateProperties:^(MJProperty *property, BOOL *stop) &#123; // 检测是否被忽略 if (allowedCodingPropertyNames.count &amp;&amp; ![allowedCodingPropertyNames containsObject:property.name]) return; if ([ignoredCodingPropertyNames containsObject:property.name]) return; id value = [property valueForObject:self]; if (value == nil) return; [encoder encodeObject:value forKey:property.name]; &#125;];&#125;- (void)mj_decode:(NSCoder *)decoder&#123; Class clazz = [self class]; NSArray *allowedCodingPropertyNames = [clazz mj_totalAllowedCodingPropertyNames]; NSArray *ignoredCodingPropertyNames = [clazz mj_totalIgnoredCodingPropertyNames]; [clazz mj_enumerateProperties:^(MJProperty *property, BOOL *stop) &#123; // 检测是否被忽略 if (allowedCodingPropertyNames.count &amp;&amp; ![allowedCodingPropertyNames containsObject:property.name]) return; if ([ignoredCodingPropertyNames containsObject:property.name]) return; id value = [decoder decodeObjectForKey:property.name]; if (value == nil) &#123; // 兼容以前的MJExtension版本 value = [decoder decodeObjectForKey:[@&quot;_&quot; stringByAppendingString:property.name]]; &#125; if (value == nil) return; [property setValue:value forObject:self]; &#125;];&#125;@end 具体使用，在.h文件遵循NSCoding协议，在.m添加MJExtensionCodingImplementation宏定义即可 12345@implementation xxx MJExtensionCodingImplementation @end NSCoding从源码可以看出只实现了NSCoding编码解码，如果想使用更安全的编码解码，可以遵循NSSecureCoding 123456789// Objects which are safe to be encoded and decoded across privilege boundaries should adopt NSSecureCoding instead of NSCoding. Secure coders (those that respond YES to requiresSecureCoding) will only encode objects that adopt the NSSecureCoding protocol.// NOTE: NSSecureCoding guarantees only that an archive contains the classes it claims. It makes no guarantees about the suitability for consumption by the receiver of the decoded content of the archive. Archived objects which may trigger code evaluation should be validated independently by the consumer of the objects to verify that no malicious code is executed (i.e. by checking key paths, selectors etc. specified in the archive).@protocol NSSecureCoding &lt;NSCoding&gt;@required// This property must return YES on all classes that allow secure coding. Subclasses of classes that adopt NSSecureCoding and override initWithCoder: must also override this method and return YES.// The Secure Coding Guide should be consulted when writing methods that decode data.@property (class, readonly) BOOL supportsSecureCoding;@end 在.m文件重写getter方法 123+ (BOOL)supportsSecureCoding &#123; return YES;&#125; 常用方法 自定义属性别名 123456/** * 将属性名换为其他key去字典中取值 * * @return 字典中的key是属性名，value是从字典中取值用的key */+ (NSDictionary *)mj_replacedKeyFromPropertyName; 模型包含数组模型 123456/** * 数组中需要转换的模型类 * * @return 字典中的key是数组属性名，value是数组中存放模型的Class（Class类型或者NSString类型） */+ (NSDictionary *)mj_objectClassInArray; 字典转模型 123456/** * 通过字典来创建一个模型 * @param keyValues 字典(可以是NSDictionary、NSData、NSString) * @return 新建的对象 */+ (instancetype)mj_objectWithKeyValues:(id)keyValues; 模型转字典 12345/** * 将模型转成字典 * @return 字典 */- (NSMutableDictionary *)mj_keyValues; 当字典转模型完毕时调用 1- (void)mj_didConvertToObjectWithKeyValues:(NSDictionary *)keyValues; 自定义转换,返回新的值 1- (id)mj_newValueFromOldValue:(id)oldValue property:(MJProperty *)property; 结语 对MJExtension源码阅读了一遍，从中还是收获颇多。作者优秀的框架设计能力，每个类都有其单一的功能，通过组合统一，实现了一套友好易于使用的API接口，上手非常方便。从中也了解了Runtime技术的强大，应用也是非常的广泛。由于自己技术水平有限，对于作者高度封装的一些方法，现在理解还是有些吃力，对于runtime技术在项目中的使用，也并不是很多。以后有时间，还会重新阅读，更新新的体会与心得。对于开源库的阅读，更多的是要理解作者的设计思想，底层实现原理，希望自己能从开源库的阅读，能够学习优秀编程思想，经验，提升自己编码水平、风格、和健壮性。最后，文章如有描述不对的地方，希望不吝批评指教。]]></content>
      <categories>
        <category>iOS</category>
      </categories>
      <tags>
        <tag>iOS</tag>
        <tag>JSON解析</tag>
        <tag>MJExtension</tag>
        <tag>开源库</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[读AFNetworking收获与心得]]></title>
    <url>%2F2020%2F05%2F26%2F%E8%AF%BBAFNetworking%E6%94%B6%E8%8E%B7%E4%B8%8E%E5%BF%83%E5%BE%97%2F</url>
    <content type="text"><![CDATA[前言 开发APP，都离不开网络请求，从实习时候开始，很少用系统原生的API去请求数据，而是用iOS著名网络请求框架AFNetworking，它是对系统网络请求API的高度封装，使用起来相当的简便，接口API，相关类设计非常优秀，非常值得阅读学习。最开始自己也是只会使用，对它进行二次封装，对其源码实现不是很了解，也尝试过阅读，但水平有限，也不能理解其设计思想。最近，在自己工作业余时间，对最新4.0.1源代码进行了阅读，从中还是收获颇多，尝试做一些笔记记录，如有解读描述不对的地方法，希望能批评指正。 整体设计架构 一、为分类添加属性，关联对象123456789101112131415@interface UIImageView (_AFNetworking)@property (readwrite, nonatomic, strong, setter = af_setActiveImageDownloadReceipt:) AFImageDownloadReceipt *af_activeImageDownloadReceipt;@end@implementation UIImageView (_AFNetworking)- (AFImageDownloadReceipt *)af_activeImageDownloadReceipt &#123; return (AFImageDownloadReceipt *)objc_getAssociatedObject(self, @selector(af_activeImageDownloadReceipt));&#125;- (void)af_setActiveImageDownloadReceipt:(AFImageDownloadReceipt *)imageDownloadReceipt &#123; objc_setAssociatedObject(self, @selector(af_activeImageDownloadReceipt), imageDownloadReceipt, OBJC_ASSOCIATION_RETAIN_NONATOMIC);&#125;@end 二、并发队列+栅栏函数保证可变容器读写安全 创建并发队列 123/// AFAutoPurgingImageCacheNSString *queueName = [NSString stringWithFormat:@"com.alamofire.autopurgingimagecache-%@", [[NSUUID UUID] UUIDString]]; self.synchronizationQueue = dispatch_queue_create([queueName cStringUsingEncoding:NSASCIIStringEncoding], DISPATCH_QUEUE_CONCURRENT); dispatch_barrier_async + DISPATCH_QUEUE_CONCURRENT字典存储数据 1234567891011121314151617181920212223242526272829303132333435/// AFAutoPurgingImageCache- (void)addImage:(UIImage *)image withIdentifier:(NSString *)identifier &#123; dispatch_barrier_async(self.synchronizationQueue, ^&#123; AFCachedImage *cacheImage = [[AFCachedImage alloc] initWithImage:image identifier:identifier]; AFCachedImage *previousCachedImage = self.cachedImages[identifier]; if (previousCachedImage != nil) &#123; self.currentMemoryUsage -= previousCachedImage.totalBytes; &#125; self.cachedImages[identifier] = cacheImage; self.currentMemoryUsage += cacheImage.totalBytes; &#125;); dispatch_barrier_async(self.synchronizationQueue, ^&#123; if (self.currentMemoryUsage &gt; self.memoryCapacity) &#123; UInt64 bytesToPurge = self.currentMemoryUsage - self.preferredMemoryUsageAfterPurge; NSMutableArray &lt;AFCachedImage*&gt; *sortedImages = [NSMutableArray arrayWithArray:self.cachedImages.allValues]; NSSortDescriptor *sortDescriptor = [[NSSortDescriptor alloc] initWithKey:@&quot;lastAccessDate&quot; ascending:YES]; [sortedImages sortUsingDescriptors:@[sortDescriptor]]; UInt64 bytesPurged = 0; for (AFCachedImage *cachedImage in sortedImages) &#123; [self.cachedImages removeObjectForKey:cachedImage.identifier]; bytesPurged += cachedImage.totalBytes; if (bytesPurged &gt;= bytesToPurge) &#123; break; &#125; &#125; self.currentMemoryUsage -= bytesPurged; &#125; &#125;);&#125; dispatch_barrier_sync + DISPATCH_QUEUE_CONCURRENT字典移除数据 12345678910111213/// AFAutoPurgingImageCache- (BOOL)removeImageWithIdentifier:(NSString *)identifier &#123; __block BOOL removed = NO; dispatch_barrier_sync(self.synchronizationQueue, ^&#123; AFCachedImage *cachedImage = self.cachedImages[identifier]; if (cachedImage != nil) &#123; [self.cachedImages removeObjectForKey:identifier]; self.currentMemoryUsage -= cachedImage.totalBytes; removed = YES; &#125; &#125;); return removed;&#125; 三、图片缓存淘汰算法，通过对图片缓存时间按升序排序，当缓存容量大于设定容量，对图片进行清除，规则越早缓存优先移除，代码如下：123456789101112131415161718192021/// AFAutoPurgingImageCachedispatch_barrier_async(self.synchronizationQueue, ^&#123; if (self.currentMemoryUsage &gt; self.memoryCapacity) &#123; UInt64 bytesToPurge = self.currentMemoryUsage - self.preferredMemoryUsageAfterPurge; NSMutableArray &lt;AFCachedImage*&gt; *sortedImages = [NSMutableArray arrayWithArray:self.cachedImages.allValues]; NSSortDescriptor *sortDescriptor = [[NSSortDescriptor alloc] initWithKey:@&quot;lastAccessDate&quot; ascending:YES]; [sortedImages sortUsingDescriptors:@[sortDescriptor]]; UInt64 bytesPurged = 0; for (AFCachedImage *cachedImage in sortedImages) &#123; [self.cachedImages removeObjectForKey:cachedImage.identifier]; bytesPurged += cachedImage.totalBytes; if (bytesPurged &gt;= bytesToPurge) &#123; break; &#125; &#125; self.currentMemoryUsage -= bytesPurged; &#125; &#125;); 四、对于可能出现crash的代码，加@try {} @catch {}，平时用的很少，对保证APP运行安全还是值得使用1234567891011121314151617181920212223242526272829303132333435363738394041/// UIProgressView+AFNetworking- (void)observeValueForKeyPath:(NSString *)keyPath ofObject:(id)object change:(__unused NSDictionary *)change context:(void *)context&#123; if (context == AFTaskCountOfBytesSentContext || context == AFTaskCountOfBytesReceivedContext) &#123; if ([keyPath isEqualToString:NSStringFromSelector(@selector(countOfBytesSent))]) &#123; if ([object countOfBytesExpectedToSend] &gt; 0) &#123; dispatch_async(dispatch_get_main_queue(), ^&#123; [self setProgress:[object countOfBytesSent] / ([object countOfBytesExpectedToSend] * 1.0f) animated:self.af_uploadProgressAnimated]; &#125;); &#125; &#125; if ([keyPath isEqualToString:NSStringFromSelector(@selector(countOfBytesReceived))]) &#123; if ([object countOfBytesExpectedToReceive] &gt; 0) &#123; dispatch_async(dispatch_get_main_queue(), ^&#123; [self setProgress:[object countOfBytesReceived] / ([object countOfBytesExpectedToReceive] * 1.0f) animated:self.af_downloadProgressAnimated]; &#125;); &#125; &#125; if ([keyPath isEqualToString:NSStringFromSelector(@selector(state))]) &#123; if ([(NSURLSessionTask *)object state] == NSURLSessionTaskStateCompleted) &#123; @try &#123; [object removeObserver:self forKeyPath:NSStringFromSelector(@selector(state))]; if (context == AFTaskCountOfBytesSentContext) &#123; [object removeObserver:self forKeyPath:NSStringFromSelector(@selector(countOfBytesSent))]; &#125; if (context == AFTaskCountOfBytesReceivedContext) &#123; [object removeObserver:self forKeyPath:NSStringFromSelector(@selector(countOfBytesReceived))]; &#125; &#125; @catch (NSException * __unused exception) &#123;&#125; &#125; &#125; &#125;&#125; 五、对于一个属性，对外界修改关闭，内部可以修改，可以这样写 在.h文件 123456/// AFNetworkReachabilityManager/** The current network reachability status. *//// 用readonly修饰，保证外界不可修改@property (readonly, nonatomic, assign) AFNetworkReachabilityStatus networkReachabilityStatus; 在.m文件extension中 123/// AFNetworkReachabilityManager/// readwrite修饰，内部可修改其值@property (readwrite, nonatomic, assign) AFNetworkReachabilityStatus networkReachabilityStatus; 六、指定方法不可用，并抛出异常1234567891011121314/// AFNetworkReachabilityManager/** * Unavailable initializer */- (instancetype)init NS_UNAVAILABLE;- (instancetype)init&#123; /// 抛出异常 @throw [NSException exceptionWithName:NSGenericException reason:@&quot;`-init` unavailable. Use `-initWithReachability:` instead&quot; userInfo:nil]; return nil;&#125; 七、函数递归调用，将数据处理成想要的结果123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051/// AFURLRequestSerialization.m#pragma mark -FOUNDATION_EXPORT NSArray * AFQueryStringPairsFromDictionary(NSDictionary *dictionary);FOUNDATION_EXPORT NSArray * AFQueryStringPairsFromKeyAndValue(NSString *key, id value);NSString * AFQueryStringFromParameters(NSDictionary *parameters) &#123; NSMutableArray *mutablePairs = [NSMutableArray array]; for (AFQueryStringPair *pair in AFQueryStringPairsFromDictionary(parameters)) &#123; [mutablePairs addObject:[pair URLEncodedStringValue]]; &#125; return [mutablePairs componentsJoinedByString:@&quot;&amp;&quot;];&#125;NSArray * AFQueryStringPairsFromDictionary(NSDictionary *dictionary) &#123; return AFQueryStringPairsFromKeyAndValue(nil, dictionary);&#125;/// 递归调用次方法，将参数处理成目标类型NSArray * AFQueryStringPairsFromKeyAndValue(NSString *key, id value) &#123; NSMutableArray *mutableQueryStringComponents = [NSMutableArray array]; NSSortDescriptor *sortDescriptor = [NSSortDescriptor sortDescriptorWithKey:@&quot;description&quot; ascending:YES selector:@selector(compare:)]; if ([value isKindOfClass:[NSDictionary class]]) &#123; NSDictionary *dictionary = value; // Sort dictionary keys to ensure consistent ordering in query string, which is important when deserializing potentially ambiguous sequences, such as an array of dictionaries for (id nestedKey in [dictionary.allKeys sortedArrayUsingDescriptors:@[ sortDescriptor ]]) &#123; id nestedValue = dictionary[nestedKey]; if (nestedValue) &#123; [mutableQueryStringComponents addObjectsFromArray:AFQueryStringPairsFromKeyAndValue((key ? [NSString stringWithFormat:@&quot;%@[%@]&quot;, key, nestedKey] : nestedKey), nestedValue)]; &#125; &#125; &#125; else if ([value isKindOfClass:[NSArray class]]) &#123; NSArray *array = value; for (id nestedValue in array) &#123; [mutableQueryStringComponents addObjectsFromArray:AFQueryStringPairsFromKeyAndValue([NSString stringWithFormat:@&quot;%@[]&quot;, key], nestedValue)]; &#125; &#125; else if ([value isKindOfClass:[NSSet class]]) &#123; NSSet *set = value; for (id obj in [set sortedArrayUsingDescriptors:@[ sortDescriptor ]]) &#123; [mutableQueryStringComponents addObjectsFromArray:AFQueryStringPairsFromKeyAndValue(key, obj)]; &#125; &#125; else &#123; [mutableQueryStringComponents addObject:[[AFQueryStringPair alloc] initWithField:key value:value]]; &#125; return mutableQueryStringComponents;&#125; 八、手动触发KVO 对于要手动触发的属性，进行特殊处理 1234567+ (BOOL)automaticallyNotifiesObserversForKey:(NSString *)key &#123; if ([AFHTTPRequestSerializerObservedKeyPaths() containsObject:key]) &#123; return NO; &#125; return [super automaticallyNotifiesObserversForKey:key];&#125; 手动触发KVO 1234567891011121314151617181920212223242526272829303132333435- (void)setAllowsCellularAccess:(BOOL)allowsCellularAccess &#123; [self willChangeValueForKey:NSStringFromSelector(@selector(allowsCellularAccess))]; _allowsCellularAccess = allowsCellularAccess; [self didChangeValueForKey:NSStringFromSelector(@selector(allowsCellularAccess))];&#125;- (void)setCachePolicy:(NSURLRequestCachePolicy)cachePolicy &#123; [self willChangeValueForKey:NSStringFromSelector(@selector(cachePolicy))]; _cachePolicy = cachePolicy; [self didChangeValueForKey:NSStringFromSelector(@selector(cachePolicy))];&#125;- (void)setHTTPShouldHandleCookies:(BOOL)HTTPShouldHandleCookies &#123; [self willChangeValueForKey:NSStringFromSelector(@selector(HTTPShouldHandleCookies))]; _HTTPShouldHandleCookies = HTTPShouldHandleCookies; [self didChangeValueForKey:NSStringFromSelector(@selector(HTTPShouldHandleCookies))];&#125;- (void)setHTTPShouldUsePipelining:(BOOL)HTTPShouldUsePipelining &#123; [self willChangeValueForKey:NSStringFromSelector(@selector(HTTPShouldUsePipelining))]; _HTTPShouldUsePipelining = HTTPShouldUsePipelining; [self didChangeValueForKey:NSStringFromSelector(@selector(HTTPShouldUsePipelining))];&#125;- (void)setNetworkServiceType:(NSURLRequestNetworkServiceType)networkServiceType &#123; [self willChangeValueForKey:NSStringFromSelector(@selector(networkServiceType))]; _networkServiceType = networkServiceType; [self didChangeValueForKey:NSStringFromSelector(@selector(networkServiceType))];&#125;- (void)setTimeoutInterval:(NSTimeInterval)timeoutInterval &#123; [self willChangeValueForKey:NSStringFromSelector(@selector(timeoutInterval))]; _timeoutInterval = timeoutInterval; [self didChangeValueForKey:NSStringFromSelector(@selector(timeoutInterval))];&#125; 九、实现NSCopying协议 遵循NSCopying协议 1234567891011121314151617/// AFURLRequestSerialization@protocol AFURLRequestSerialization &lt;NSObject, NSSecureCoding, NSCopying&gt;/** Returns a request with the specified parameters encoded into a copy of the original request. @param request The original request. @param parameters The parameters to be encoded. @param error The error that occurred while attempting to encode the request parameters. @return A serialized request. */- (nullable NSURLRequest *)requestBySerializingRequest:(NSURLRequest *)request withParameters:(nullable id)parameters error:(NSError * _Nullable __autoreleasing *)error NS_SWIFT_NOTHROW;@end 实现- (instancetype)copyWithZone:(NSZone *)zone方法 1234567891011/// AFURLRequestSerialization.m- (instancetype)copyWithZone:(NSZone *)zone &#123; AFHTTPRequestSerializer *serializer = [[[self class] allocWithZone:zone] init]; dispatch_sync(self.requestHeaderModificationQueue, ^&#123; serializer.mutableHTTPRequestHeaders = [self.mutableHTTPRequestHeaders mutableCopyWithZone:zone]; &#125;); serializer.queryStringSerializationStyle = self.queryStringSerializationStyle; serializer.queryStringSerialization = self.queryStringSerialization; return serializer;&#125; 十、NSSecureCoding协议 遵循NSSecureCoding协议 12/// AFSecurityPolicy@interface AFSecurityPolicy : NSObject &lt;NSSecureCoding, NSCopying&gt; 实现 123456789101112131415161718192021222324252627282930/// AFSecurityPolicy#pragma mark - NSSecureCoding+ (BOOL)supportsSecureCoding &#123; return YES;&#125;/// decode- (instancetype)initWithCoder:(NSCoder *)decoder &#123; self = [self init]; if (!self) &#123; return nil; &#125; self.SSLPinningMode = [[decoder decodeObjectOfClass:[NSNumber class] forKey:NSStringFromSelector(@selector(SSLPinningMode))] unsignedIntegerValue]; self.allowInvalidCertificates = [decoder decodeBoolForKey:NSStringFromSelector(@selector(allowInvalidCertificates))]; self.validatesDomainName = [decoder decodeBoolForKey:NSStringFromSelector(@selector(validatesDomainName))]; self.pinnedCertificates = [decoder decodeObjectOfClass:[NSSet class] forKey:NSStringFromSelector(@selector(pinnedCertificates))]; return self;&#125;/// encode- (void)encodeWithCoder:(NSCoder *)coder &#123; [coder encodeObject:[NSNumber numberWithUnsignedInteger:self.SSLPinningMode] forKey:NSStringFromSelector(@selector(SSLPinningMode))]; [coder encodeBool:self.allowInvalidCertificates forKey:NSStringFromSelector(@selector(allowInvalidCertificates))]; [coder encodeBool:self.validatesDomainName forKey:NSStringFromSelector(@selector(validatesDomainName))]; [coder encodeObject:self.pinnedCertificates forKey:NSStringFromSelector(@selector(pinnedCertificates))];&#125; 结语 这也是自己第一次阅读源码写的记录博客，当自己对作者源码思想有所理解时候，内心也是非常开心与满足，阅读优秀开源库源码，对自己编程的架构思想，代码设计能力还是非常有帮助的。由于自己水平有限，有解读不对地方，还请不吝指正，我会立即做出修改，后续有新的体会与收获，也会在这篇博客中更新。]]></content>
      <categories>
        <category>iOS</category>
      </categories>
      <tags>
        <tag>iOS</tag>
        <tag>GitHub</tag>
        <tag>AFNetworking</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[iOS应用审核被拒整理&解决方案]]></title>
    <url>%2F2020%2F05%2F26%2FiOS%E5%BA%94%E7%94%A8%E5%AE%A1%E6%A0%B8%E8%A2%AB%E6%8B%92%E6%95%B4%E7%90%86-%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88%2F</url>
    <content type="text"><![CDATA[IPV6 服务器最好兼容ipv6协议 尝试多次提交，运气好就pass了 录视频上传到YouTube，给审核团队证明，能在ipv6网络下访问 可参考这篇博客Solve-App-Store-Review-Problem，处理方案很全。 包含三方未授权内容 提供相关授权证明 删除相关内容 权限申请被拒 info.plist里的权限描述要能准确，表明用途]]></content>
      <categories>
        <category>审核</category>
      </categories>
      <tags>
        <tag>iOS</tag>
        <tag>IPV6</tag>
        <tag>审核</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[iOS 13适配小记]]></title>
    <url>%2F2019%2F09%2F29%2FiOS-13%E9%80%82%E9%85%8D%E5%B0%8F%E8%AE%B0%2F</url>
    <content type="text"><![CDATA[一、模态跳转适配二、暗黑模式适配三、UITabbar选中颜色调整四、KVC设置私有属性适配五、DeviceToken获取方式适配六、状态栏适配]]></content>
      <categories>
        <category>iOS</category>
      </categories>
      <tags>
        <tag>iOS 13</tag>
        <tag>Xcode</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[iOS优秀Swift开源库整理，了解一下]]></title>
    <url>%2F2019%2F09%2F03%2FiOS%E4%BC%98%E7%A7%80Swift%E5%BC%80%E6%BA%90%E5%BA%93%E6%95%B4%E7%90%86%EF%BC%8C%E4%BA%86%E8%A7%A3%E4%B8%80%E4%B8%8B%2F</url>
    <content type="text"><![CDATA[前言 自己从事iOS开发工作接近两年左右的时间了，在自己工作之余，收集整理了一些优秀的三方开源框架，自己整理的这些三方开源库涵盖了iOS开发面很多方面的知识。非常感谢这些开源库的作者们，正是因为这些库，提高了我们的开发效率，同样也是我们学习进步的源泉。现将这个整理工程文件分享出来，希望能给需要的朋友一些帮助，同时也自己也做下收集记录。 Github：WBCollectSwfitThirdLib Swift三方开源库动画 开源库名 简介 推荐指数 NVActivityIndicatorView 精美加载loading动画 ⭐️⭐️⭐️⭐️ lottie-ios An iOS library to natively render After Effects vector animations ⭐️⭐️⭐️⭐️⭐️ 网络请求 开源库名 简介 推荐指数 Alamofire 优雅的网络请求库 ⭐️⭐️⭐️⭐️⭐️ 占位图 开源库名 简介 推荐指数 SkeletonView 数据加载等待占位图 ⭐️⭐️⭐️⭐️ 二维码扫描 开源库名 简介 推荐指数 EFQRCode 二维码扫描 ⭐️⭐️⭐️⭐️ 布局框架 开源库名 简介 推荐指数 SnapKit 苹果原生布局AutoLayout封装，类似Masonry ⭐️⭐️⭐️⭐️⭐️ TangramKit TangramKit的内核是基于对UIView的layoutSubviews方法的重载以及对子视图的bounds和center属性的设置而实现的。 ⭐️⭐️⭐️⭐️ 图表绘制 开源库名 简介 推荐指数 Charts 图标配置 ⭐️⭐️⭐️⭐️⭐️ 截屏 开源库名 简介 推荐指数 SwViewCapture UIView，UIScrollView截屏 ⭐️⭐️⭐️ 提示框架 开源库名 简介 推荐指数 Whisper Whisper is a component that will make the task of display messages and in-app notifications simple ⭐️⭐️⭐️⭐️ 图片加载 开源库名 简介 推荐指数 Kingfisher onevcat大神写的一个图片下载与缓存框架 ⭐️⭐️⭐️⭐️⭐️ BBWebImage 高性能图片加载框架 ⭐️⭐️⭐️⭐️ 转场动画 开源库名 简介 推荐指数 Hero 控制器转场动画 ⭐️⭐️⭐️⭐️⭐️ JSON解析 开源库名 简介 推荐指数 AlamofireObjectMapper JSON转模型 ⭐️⭐️⭐️⭐️ HandyJSON 阿里巴巴开源的一个JSON转模型框架，使用相当简便 ⭐️⭐️⭐️⭐️ ObjectMapper JSON转模型 ⭐️⭐️⭐️⭐️ SwiftyJSON The better way to deal with JSON data in Swift ⭐️⭐️⭐️⭐️⭐️ KakaJSON MJ大神最近开源的一款JSON与model快速转换框架 ⭐️⭐️⭐️⭐️ Log工具 开源库名 简介 推荐指数 CocoaLumberjack 控制台输出log框架 ⭐️⭐️⭐️⭐️⭐️ 分页控件 开源库名 简介 推荐指数 CHIPageControl A set of cool animated page controls written in Swift to replace boring UIPageControl. ⭐️⭐️⭐️ PageControls This is a selection of custom page controls to replace UIPageControl ⭐️⭐️⭐️ TKRubberIndicator A rubber animation pagecontrol ⭐️⭐️⭐️⭐️ FRP框架 开源库名 简介 推荐指数 RxSwift Reactive Programming in Swift ⭐️⭐️⭐️⭐️⭐️ ReactiveCocoa Reactive extensions to Cocoa frameworks, built on top of ReactiveSwift ⭐️⭐️⭐️⭐️⭐️ Socket 开源库名 简介 推荐指数 socket.io-client-swift Websockets in swift for iOS and OSX ⭐️⭐️⭐️⭐️ 分段控件 开源库名 简介 推荐指数 XLPagerTabStrip Android PagerTabStrip for iOS. ⭐️⭐️⭐️⭐️ 异步编程 开源库名 简介 推荐指数 PromiseKit Promises simplify asynchronous programming, freeing you up to focus on the more important things. ⭐️⭐️⭐️⭐️⭐️ 协程编程 开源库名 简介 推荐指数 SwiftCoroutine Swift coroutines for iOS, macOS and Linux. ⭐️⭐️⭐️⭐️ 暗黑适配 开源库名 简介 推荐指数 FluentDarkModeKit ⭐️⭐️⭐️⭐️ 流式布局 开源库名 简介 推荐指数 CollectionViewPagingLayout a simple but highly customizable paging layout for UICollectionView. ⭐️⭐️⭐️⭐️ 三、结语 上面这些三方开源库按照自己的理解分类整理了一遍，这些库也是自己现在所了解到的，当然还有很多优秀的三方库自己也未发现和接触，我以后会不断在这篇博客中更新优秀的三方开源库。]]></content>
      <categories>
        <category>iOS</category>
      </categories>
      <tags>
        <tag>iOS</tag>
        <tag>GitHub</tag>
        <tag>Swift</tag>
        <tag>RxSwift</tag>
        <tag>Alamofire</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[MAC切换host]]></title>
    <url>%2F2019%2F06%2F03%2FMAC%E5%88%87%E6%8D%A2host%2F</url>
    <content type="text"><![CDATA[在日常开发中，有时我们需要切换不同的开发环境测试，切换多个hosts，下面介绍MAC电脑如何切换hosts。 前言在最初接触到iOS开发，切换正式与测试网络环境是通过切换网络地址域名的方式，本地定义一个宏定义实现域名的切换，这种方式确实比较的方便。后来自己又了解了另外一种切换网络环境的方式，就是切换host，在工程代码里面不需要做额外的配置。最开始一直使用同事配置好的环境，但后来发现有时还是不太方便，于是在自己的电脑也倒腾了一下，最后也能成功在真机上切换到正式测试环境，期间也遇到许多坑，下面介绍一下如何配置。 SwitchHosts介绍与安装官方网址GitHub安装 通过终端命令安装 1brew cask install switchhosts 安装成功之后 将需要添加的host粘贴到指定的host名下即可，打开开关即可切换(注意：这里电脑的host是可以切换成功，当你用真机连上电脑共享出的wifi，发现还是没有切换，这时需要用到Dnsmasq工具) Dnsmasq安装与配置 DNSmasq是一个小巧且方便地用于配置DNS和DHCP的工具，适用于小型网络，它提供了DNS功能和可选择的DHCP功能。它服务那些只在本地适用的域名，这些域名是不会在全球的DNS服务器中出现的。DHCP服务器和DNS服务器结合，并且允许DHCP分配的地址能在DNS中正常解析，而这些DHCP分配的地址和相关命令可以配置到每台主机中，也可以配置到一台核心设备中（比如路由器），DNSmasq支持静态和动态两种DHCP配置方式。 ​ —百度百科 安装1brew link dnsmasq 配置文件123456resolv-file=/usr/local/etc/resolv.dnsmasq.confstrict-orderlisten-address=127.0.0.1addn-hosts=/usr/local/etc/dnsmasq.hostsconf-dir=/usr/local/etc/dnsmasq.dcache-size=10000 名词解释： resolv-file 上游DNS服务配置 strict-order 严格按照上述文件中的配置顺序执行 listen-address 监听请求的地址（127.0.0.1：仅本机，0.0.0.0：任何人） addn-hosts 一些你需要的解析结果 conf-dir 其他配置路径 cache-size 缓存大小 使用123456//停止服务sudo brew services stop dnsmasq//重启服务sudo brew services restart dnsmasq//刷新DNS缓存sudo killall -HUP mDNSResponder 注意：点击SwitchHosts切换后，如果发现未切换到想要的环境可按顺序执行以上命令 手机配置删除默认DNS，添加电脑的IP地址，如下图所示： 最后打开手机访问发现已经连上测试环境了，超开心吧O(∩_∩)O~~。]]></content>
      <categories>
        <category>MAC</category>
      </categories>
      <tags>
        <tag>iOS</tag>
        <tag>MAC</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[iOS持续集成与自动打包]]></title>
    <url>%2F2018%2F12%2F23%2FiOS%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90%E4%B8%8E%E8%87%AA%E5%8A%A8%E6%89%93%E5%8C%85%2F</url>
    <content type="text"><![CDATA[前言 从事iOS开发也有一段时间了，实习的时候自己就了解了iOS打包分发的一些方式，自己也写了一篇博客iOS打测试包与分发测试,介绍了如何打测试包以及上传相关的分发平台，也提到了脚本自动打包。现在自己负责几个项目的维护与开发工作，发现打一个包出来到上传到iTunes Connect上实在是太慢了，步骤也多，比较的耗时间，也不够自动化。后面自己了解了Jenkins持续构建工具，和fastlane自动打包工具，能够提高打包效率，下面开始介绍如何使用这些工具吧。 目录 fastlane Jenkins fastlane The easiest way to build and release mobile apps.fastlane* handles tedious tasks so you don’t have to. 一种快捷的方式去构建和发布手机APP，它可以帮我们处理冗长无味的工作。最新公司项目打包频率增加，每次打包上传到三方分发平台或testflight上，都要耽搁好长的时间，我就在想有没有一种好的方式，帮我省去打包繁琐的过程，而是通过脚本自动打包上产到相应的平台，于是我就研究了一下fastlane工具，这篇博客主要是做相关记录，方便自己以后查阅，同时也希望能给需要的朋友一些参考帮助。 相关地址 GitHub地址：fastlane 官方地址：fastlane.tools 文档地址：官方文档 安装fastlane 安装command line tools 1xcode-select --install Install fastlane 1brew cask install fastlane 切换到工程目录，初始化fastlane 123cd [工程目录]fastlane init 初始化完成之后，工程目录大概是这个样子： 配置相关打包脚本自己也是最近才熟悉了解fastlane相关命令的使用，我现在配置了打包到上传App Store和上传到Testflight上的脚本。我们可以通过不同的脚本配置，打出不同环境的ipa包，也可以直接通过fastlane配置上传APP相关信息到iTunes Connect上，比如应用截图，APP提交审核时一些信息等，自己暂时还没配置上传信息这些，下面只介绍我用到的吧。 上传App Store 123456789101112131415161718192021222324252627282930313233343536373839404142default_platform(:ios)platform :ios dodesc "upload appstore lane" lane :release do # add actions here: https://docs.fastlane.tools/actions #pod资源更新 cocoapods #增加build版本号,需要先配置build setting #increment_build_number #自动增加build号 increment_build_number_in_plist #scheme_name scheme_name = "xxxx" #workspace_name workspace_name = "xxxx.xcworkspace" #导出ipa路径 output_directory = "fastlanebuild_ipa" #导出名称 output_name = "#&#123;scheme_name&#125;_#&#123;Time.now.strftime('%Y%m%d%H%M%S')&#125;.ipa" #打包,别名build_app gym( #代码签名方式,"app-store", "ad-hoc", "package", "enterprise", "development", "developer-id"] export_method: "app-store", export_xcargs: "-allowProvisioningUpdates", scheme: scheme_name, workspace: workspace_name, #build之前先clean，减小包体积 clean: true, output_directory: output_directory, output_name: output_name, include_bitcode: false ) #发布到AppStore upload_to_app_store(skip_metadata: true, #忽略上传截图 skip_screenshots: true, force: true) end 上传到App Store主要用到了gym，upload_to_app_store命令（他们都有别名，官方文档有描述），他们的配置参数都可以在fastlane官方文档里查到，通过简单的几行的脚本配置，就能打包上传App Store啦，是不是很方便easy！ 上传Testflight 12345678910111213141516171819202122232425262728293031default_platform(:ios)platform :ios dodesc "upload to testflight lane" lane :beta do #保证推送证书可用 get_push_certificate #pod资源更新 cocoapods #代码签名方式,"app-store", "ad-hoc", "package", "enterprise", "development", "developer-id"] #sync_code_signing(type: "appstore") #自动增加build号 increment_build_number_in_plist #scheme_name scheme_name = "xxxx" #workspace_name workspace_name = "xxx.xcworkspace" #导出ipa路径 output_directory = "fastlanebuild_ipa" #building app build_app(scheme: scheme_name, workspace: workspace_name, include_bitcode: false, clean: true, output_name: "#&#123;scheme_name&#125;_#&#123;Time.now.strftime('%Y%m%d%H%M%S')&#125;.ipa", output_directory: output_directory, export_method: "app-store") #上传到Testflight upload_to_testflight(skip_waiting_for_build_processing: true) #slack(message: "Successfully distributed a new beta build") end 脚本配置和上传App Store差不太多，唯一不同是用到了upload_to_testflight命令。 总结 自己能使用fastlane正常打出ipa包来，倒腾了一两天，网上介绍fastlane使用资料也是一搜一大堆，但大部分介绍都不是很全，最全的资料还是官方文档，这次的折腾也给了我很多启示，要学会看官方文档资料，现在也只用到了fastlane提供的部分功能，遇到的坑不是很多，等以后有更深入的使用，在更新博客与大家分享。 Jenkins Jenkins is a self-contained, open source automation server which can be used to automate all sorts of tasks related to building, testing, and delivering or deploying software. Jenkins can be installed through native system packages, Docker, or even run standalone by any machine with a Java Runtime Environment (JRE) installed. 怎么说呢，我也不太清楚自己是怎么接触到Jenkins持续集成工具的，当我有最初由持续集成概念的时候应该是我学习cocoapods制作私有共有库的时候，有一个GitHub的徽标是表示项目持续集成状态，叫Travis CI，貌似是开源项目免费，私有项目需要收费。自己那时候发布的pod库Travis CI没有通过，自己倒腾好久了才让这个徽标变为绿色。好了，不闲聊了，关于Jenkins介绍，我这里也不做介绍了，网上资料也是一搜一大堆，我只介绍集成和使用关键的几个步骤吧！ 相关地址 GitHub：jenkins 官方网址：https://jenkins.io/ 安装Java环境（MAC） 因为Jenkins是基于Java语言开发的，首先要检查自己的电脑是否安装Java。没有安装会报以下错误 错误已经给出提示了，按照提示安装java8吧： 1brew cask install homebrew/cask-versions/java8 通过命令java -version查看是否安装成功。 安装成功之后配置一下环境变量： 123456789101112131415#查看java home 目录/usr/libexec/java_home输出是/Library/Java/JavaVirtualMachines/jdk1.8.0_192.jdk/Contents/Home#之后编辑bash_profilevi .bash_profile#编辑以下内容export JAVA_HOME=/Library/Java/JavaVirtualMachines/jdk1.8.0_192.jdk/Contents/Homeexport PATH=$JAVA_HOME/bin:$PATH export CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar:wq保存即可 安装Jenkin Jenkins安装方式有很多，可以在官方下载安装包安装，也可以通过brew安装，但我个人更推荐通过brew： 1brew install jenkins 安装成功之后，会默认打开网址http://localhost:8080，如果没有打开我们在终端手动启动Jenkins 1jenkins 第一次登录需要用初始化密码，将初始化密码拷贝进去就可以登录了，之后需要安装一些默认的插件，等待安装完成就可以进入主界面啦。 项目创建 创建项目（Create New Job） 常规设置（general） 丢弃旧的构建 参数化构建过程 如果我们项目用的git托管，这时候可能会有多个分支，在构建的时候我们需要选择一个分支。这功能我们需要装一个插件Git Parameter，然后做以下配置： 源代码管理（Source Code Management） 因为我的项目是用git托管的，这里源代码管理我选的git Build Trigger 这里是指怎么触发构建操作，一搬选择定时构建和轮询构建，看情况而定，这里我暂时都没有勾选，需要注意的是时间书写的格式 12345#每天下午18：00构建一次H 18 * * *#每5分钟构建一次H/5 * * * * 构建环境（Build Environment）暂时没有用到，不做介绍啦。 构建（Build）构建完成之后执行的操作，有如下选项 这里我认为是比较重要的地方啦，build成功之后，这里我们可已选择执行shell打包脚本，根据脚本配置导出ipa包，也可以执行fastlane命令上传App Store，也可以上传蒲公英或fir.im三方分发平台。 shell打包脚本 用苹果提供的原生打包命令编写shell，这里我没有采用这种方式啦，网上也可以搜到相关的脚本，就不做介绍了。 执行fastlane命令上传App Store 1fastlane release release是之前介绍fastlane的时候编写的一个上传App Store的脚本，这里我们也可以上传Testflight。 上传蒲公英或fir.im三方分发平台 这里我做了上传蒲公英平台的操作，蒲公英文档也有介绍相关的命令https://www.pgyer.com/doc/view/jenkins_plugin，我也是通过插件的方式，也可以通过命令。 参数配置，配置好如下两个参数就可以自动帮我们上传到蒲公英平台啦，是不是很方便 Post-build Actions构建完成之后的操作，实用的就是发邮件通知构建结果，暂时不做介绍，有兴趣的朋友可以自行研究。 总结 总算介绍完成了，从零开始倒腾公司的项目，到支持Jenkins持续集成以及后续的操作，中间过程还是经历了很多的坑，但最后的结果还是令自己满意的，自己从中也学到了许多新知识，还是自己太“懒”吧，不然怎么会不折不休倒腾那么久，哈哈。现在打包还是比之前方便了许多，也省去了许多重复乏味的工作。如果文章中有描述不对的地方，还请大家不吝批评指正，自己也是最近才实践自动打包相关的工具，希望能和大家多多学习交流。 问题解决 自己设置账号密码无法登陆 去.jenkins目录下，修改config.xml参数，改为false就好了 1&lt;useSecurity&gt;false&lt;/useSecurity&gt; 参考文章 Max OS上Java环境变量配置 使用 Jenkins 插件上传应用到蒲公英 jenkins构建时支持git选择分支 iOS 持续交付之 Fastlane 手把手教你利用Jenkins持续集成iOS项目]]></content>
      <categories>
        <category>iOS</category>
      </categories>
      <tags>
        <tag>iOS</tag>
        <tag>fastlane</tag>
        <tag>Jenkins</tag>
        <tag>fir.im</tag>
        <tag>蒲公英</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[iOS 文件获取与选择]]></title>
    <url>%2F2018%2F11%2F06%2FiOS-%E6%96%87%E4%BB%B6%E8%8E%B7%E5%8F%96%E4%B8%8E%E9%80%89%E6%8B%A9%2F</url>
    <content type="text"><![CDATA[一、需求分析 最近开发遇到一个需求，就是要从手机客户端通过云信IM发送文件，最开始想到的是通过云信发送文件是没有问题的，但似乎获取从手机获取文件没那么方便，安卓手机是可以轻松去选取系统文件，iOS相对没那么开放，但这也是iOS相比安卓安全的原因之一。除了系统开发的图片文件和视频文件，就不能获取其他格式文件吗？答案是否定的，自己留意了微信，发现有发送文件功能，微信点击发送文件，就会跳转到一个系统提供的文件拾取界面。自己从前也没有接触过，查阅了相关资料，自己也做下记录，下面开始介绍iOS获取文件的几种方式吧！ 二、通过WBUIDocumentPickerController拾取 iOS 新增的文件拾取类，API也比较的简单，通过简单的几句代码就可以实现文件拾取功能 123456UIDocumentPickerViewController *documentPickerViewController = [[UIDocumentPickerViewController alloc]initWithDocumentTypes:self.documentTypes inMode:UIDocumentPickerModeOpen]; documentPickerViewController.delegate = self; [self presentViewController:documentPickerViewController animated:YES completion:nil]; 创建的时候需传入类型，更多UTI类型可到苹果官网查看：https://developer.apple.com/library/archive/documentation/Miscellaneous/Reference/UTIRef/Articles/System-DeclaredUniformTypeIdentifiers.html#//apple_ref/doc/uid/TP40009259-SW1 123456789101112131415161718- (NSArray *)documentTypes &#123; if (!_documentTypes) &#123; _documentTypes = @[@&quot;public.content&quot;, @&quot;public.text&quot;, @&quot;public.source-code&quot;, @&quot;public.image&quot;, @&quot;public.audiovisual-content&quot;, @&quot;com.adobe.pdf&quot;, @&quot;com.apple.keynote.key&quot;, @&quot;com.microsoft.word.doc&quot;, @&quot;com.microsoft.excel.xls&quot;, @&quot;com.microsoft.powerpoint.ppt&quot;, @&quot;public.rtf&quot;, @&quot;public.html&quot;, @&quot;&quot;]; &#125; return _documentTypes;&#125; 代理方法 1234567891011121314151617181920212223242526272829// MARK:UIDocumentPickerDelegate/* &lt; iOS 11 API &gt; */- (void)documentPicker:(UIDocumentPickerViewController *)controller didPickDocumentsAtURLs:(NSArray&lt;NSURL *&gt; *)urls &#123; NSLog(@&quot;%s&quot;,__func__);&#125;/* &lt; iOS 8 API &gt; */- (void)documentPicker:(UIDocumentPickerViewController *)controller didPickDocumentAtURL:(NSURL *)url &#123; NSLog(@&quot;%s&quot;,__func__); NSArray *array = [[url absoluteString] componentsSeparatedByString:@&quot;/&quot;]; NSString *fileName = [array lastObject]; fileName = [fileName stringByRemovingPercentEncoding]; if ([WBiCloudManager iCloudEnable]) &#123; [WBiCloudManager wb_downloadWithDocumentURL:url completedBlock:^(id obj) &#123; NSData *data = obj; NSString *path = [NSHomeDirectory() stringByAppendingString:[NSString stringWithFormat:@&quot;/Documents/%@&quot;,fileName]]; /* &lt; 写入沙盒 &gt; */ [data writeToFile:path atomically:YES]; &#125;]; &#125;&#125;- (void)documentPickerWasCancelled:(UIDocumentPickerViewController *)controller &#123; NSLog(@&quot;%s&quot;,__func__);&#125; 注意：我们从文件拾取器选择了一个文件，有可能这个文件还没有从iCloud同步到本地，这时我们需要子类化一个UIDocument对象，去做文件相关的操作，在使用前还需判断是否开启iCloud服务： 1234567//如果url不为空，说明可以使用iCloud相关功能api+ (NSURL *)iCloudURLForIdentifier:(NSString *)identifier &#123; NSURL *url = nil; NSFileManager *fileManager = [NSFileManager defaultManager]; url = [fileManager URLForUbiquityContainerIdentifier:identifier]; return url;&#125; 关于WBUIDocumentPickerController的使用，我写了一个详细的demo，在文章末尾我也为贴出GitHub地址。 三、UIDocumentBrowserViewController Important Always assign the document browser as your app’s root view controller. Don’t place the document browser in a navigation controller, tab bar, or split view, and don’t present the document browser modally. If you want to present a document browser from another location in your view hierarchy, use a UIDocumentPickerViewController instead. iOS 11新出的API，用来浏览本地系统文件，iCloud文件。一般的项目可能用不到这个类，使用的时候注意遵循官方文档说明，将UIDocumentPickerViewController设置为窗口根控制器。这里也不做过多说明了，自己也写了个小demo，感兴趣的朋友可下载demo查看。 四、通过三方APP拷贝文件到自己的项目通过这种方式获取文件，之前自己已经接触过了，比如像QQ，微信打开一个文件选择用自己的APP打开，自己APP先要在 info.plist中配置支持文件类型，然后就能将文件拷贝到自己的项目，主要用到的方法是AppDelegate中 123456789101112131415- (BOOL)application:(UIApplication *)app openURL:(NSURL *)url options:(NSDictionary&lt;UIApplicationOpenURLOptionsKey,id&gt; *)options &#123; NSLog(@&quot;url %@&quot;,[url absoluteString]); /* &lt; 三方App拷贝到自己App处理 &gt; */ if ([[url absoluteString] containsString:@&quot;file&quot;]) &#123; NSArray *array = [[url absoluteString] componentsSeparatedByString:@&quot;/&quot;]; NSString *fileName = [array lastObject]; fileName = [fileName stringByRemovingPercentEncoding]; NSString *path = [NSHomeDirectory() stringByAppendingString:[NSString stringWithFormat:@&quot;/Documents/Inbox/%@&quot;,fileName]]; NSData *data = [NSData dataWithContentsOfFile:path]; &#125; return YES;&#125; 五、结语 自己暂时了解到的文件获取方式就这些了，以后有新的方式再做补充吧，文章如果有描述不对的地方还请批评指正，如果你有更多更好的方式，欢迎一起交流学习。既然有发送文件，就会有预览文件，接下来我也会写一篇文件预览的文章。好了，最后贴出demo地址吧！ 六、DemoWBDocumentBrowserDemo 参考文章1、https://developer.apple.com/documentation/uikit/view_controllers/adding_a_document_browser_to_your_app?language=objc 2、https://developer.apple.com/documentation/uikit/view_controllers/building_a_document_browser-based_app?language=objc 3、iOS - 从iCloud，QQ，微信获取文件]]></content>
      <categories>
        <category>iOS</category>
      </categories>
      <tags>
        <tag>iOS</tag>
        <tag>GitHub</tag>
        <tag>iCloud</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[iOS APP瘦身实践]]></title>
    <url>%2F2018%2F11%2F04%2FiOS-APP%E7%98%A6%E8%BA%AB%E5%AE%9E%E8%B7%B5%2F</url>
    <content type="text"><![CDATA[一、前言 好久没有更新博客了，自己也一直想写一些性能优化，APP瘦身的文章，现在就做下记录与分享，方便以后查阅。公司这段新需求不算太多，自己就抽时间，对APP安装包大小做了一些优化，优化后的成果还是很明显的，从之前的90M左右缩减到了40几M。网上还是很容易找到相关的文章，下面我总结下可以从哪几方面去做优化工作吧！ 二、图片资源优化 不看不知道，一看吓一跳，项目中的图片资源原来是如此占用大小，动不动一张图片就是好几兆，并且有很多还是没有用到的。找出项目中未用到的图片资源我们可以借助这款软件： LSUnusedResources 借助着款开源软件我们可以找出项目中没有用到的 1[imageset, jpg, png, gif] 当然，搜索出来的结果不一定是百分百准确的，还是要结合实际情况。 除了删除没有用到的图片资源，对于用到的大图片资源，我们还需要对大图进行压缩，压缩的同时还需要保证图片的显示效果，推荐一个非常棒的图片压缩网站吧： tinypng 当然还有其他的压缩工具网站，可以自己去搜索探寻吧。 三、删除项目没有使用到的类 删除项目中未用到的类，就需要看经验了，没有用到的类，一般没有初始化相关的代码alloc init或new，这样就可以删除项目中未使用的类。这个工作最好是定期进行一次吧，如果等到很久来处理，那工作量真的就太大了，如果是需求变更频繁的话，肯定会产生很多未用到的类。所以还是定期做一次排查吧，以免留下沉重的历史包袱。 除了手工排查，还可以借助命令行工具 find命令，之前看到过一篇博客介绍，一时想不起来，等想起来在做补充吧。 四、LinkMap文件分析 关于LinkMap的介绍，网上一搜一大堆，这里就不做详细介绍了，说下怎么配置Xcode获得LinkMap文件和借助工具分析文件大小吧。 XCode -&gt; Project -&gt; Build Settings -&gt; 搜map -&gt; 把Write Link Map File选项设为YES，并指定好linkMap的存储位置 编译后，到编译目录里找到该txt文件，目录如下： 1~/Library/Developer/Xcode/DerivedData/XXX-XXXXXXXXXXXX/Build/Intermediates/XXX.build/Debug-iphoneos/XXX.build/ 之后借助GitHub上LinkMap工具或linkmap.js，分析工程可执行文件大小。 五、移除模拟器支持文件 我们在集成一些三方库的时候，这些三方库可能包含模拟器指令集。比如说环信IMSDK，打包上传App Store需移除模拟器支持指令集。 查看静态库支持的指令集 1lipo -info libname.a(或者libname.framework/libname) 合并静态库 12lipo -create 静态库存放路径1 静态库存放路径2 ... -output 整合后存放的路径lipo -create libname-armv7.a libname-armv7s.a libname-i386.a -output libname.a 静态库拆分 1lipo 静态库源文件路径 -thin CPU架构名称 -output 拆分后文件存放路径 参考文章 iOS APP安装包瘦身实践 LinkMap文件分析 APP瘦身 - 之framework]]></content>
      <categories>
        <category>iOS</category>
      </categories>
      <tags>
        <tag>iOS</tag>
        <tag>性能优化</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[iOS UI设计规范]]></title>
    <url>%2F2018%2F09%2F14%2FiOS-UI%E8%AE%BE%E8%AE%A1%E8%A7%84%E8%8C%83%2F</url>
    <content type="text"><![CDATA[这篇文章收录了最新iPhone设备尺寸，主要是为了自己方便自己查阅苹果设备尺寸，图标尺寸等，苹果官方有Human Interface Guidelines文档，感兴趣的朋友可以自行查阅。 官方文档地址Human Interface Guidelines 设备尺寸 Device Portrait dimensions Landscape dimensions 12.9” iPad Pro 2048px × 2732px 2732px × 2048px 10.5” iPad Pro 1668px × 2224px 2224px × 1668px 9.7” iPad 1536px × 2048px 2048px × 1536px 7.9” iPad mini 4 1536px × 2048px 2048px × 1536px iPhone XS Max 1242px × 2688px 2688px × 1242px iPhone XS 1125px × 2436px 2436px × 1125px iPhone XR 828px × 1792px 1792px × 828px iPhone X 1125px × 2436px 2436px × 1125px iPhone 8 Plus 1242px × 2208px 2208px × 1242px iPhone 8 750px × 1334px 1334px × 750px iPhone 7 Plus 1242px × 2208px 2208px × 1242px iPhone 7 750px × 1334px 1334px × 750px iPhone 6s Plus 1242px × 2208px 2208px × 1242px iPhone 6s 750px × 1334px 1334px × 750px iPhone SE 640px × 1136px 1136px × 640px 图像大小与分辨率 Device Scale Factor 12.9” iPad Pro @2x 10.5” iPad Pro @2x 9.7” iPad @2x 7.9” iPad mini 4 @2x iPhone XS Max @3x iPhone XS @3x iPhone XR @2x iPhone X @3x iPhone 8 Plus @3x iPhone 8 @2x iPhone 7s Plus @3x iPhone 7s @2x iPhone 7 @2x iPhone 6s Plus @3x iPhone 6s @2x iPhone SE @2x App Icon Sizes Device or context Icon size iPhone 180px × 180px (60pt × 60pt @3x) 120px × 120px (60pt × 60pt @2x) iPad Pro 167px × 167px (83.5pt × 83.5pt @2x) iPad, iPad mini 152px × 152px (76pt × 76pt @2x) App Store 1024px × 1024px (1024pt × 1024pt @1x) Spotlight|Device|Spotlight icon size||:—|:—||iPhone|120px × 120px (40pt × 40pt @3x)|||80px × 80px (40pt × 40pt @2x)||iPad Pro, iPad, iPad mini| 80px × 80px (40pt × 40pt @2x)| Settings|Device|Settings icon size||:—|:—||iPhone| 87px × 87px (29pt × 29pt @3x)|||58px × 58px (29pt × 29pt @2x)||iPad Pro, iPad, iPad mini| 58px × 58px (29pt × 29pt @2x)| Notification|Device|Notification icon size||:—|:—||iPhone| 60px × 60px (20pt × 20pt @3x)|||40px × 40px (20pt × 20pt @2x)||iPad Pro, iPad, iPad mini|40px × 40px (20pt × 20pt @2x)| Launch Screen Device Portrait size Landscape size 12.9” iPad Pro 2048px × 2732px 2732px × 2048px 10.5” iPad Pro 1668px × 2224px 2224px × 1668px 9.7” iPad 1536px × 2048px 2048px × 1536px 7.9” iPad mini 4 1536px × 2048px 2048px × 1536px iPhone XS Max 1242px × 2688px 2688px × 1242px iPhone XS 1125px × 2436px 2436px × 1125px iPhone XR 828px × 1792px 1792px × 828px iPhone X 1125px × 2436px 2436px × 1125px iPhone 8 Plus 1242px × 2208px 2208px × 1242px iPhone 8 750px × 1334px 1334px × 750px iPhone 7 Plus 1242px × 2208px 2208px × 1242px iPhone 7 750px × 1334px 1334px × 750px iPhone 6s Plus 1242px × 2208px 2208px × 1242px iPhone 6s 750px × 1334px 1334px × 750px iPhone SE 640px × 1136px 1136px × 640px Navigation Bar and Toolbar Icon Size（导航栏与工具条） Target sizes（标准大小） Maximum sizes（最大尺寸） 72px × 72px (24pt × 24pt @3x) 84px × 84px (28pt × 28pt @3x) 48px × 48px (24pt × 24pt @2x) 56px × 56px (28pt × 28pt @2x) Tab Bar Icon Size（标签栏图标大小）|Attribute（属性）|Regular tab bars（常规标签栏）|Compact tab bars（紧凑标签栏）||:—|:—|:—||Target width and height (circular glyphs)|75px × 75px (25pt × 25pt @3x)| 54px × 54px (18pt × 18pt @3x)||| 50px × 50px (25pt × 25pt @2x)|36px × 36px (18pt × 18pt @2x)||Target width and height (square glyphs)|69px × 69px (23pt × 23pt @3x)| 51px × 51px (17pt × 17pt @3x)|||46px × 46px (23pt × 23pt @2x)|34px × 34px (17pt × 17pt @2x)||Target width (wide glyphs)|93px (31pt @3x)|69px (23pt @3x)|||62px (31pt @2x)| 46px (23pt @2x)||Target height (tall glyphs)| 84px (28pt @3x)|60px (20pt @3x)|||56px (28pt @2x)|40px (20pt @2x)| 工具推荐这篇文章主要记录了自己平时用的比较多的一些设计尺寸参考，设计细节上的东西还是要去查看官方文档，最后也为推荐一款App Icon自动生成工具吧，只需要一张1024*1024的原图，就可以生成不同设备及尺寸的图标，同时也完全符合苹果设计规范（超👍哦），下面贴出网站地址：图标工厂]]></content>
      <categories>
        <category>UI设计</category>
      </categories>
      <tags>
        <tag>iOS</tag>
        <tag>UI设计</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[WBLoadingIndicatorView（加载等待动画）]]></title>
    <url>%2F2018%2F09%2F11%2FWBLoadingIndicatorView%EF%BC%88%E5%8A%A0%E8%BD%BD%E7%AD%89%E5%BE%85%E5%8A%A8%E7%94%BB%EF%BC%89%2F</url>
    <content type="text"><![CDATA[一、前言 关于加载提示框架，比较成熟的有MBProgressHUD，SVProgressHUD等著名框架，如果没有太多的自定义要求，这些框架提供的API其实已经够用了，基于提供的API，我们也可以自定义一些UI效果。最近项目也不是很忙，于是自己就尝试封装一个加载等待动画组件，封装思想主要参考了MBProgressHUD，在实现过程中，布局采用的是苹果原生Autolayout，没有用Masonry，所以写起来比较的恶心，约束写的老长老长了。其实封装的这个组件功能也不算太多，现在主要实现了五六个加载动画效果，也提供了一些属性设置自定义效果，如果有时间我会优化添加更多动画效果。 二、介绍与使用 一些属性API。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657// MARK:Property/* &lt; 动画容器视图 &gt; */@property (nonatomic, strong) WBLoadingBackgroundView *bezelView;/* &lt; 背景视图 &gt; */@property (nonatomic, strong) WBLoadingBackgroundView *backgroundView;/** &lt; Loading text. &gt; */@property (nonatomic, strong) UILabel *label;@property (nonatomic, strong) UIColor *contentColor UI_APPEARANCE_SELECTOR;/* &lt; 加载动画颜色 &gt; */@property (nonatomic, strong) UIColor *indicatorColor UI_APPEARANCE_SELECTOR;/* &lt; bezelView中心点偏移 &gt; */@property (nonatomic, assign) CGPoint offset UI_APPEARANCE_SELECTOR;/* &lt; 边距 默认：20 &gt; */@property (nonatomic, assign) CGFloat margin UI_APPEARANCE_SELECTOR;/* &lt; bezelView最小size &gt; */@property (nonatomic, assign) CGSize minSize UI_APPEARANCE_SELECTOR;/** &lt; 加载动画size 默认：35 &gt; */@property (nonatomic, assign) CGSize indicatorSize UI_APPEARANCE_SELECTOR;/** &lt; 是否方形 &gt; */@property (nonatomic, assign) BOOL square UI_APPEARANCE_SELECTOR;/** &lt; 隐藏时从父视图移除 默认：YES &gt; */@property (nonatomic, assign) BOOL removeFromSuperViewOnHide;/* &lt; 动画类型 &gt; */@property (nonatomic, assign) WBLoadingAnimationType type;// MARK:Class Methods/** 获取视图中的WBLoadingIndicatorView @param view 遍历的父视图 @return WBLoadingIndicatorView */+ (nullable WBLoadingIndicatorView *)wb_indicatorForView:(UIView *)view;/** 创建并显示加载视图 @param view 要显示的view @return MBProgressHUD */+ (instancetype)wb_showIndicatorAddTo:(UIView *)view;// MARK:Instance Class Method- (instancetype)initWithView:(UIView *)view;/** 显示加载视图 */- (void)wb_showLoadingView:(BOOL)animated;/** 隐藏加载视图 @param animated 是否动画 */- (void)wb_hideLoadingView:(BOOL)animated; 部分效果 使用示例1234567WBLoadingIndicatorView *indicatorView = [self createIndicatorViewWithType:WBWBLoadingAnimationBallTrianglePathType indicatorSize:CGSizeMake(50, 50) toView:self.view]; indicatorView.type = WBLoadingAnimationcircleStrokeSpinType; indicatorView.backgroundView.backgroundColor = [UIColor colorWithWhite:0.f alpha:0.3]; indicatorView.contentColor = [UIColor whiteColor]; indicatorView.bezelView.backgroundColor = [UIColor colorWithWhite:0.f alpha:0.7f]; 关于使用，建议还是二次封装吧，每次调用都写这么多代码，还是有点长。关于更多还是查看我的GitHub，下面也贴出GitHub地址。 三、GitHub地址如果觉得可以，请star鼓励一下哦，如果有任何建议或问题，欢迎指出，我也会第一时间修改。WBLoadingIndicatorView]]></content>
      <categories>
        <category>iOS</category>
      </categories>
      <tags>
        <tag>iOS</tag>
        <tag>CocoaPods</tag>
        <tag>GitHub</tag>
        <tag>Animation</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CocoaPods进阶：制作公有库]]></title>
    <url>%2F2018%2F09%2F03%2FCocoaPods%E8%BF%9B%E9%98%B6%EF%BC%9A%E5%88%B6%E4%BD%9C%E5%85%AC%E6%9C%89%E5%BA%93%2F</url>
    <content type="text"><![CDATA[一、 前言在CocoaPods进阶：详解私有库制作这篇博客中，讲解记录了cocoapods使用pod lib create [projectname]命令模板化创建pod私有库，这篇博客主要讲解cocoapods制作共有库的过程。这里，我不在使用模板化方式创建，而是用原来在GitHub上已经提交过的项目（如果你舍不得获得的star，最好采用这种方式啦，😆）。自己也是参照博客资料，本来以为自己有了制作私有库的基础，制作共有库会没那么多的坑，但自己还是折腾了一晚上，好了，不多说了，开始讲解共有库的制作吧！ 二、目录 1、创建spec文件 2、编辑podspec文件 3、本地库验证 4、推送打标签 5、验证podspec文件 6、注册，推送podspec到cocoapods，搜索验证 三、具体步骤1、创建spec文件在xxxx.xcodeproj同级目录下，创建podspec文件 1pod spec create WBHUDManager 创建成功之后如下： 注意： 这里新创建的podspec最好要和LICENSE、README.md在同级目录，自己在这里也折腾了许久，头一次用非模板方式，也踩了不少的坑。这里一定要注意哦。 2、编辑podspec文件** 用终端或者记事本编辑podspec文件，下面是我配置WBHUDManager.podspec，这里我也不做详细的介绍了，在我讲解的私有库制作博客，有对每个属性的详细描述，在网上也能轻易的查阅到相关的资料。 12345678910111213141516171819202122232425Pod::Spec.new do |s| s.name = 'WBHUDManager' s.version = '1.0.0' s.summary = 'iOS 基于SVProgressHUD、MBProgressHUD提示框封装' s.homepage = 'https://github.com/wenmobo/WBHUDManager' s.license = &#123; :type =&gt; 'MIT', :file =&gt; 'LICENSE' &#125; s.author = &#123; 'wenmobo' =&gt; 'wenmobo2018@gmail.com' &#125; s.source = &#123; :git =&gt; 'https://github.com/wenmobo/WBHUDManager.git', :tag =&gt; s.version.to_s &#125; s.ios.deployment_target = '8.0' s.requires_arc = true s.source_files = 'WBHUDManager/WBHUDManager.h' s.frameworks = 'UIKit' s.subspec 'SVProgressHUDWBAddtional' do |ss| ss.source_files = 'WBHUDManager/SVProgressHUDWBAddtional/*.&#123;h,m&#125;' ss.dependency 'SVProgressHUD' end s.subspec 'MBProgressHUDWBAddtional' do |ss| ss.source_files = 'WBHUDManager/MBProgressHUDWBAddtional/*.&#123;h,m&#125;' ss.resource = 'WBHUDManager/MBProgressHUDWBAddtional/MBProgressHUD.bundle' ss.dependency 'MBProgressHUD' endend 3、本地库验证 1pod lib lint WBHUDManager.podspec 如果有警告，需要根据提示内容解决警告，忽略警告 1pod lib lint WBHUDManager.podspec --allow-warnings 4、推送打标签 由于这里我之前已经推送到远程了，所以只需要打标签就可了，注意要和WBHUDManager.podspec中version保持一致： 12345git tag -m &apos;release version 1.0.0&apos; 1.0.0git push origin 1.0.0 或者git push --tags 5、验证podspec文件 推送标签之后，需对WBHUDManager.podspec进行验证 1pod spec lint WBHUDManager.podspec 6、注册，推送podspec到cocoapods，验证 验证通过之后，需要使用邮箱注册cocoapods，终端输入： 1234pod trunk register [email] ‘用户名’ --description=&apos;MacBook Pro&apos;examplepod trunk register 123@qq.com &apos;wenbo&apos; --description=&apos;MacBook Pro&apos; 之后会给你发送一条邮箱，进行确认，这里的--description=’MacBook Pro’可以省略 查看个人信息 1pod trunk me 推送podspec到cocoapods 1pod trunk push WBHUDManager.podspec 推送成功之后，终端输出如下 之后我们可以搜索验证 1pod search WBHUDManager 哈哈，已经发布成功啦，是不是很开心啦☺️。 四、问题解决 发布成功之后搜索不到 12345678//删除本地索引rm ~/Library/Caches/CocoaPods/search_index.json//搜索pod search [库名]//更新索引pod repo update 五、打广告 哈哈，最后也为自己打波广告吧，这篇博客使用的例子是自己基于MBProgressHUD、SVProgressHUD封装的一个提示框架，支持超多自定义属性设置，HUD的状态切换，显示完成回调，这也是我发布的第一个公有库，如果有写的不好的地方，请多多包涵。喜欢的朋友记得star鼓励下哟，最后贴出GitHub地址吧： WBHUDManager]]></content>
      <categories>
        <category>iOS</category>
      </categories>
      <tags>
        <tag>iOS</tag>
        <tag>CocoaPods</tag>
        <tag>GitHub</tag>
        <tag>MBProgressHUD</tag>
        <tag>SVProgressHUD</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[WKWebView高度自适应三种方式]]></title>
    <url>%2F2018%2F08%2F27%2FWKWebView%E9%AB%98%E5%BA%A6%E8%87%AA%E9%80%82%E5%BA%94%E4%B8%89%E7%A7%8D%E6%96%B9%E5%BC%8F%2F</url>
    <content type="text"><![CDATA[一、前言 ImportantStarting in iOS 8.0 and OS X 10.10, use WKWebView to add web content to your app. Do not use UIWebView or WebView. WKWebVIew是iOS8新出的API，旨在替代原有的UIWebView，相对于UIWebView，WKWebView有着更为强大性能和丰富的API。在项目开发过程中，我也更倾向于用WKWebView,但在使用过程中也遇到许多的问题。 最近接触使用网页视图比较多，自己在tableView和scrollView中嵌套网页视图，在获取网页视图高度遇到过不少的坑，例如高度不准确、底部留白断层，滚动一直获取高度问题。现在项目中使用的网页视图基本都替换成了WKWebView，关于WKWebView使用的一些坑，我强烈推荐一篇博客WKWebView 那些坑，希望使用WKWebView能少走一些弯路，少踩一些坑。好了，话不多说了，我将项目中获取网页视图高度实际经验分享给大家，希望对你有所帮助，下面开始介绍吧！ 二、目录 通过KVO的方式 通过代理的方式 通过注入JS的方式，添加网页加载完成回调获取 通过KVO的方式这种方式获取的高度较为准确，但要注意表格中多次回调高度的问题。 添加监听者 12345#pragma mark ------ &lt; Private Method &gt; ------#pragma mark- (void)addWebViewObserver &#123; [self.wkWebView.scrollView addObserver:self forKeyPath:@&quot;contentSize&quot; options:NSKeyValueObservingOptionNew context:nil];&#125; 监听高度变化 1234567891011#pragma mark ------ &lt; KVO &gt; ------- (void)observeValueForKeyPath:(NSString *)keyPath ofObject:(id)object change:(NSDictionary&lt;NSKeyValueChangeKey,id&gt; *)change context:(void *)context &#123; /** &lt; 法2 &gt; */ /** &lt; loading：防止滚动一直刷新，出现闪屏 &gt; */ if ([keyPath isEqualToString:@&quot;contentSize&quot;]) &#123; CGRect webFrame = self.wkWebView.frame; webFrame.size.height = self.wkWebView.scrollView.contentSize.height; self.wkWebView.frame = webFrame; [self.tableView reloadRowsAtIndexPaths:[NSArray arrayWithObjects:[NSIndexPath indexPathForRow:3 inSection:0], nil] withRowAnimation:UITableViewRowAnimationNone]; &#125;&#125; 移除观察者 123- (void)removeWebViewObserver &#123; [self.wkWebView.scrollView removeObserver:self forKeyPath:@&quot;contentSize&quot;];&#125; 通过代理的方式这种方法通过WKNavigationDelegate代理方法- (void)webView:(WKWebView *)webView didFinishNavigation:(WKNavigation *)navigation，网页加载完成通过JS获取网页内容高度，但这种方式不一定就是最真实的高度，这时候可能网页内容还未加载完成，但以实际情况为准。 1234567891011121314151617181920/** &lt; 法2 &gt; */- (void)webView:(WKWebView *)webView didFinishNavigation:(WKNavigation *)navigation &#123; //document.body.offsetHeight //document.body.scrollHeight //document.body.clientHeight [webView evaluateJavaScript:@&quot;document.body.offsetHeight&quot; completionHandler:^(id _Nullable result, NSError * _Nullable error) &#123; CGFloat documentHeight = [result doubleValue]; CGRect webFrame = webView.frame; webFrame.size.height = documentHeight; webView.frame = webFrame; [self.tableView reloadRowsAtIndexPaths:[NSArray arrayWithObjects:[NSIndexPath indexPathForRow:3 inSection:0], nil] withRowAnimation:UITableViewRowAnimationNone]; &#125;]; // CGRect webFrame = self.wkWebView.frame;// CGFloat contentHeight = webView.scrollView.contentSize.height;// webFrame.size.height = contentHeight;// webView.frame = webFrame;// [self.tableView reloadRowsAtIndexPaths:[NSArray arrayWithObjects:[NSIndexPath indexPathForRow:3 inSection:0], nil] withRowAnimation:UITableViewRowAnimationNone];&#125; 通过注入JS的方式，添加网页加载完成回调获取第三种通常是接口返回HTMLString，然后自己在APP客户端成网页html、head、body这些标签，在合适的位置加入以下js代码： 12345&lt;script type=\"text/javascript\"&gt;\ window.onload = function() &#123;\ window.location.href = \"ready://\" + document.body.scrollHeight;\ &#125;\ &lt;/script&gt; 然后借助WKWebView代理方法，就能准确获得网页高度： 123456789101112131415161718- (void)webView:(WKWebView *)webView decidePolicyForNavigationAction:(WKNavigationAction *)navigationAction decisionHandler:(void (^)(WKNavigationActionPolicy))decisionHandler &#123; if (navigationAction.navigationType == WKNavigationTypeOther) &#123; if ([[[navigationAction.request URL] scheme] isEqualToString:@&quot;ready&quot;]) &#123; float contentHeight = [[[navigationAction.request URL] host] floatValue]; CGRect webFrame = self.wkWebView.frame; webFrame.size.height = contentHeight; webView.frame = webFrame; NSLog(@&quot;onload = %f&quot;,contentHeight); [self.tableView reloadRowsAtIndexPaths:[NSArray arrayWithObjects:[NSIndexPath indexPathForRow:3 inSection:0], nil] withRowAnimation:UITableViewRowAnimationNone]; decisionHandler(WKNavigationActionPolicyCancel); return; &#125; &#125; decisionHandler(WKNavigationActionPolicyAllow);&#125; 第三种方法在我写的demo中是看不到效果的，有兴趣的朋友可以自己拼接网页HTMLString测试效果。我也贴一个我在项目中添加以上代码片段的位置吧： 12345678910111213141516171819202122232425&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;meta charset=\"utf-8\"&gt;&lt;meta name=\"viewport\"content=\"width=device-width, initial-scale=1.0, minimum-scale=1.0, maximum-scale=1.0, user-scalable=no\"&gt;\ &lt;title&gt;&lt;/title&gt; &lt;head&gt;&lt;script type=\"text/javascript\"&gt;\ window.onload = function() &#123;\ window.location.href = \"ready://\" + document.body.scrollHeight;\ &#125;\ &lt;/script&gt;&lt;/head&gt;&lt;body&gt; //接口返回网页内容，拼接在这里 &lt;/body&gt;&lt;/html&gt; 三、问题解决 解决web断层问题：WKWebView刷新机制小探 123456#pragma mark ------ &lt; UIScrollViewDeltegate &gt; ------- (void)scrollViewDidScroll:(UIScrollView *)scrollView &#123; /** &lt; 解决web白屏问题 &gt; */ /** &lt; 需要调用私有API：_updateVisibleContentRects &gt; */ [self.wkWebView setNeedsLayout];&#125; 四、demo最新demo请戳：WKWebViewAutoHeight 五、参考资料 ios webview自适应实际内容高度5种方法 iOS中webView嵌套tableView中动态高度问题 WKWebView刷新机制小探]]></content>
      <categories>
        <category>iOS</category>
      </categories>
      <tags>
        <tag>iOS</tag>
        <tag>HTML</tag>
        <tag>JavaScript</tag>
        <tag>WKWebView</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CocoaPods进阶：详解私有库制作]]></title>
    <url>%2F2018%2F08%2F13%2FCocoaPods%E8%BF%9B%E9%98%B6%EF%BC%9A%E8%AF%A6%E8%A7%A3%E7%A7%81%E6%9C%89%E5%BA%93%E5%88%B6%E4%BD%9C%2F</url>
    <content type="text"><![CDATA[一、前言 自己一直想用CocoaPods制作pod库，在自己面试过程中也被面试官问到过组件化开发的概念，然尔自己那时也不是很了解，CocoaPods与组件化也息息相关，利用CocoaPods也便于维护pod组件，于是自己就决定学习用CocoaPods制作pod库，下面就开始讲解私有库的制作过程吧。 二、目录 安装CocoaPods 创建远程内部私有Spec Repo仓库 模板创建pod库 编辑***.podspec文件 验证本地是否通过 关联本地仓库，并推送到远程仓库，打标签 推送***.podspec到远程spec仓库 验证远程是否通过 验证私有仓库是否可用，pod集成私有库 安装CocoaPods首先要安装CocoaPods，没有安装可以参考我的博客CocoaPods安装与使用。 创建远程内部私有Spec Repo仓库这步自己采坑不少，一开始自己并不理解，不知到代码仓库和Spec Repo是需要分开存储的。好了，不说自己经历的曲折了，如果你还没有创建远程内部私有Spec Repo仓库, 需要到Github,码云或其他代码托管平台创建远程仓库, 之后将远程仓库克隆到本地，终端执行如下命令： 12//这里可以用https或ssh地址方式克隆pod repo add WBSpecs git@github.com:wenmobo/WBSpecs.git 克隆之后，本地cocoapods目录如下： 模板创建pod库 第二步：在本地任意一个文件夹下创建pod库： 1pod lib create WBAvoidCrash 之后控制台输出 接着会需要回答一些问题： 123456789101112131415# 你想使用哪个平台？1、What platform do you want to use?? [ iOS / macOS ]iOS# 库语言选择？2、What language do you want to use?? [ Swift / ObjC ]ObjC# 你要使用哪个测试框架？3、Which testing frameworks will you use? [ Specta / Kiwi / None ]None# 是否要UI测试？4、Would you like to do view based testing? [ Yes / No ]NO# 类名前缀？5、What is your class prefix?WB 成功之后，目录如下： 工程目录如下： 在工程WBAvoidCrash目录添加我们的代码文件： 添加完成之后如下： 注意：代码文件需要添加到WBAvoidCrash/Classes目录下。 编辑***.podspec文件1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586Pod::Spec.new do |s| #库名称 s.name = 'WBAvoidCrash' #指定支持的平台和版本，不写则默认支持所有的平台，如果支持多个平台，则使用下面的deployment_target定义 spec.platform = :ios #版本号 s.version = '1.0.0' #库简短介绍 s.summary = 'iOS 防Crash库' #开源库描述 s.description = "" # 开源库地址，或者是博客、社交地址等 s.homepage = 'https://github.com/wenmobo/WBAvoidCrash' # 开源协议 s.license = &#123; :type =&gt; 'MIT', :file =&gt; 'LICENSE' &#125; # 开源库作者 s.author = &#123; 'wenmobo' =&gt; 'wenmobo2018@gmail.com' &#125; # 开源库GitHub的路径与tag值，GitHub路径后必须有.git,tag实际就是上面的版本 s.source = &#123; :git =&gt; 'https://github.com/wenmobo/WBAvoidCrash.git', :tag =&gt; s.version &#125; # 社交网址 s.social_media_url = 'http://blogwenbo.com/' # 开源库最低支持 s.ios.deployment_target = '8.0' # 源库资源文件 s.source_files = 'WBAvoidCrash/Classes/**/*' # 是否支持arc s.requires_arc = true # ---------------- Dependency -------------- #开源库依赖库 s.dependency "Masonry" # 指定版本 s.dependency "Masonry", "~&gt; 1.0" # ---------------- Project Linking ---------------- # 添加系统依赖静态库 s.library = 'sqlite3', 'xml2' #依赖系统库 s.frameworks = 'Foundation' #添加依赖第三方的framework s.vendored_frameworks = 'XXXX/XXXX/**/*.framework' #静态库.a s.vendored_library = 'XXXX/XXX/XXX.a', 'YYY/YYY/Y.a' # ---------------- Resource ------------------ s.resource = "icon.png" s.resources = "Resources/*.png" s.resource_bundles = &#123; 'ATCategory' =&gt; ['ATCategory/Images/*.png'] &#125; #添加资源文件 s.resource = 'XXX/XXXX/**/*.bundle' # ---------------- Project Setting ---------------- s.xcconfig = &#123; "HEADER_SEARCH_PATHS" =&gt; "$(SDKROOT)/usr/include/libxml2" &#125; # pod工程配置，指模拟器指令集配置 ss.pod_target_xcconfig = &#123; 'ARCHS[sdk=iphonesimulator*]' =&gt; '$(ARCHS_STANDARD_64_BIT)' &#125; # 在 podspec 文件中添加 s.static_framework = true，CocoaPods 就会把这个库配置成static framework。同时支持 Swift 和 Objective-C s.static_framework = true # ---------------- Subspec ---------------- s.subspec 'sub' do |ss| ss.source_files = 'WBAvoidCrash/Classes/**/*' end end 关于s.source_files写法 123456//表示匹配WBAvoidCrash/Classes下所有文件(主目录和子目录，其中**相当于省略中间层级)&apos;WBAvoidCrash/Classes/**/*&apos;//表示匹配Classes所有以.h和.m结尾的文件&apos;WBAvoidCrash/Classes/*.&#123;h,m&#125;&apos;//表示匹配所有WBAvoidCrash目录下文件，不包含子目录&apos;WBAvoidCrash/*&apos; 更多关于资源目录层级写法可以参考GitHub一些著名框架，AFNetworking.podspec、ZFPlayer.podspec等。 s.dependency关于依赖三库，依赖多个三方库如下： 123s.dependency &apos;Masonry&apos;s.dependency &apos;MJRefresh&apos;s.dependency &apos;Masonry&apos; &apos;YYModel&apos; 验证本地是否通过 配置好podspec之后，验证本地库是否通过验证，终端输入如下命令： 1pod lib lint 通过验证，终端输出如下： 报如下错误 需在Xcode中配置： 如果pod库存在警告是不能通过验证的，如果要暂时忽略警告通过验证（如码云创建的私有库s.homepage地址不可达警告），可使用如下命令： 1pod lib lint --allow-warnings 你制作的pod库依赖三方库，而三方库包含静态库（如：xxxx.a），在验证的时候，不能验证通过，可使用如下命令： 1234pod lib lint --use-libraries//同时忽略警告pod lib lint --use-libraries --allow-warnings 不管怎样都要解决pod库存在的警告，并通过验证。 关联本地仓库，并推送到远程仓库，打标签 如果你还未创建远程仓库，你需要创建与之对应的远程仓库，我是在GitHub创建的仓库，这里也不再赘述创建方法。创建之后须与本地仓库关联，在终端执行如下命令： 12345678#提交代码到暂存区git add .#提交到本地仓库git commit -m &quot;create WBAvoidCrash Library&quot;#添加到远程仓库git remote add origin git@github.com:wenmobo/WBAvoidCrash.git#推送到远程仓库git push origin master 最近在用码云制作私有库的时候按照上面git命令，在执行git push origin master会报错，需要执行以下命令或者按终端提示的信息操作，第一次才能成功推送到远程仓库： 1git pull --rebase origin master 提交完成之后进行打标签操作： 1234#打标签git tag -a 1.0.0 -m &apos;release version 1.0.0&apos;#推送标签到远程git push origin 1.0.0 友情提示 关于git打标签操作，你可以借助Sourcetree或者终端命令，可以查看我的博客MAC上Git打标签。 推送***.podspec到远程首先将本地WBAvoidCrash.podspec推送到远程私有repo spec仓库和本地repo spec仓库，终端执行如下命令： 12cd [WBAvoidCrash库路径]pod repo push WBSpecs WBAvoidCrash.podspec 验证远程是否通过推送成功之后，终端输入如下命令进行验证： 1pod spec lint WBAvoidCrash.podspec 验证通过终端输出如下： 同样这里如果还存在着警告或者错误，同样不能验证通过，同样可以用以下命令忽略警告通过验证： 123pod spec lint WBAvoidCrash.podspec --allow-warningspod spec lint WBAvoidCrash.podspec --use-librariespod spec lint WBAvoidCrash.podspec --allow-warnings --use-libraries 验证私有仓库是否可用，pod集成私有库验证通过之后，下面进行测试，看是否能通过cocoapods集成到我们的项目，首先用pod命令进行搜索，看能否搜索到： 1pod search WBAvoidCrash 这时可能会报如下错误 不要慌，在终端执行如下命令，然后重新search： 1rm ~/Library/Caches/CocoaPods/search_index.json 耐心等待之后，发现能搜到自己创建的私有库了： 新建一个测试工程测试，用CocoaPods初始化项目，编辑podfile文件： 123456789101112131415161718192021222324#CocoaPods官方spec仓库source 'https://github.com/CocoaPods/Specs.git'#自己私有spec仓库source 'https://github.com/wenmobo/WBSpecs.git'platform :ios, '8.0'target 'Test' do #防Crash库 pod 'WBAvoidCrash' # Pods for Test target 'TestTests' do inherit! :search_paths # Pods for testing end target 'TestUITests' do inherit! :search_paths # Pods for testing endend 编辑好podfile文件之后，终端执行： 123pod install或pod install --no-repo-update 耐心等待一会儿，你会发现私有库已经集成到测试项目中了： 到这里，cocoapods私有库制作已讲解完成。也为自己制作的第一个私有库打波广告吧☺️☺️，WBAvoidCrash一个防Crash库，现在支持9种防崩溃类型，集成方便，使用无需导入相关的头文件，这个库之前没这么完善，后来参考借鉴了一些大神开源的库。下面👇贴出私有库地址吧： WBAvoidCrash 三、相关命令cocoapods 查看所有repo 1pod repo list 移除某个repo 1pod repo remove [spec] 更新repo 1234# 更新所有repopod repo update# 更新指定pod repo update [spec库名] 验证可选参数 123456789101112131415161718192021222324252627282930313233343536373839404142434445--quick Lint skips checks that would require to download and build the spec--allow-warnings Lint validates even if warnings are present--subspec=NAME Lint validates only the given subspec--no-subspecs Lint skips validation of subspecs--no-clean Lint leaves the build directory intact for inspection--fail-fast Lint stops on the first failing platform or subspec--use-libraries Lint uses static libraries to install the spec--use-modular-headers Lint uses modular headers during installation--sources=https://cdn.cocoapods.org/ The sources from which to pull dependent pods (defaults to https://cdn.cocoapods.org/). Multiple sources must be comma-delimited--platforms=ios,macos Lint against specific platforms (defaults to all platforms supported by the podspec). Multiple platforms must be comma-delimited--private Lint skips checks that apply only to public specs--swift-version=VERSION The `SWIFT_VERSION` that should be used to lint the spec. This takes precedence over the Swift versions specified by the spec or a `.swift-version` file--include-podspecs=**/*.podspec Additional ancillary podspecs which are used for linting via :path--external-podspecs=**/*.podspec Additional ancillary podspecs which are used for linting via :podspec. If there are --include-podspecs, then these are removed from them--skip-import-validation Lint skips validating that the pod can be imported--skip-tests Lint skips building and running tests during validation--analyze Validate with the Xcode Static Analysis tool--silent Show nothing--verbose Show more debugging information--no-ansi Show output without ANSI codes--help Show help banner of specified command 可通过如下命令查看可选参数 1pod lib lint --help 验证本地pod库 1234# 验证本地pod库pod lib lint# 本地验证忽略警告pod lib lint --allow-warnings 验证远程 12#验证远程pod spec lint [name].podspec 搜索pod库 1pod search [库名] 四、问题解决4.1、JPush制作私有库lint时报错 symbol(s) not found for architecture i3861234567valid_archs = ['armv7s','arm64',]s.xcconfig = &#123; 'VALID_ARCHS' =&gt; valid_archs.join(' '),&#125;s.pod_target_xcconfig = &#123; 'ARCHS[sdk=iphonesimulator*]' =&gt; '$(ARCHS_STANDARD_64_BIT)'&#125; 4.2、私有库依赖私有库验证不通过123--sources=[private spec],[cocoapods spec]# 如下写法pod lib lint --no-clean --sources=https://xxx.git,https://github.com/CocoaPods/Specs.git --allow-warnings --use-libraries --use-modular-headers --verbose 五、结语 终于完成这篇博客了，从自己比较熟悉GitHub之后，也想过自己能够开源一款三方库，然而自己水平有限，现在还没有拿的出来好的封装库或一些好的封装思想。但自己还是要学会制作pod库，在写博客之前，自己在谷歌浏览器查了许多的资料，资料也是比较的凌乱，自己在制作过程中也踩了许多的坑，最后自己也成功制作了一个私有库WBAvoidCrash，过程虽然有些坎坷，但自己还是很有成就感。自己也是第一次制作，如果有描述不对的地方，希望大家能够批评指正，我也会第一时间修改，同时也希望这篇博客对需要的朋友一些帮助，接下来我也会写一篇记录公开库制作过程的博客。 六、参考文章1、 CocoaPods创建公有和私有Pod库方法总结2、出现Unable to find a pod with name, author, summary, or description matching解决方法3、如何发布自己的开源框架到CocoaPods4、使用CocoaPods管理iOS库—制作pod篇5、如何创建私有 CocoaPods 仓库6、Making a CocoaPod7、Create and Distribute Private Libraries with Cocoapods8、CocoaPods使用总结]]></content>
      <categories>
        <category>iOS</category>
      </categories>
      <tags>
        <tag>iOS</tag>
        <tag>CocoaPods</tag>
        <tag>GitHub</tag>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CocoaPods安装与使用]]></title>
    <url>%2F2018%2F08%2F01%2FCocoaPods%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%2F</url>
    <content type="text"><![CDATA[更新日志2018-08-01：整理文章目录结构，添加忽略CocoaPods警告方法，解决出现OTHER_LDFLAGS方法。 介绍内容目录 一、安装RVM 二、配置RubyGems 三、CocoaPods安装 四、CocoaPods使用 五、卸载CocoaPods 六、问题解决一、安装RVM 安装RVM命令如下： 1curl -L get.rvm.io | bash -s stable 查看rvm版本 1rvm -v 更新RVM 1rvm get stable 查看可下载的ruby版本 1rvm list known 输出结果为：123456789101112# MRI Rubies[ruby-]1.8.6[-p420][ruby-]1.8.7[-head] # security released on head[ruby-]1.9.1[-p431][ruby-]1.9.2[-p330][ruby-]1.9.3[-p551][ruby-]2.0.0[-p648][ruby-]2.1[.10][ruby-]2.2[.7][ruby-]2.3[.4][ruby-]2.4[.1]ruby-head 选择版本安装12//安装2.4.1rvm install 2.4.1 安装如果遇到如下错误：安装Command Line Tools即可1xcode-select --install 查看已安装的版本1rvm list 输出结果如下：12345rvm rubies=* ruby-2.4.1 [ x86_64 ]# =&gt; - current# =* - current &amp;&amp; default# * - default 查看当前使用的版本 1rvm current 设置默认版本 1rvm use 2.4.1 --default 删除安装过的版本 1rvm remove 2.2.2 如果提示权限不足，同理加上sudo1sudo rvm remove 2.2.2 二、升级RubyGems 在终端输入：1gem update --system 若果是最新，则输出：1Latest version currently installed. Aborting. 若果没有权限报错，在命令前加上sudo 1sudo gem update --system 更换源（最新使用的是：https://gems.ruby-china.org/） 123gem sources --remove https://rubygems.org/gem sources -a https://gems.ruby-china.org/ 查看ruby镜像 1gem source -l 输出结果：1https://gems.ruby-china.org/ 三、CocoaPods安装 终端输入 123sudo gem install cocoapods或sudo gem install -n /usr/local/bin cocoapods 安装了多个xcode进行选择 1sudo xcode-select -switch /Applications/Xcode.app/Contents/Developer 安装本地库 1pod setup 执行上面的命令过后，会出现卡主不动，这个是时候是在下载，通常会等很久。这是后可以通过cmmand+n新创一个终端窗口，然后cd ~/.cocoapods/到该文件下，执行du -sh *查看大小：11015M repos 查看版本 1pod --version 升级CocoaPods 123sudo gem install -n /usr/local/bin cocoapods或sudo gem install cocoapods 四、CocoaPods使用工程导入三方库 创建一个工程test，终端切换到工程路径： 1cd 工程路径 终端输入： 1pod init 这时工程就会生成一个podfile 编辑podfile：1vim podfile 进入之后按i进入编辑模式，添加三方开源库如：pod &#39;AFNetworking&#39;(也可指定版本pod &#39;AFNetworking&#39;, &#39;~&gt; 3.1.0&#39;)，然后输入:wq回车保存。1234567891011121314# Uncomment the next line to define a global platform for your project# platform :ios, &apos;9.0&apos;pod &apos;AFNetworking&apos;target &apos;test&apos; do # Uncomment the next line if you&apos;re using Swift or would like to use dynamic frameworks # use_frameworks! # Pods for testend~ ~ ~ :wq 执行安装123pod install或pod install --no-repo-update 好了，到此CocoaPods的安装与使用都介绍完毕。 更新三方库 更新所有三方库 12//更新所有可更新的三方库pod update 间接更新三方库 12345678cd ~/.cocoapodslscd reposlscd masterlsls -agit pull 更新指定库 1pod update Masonry 省时更新方法 1pod update --verbose --no-repo-update 移除导入过的三方库 第一步：编辑podfile，将需要删除的三方库移除掉pod ‘AFNetworking’, ‘~&gt;3.1.0’ 第二步：执行pod install，重新编译，如果没有报错则移除成功1pod install 移除工程中CocoaPods 删除工程文件夹下的Podfile、Podfile.lock和Pods文件夹 删除xcworkspace文件 打开xcodeproj文件，删除项目中的libpods.a和Pods.xcconfig引用 打开Build Phases选项，删除Check Pods Manifest.lock和Copy Pods Resources主要就是上面四个步骤。 五、卸载CocoaPods 查看pod的地址，终端输入 1which pod 删除pod，终端输入 1sudo rm -rf [pod地址] 查看gem安装包，终端输入 1gem list 按版本号卸载cocoapods 1sudo gem uninstall cocoapods -v [版本号] 卸载cocoapods其他组件同理，只需替换名字卸载即可，如：gem uninstall cocoapods-downloader。 卸载所有版本 1sudo gem uninstall cocoapods 验证是否删除成功 1pod --version 如果提示命令未找到，说明卸载成功 六、问题解决1、执行gem update --system报证书错误，在网上找了很久也没有找到解决方法，后来还是找到了,方法是忽略证书验证。步骤：前往~/.gemrc，打开文件，并添加:ssl_verify_mode: 012345678---:backtrace: false:bulk_threshold: 1000:sources:- https://gems.ruby-china.org/:update_sources: true:verbose: true:ssl_verify_mode: 0 cmmand+s保存，然后在执行sudo gem update --system，更新成功。 2、Unable to require openssl, install OpenSSL and rebuild ruby12345//如果没有安装openssl，则用honebrew安装brew install openssl//重装rvm并关联opensslrvm reinstall 2.4.0 --with-openssl-dir=`brew --prefix openssl` 如果安装了2.4.0版本则重新安装，没有安装则安装，安装成功之后，就能sudo gem update --system正常更新了。 3、CocoaPods 出现 OTHER_LDFLAGS 错误，如下图所示 解决方法1：Target–&gt;Build Settings–&gt;Other Linker Flags中添加$(inherited)，之后执行pod install或pod update警告就会消失。 解决方法2:project.xcodeproj右键显示包内容，用文本编辑器打开 project.pbxproj，command + F 搜索 OTHER_LDFLAGS ，删除搜索到的设置，command + S 保存，然后重新执行 pod install 或者 pod update 。 4、Cocoapods第三方库编译提示warning的解决方法 忽略所有警告 1inhibit_all_warnings! 之后执行pod install 或 pod update 即可。 忽略单个库警告 1pod &apos;Masonry&apos;, :inhibit_warnings =&gt; true 之后执行pod install 或 pod update 即可。 总结 CocoaPods安装与使用就介绍到这里了，如果在以后CocoaPods安装使用工程中遇到问题，如果找到了解决方案，我也会贴出来。 参考文章 iOS 删除已经配置的类库和移除CocoaPods 使用CocoaPods（二）删除已经配置的类库和移除CocoaPods 【iOS 开发】解决使用 CocoaPods 执行 pod install 时出现 - Use the $（inherited） flag … 警告 Cocoapods第三方库编译提示warning的解决方法]]></content>
      <categories>
        <category>iOS</category>
      </categories>
      <tags>
        <tag>iOS</tag>
        <tag>CocoaPods</tag>
        <tag>MAC</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[iOS状态栏配置]]></title>
    <url>%2F2018%2F07%2F26%2FiOS%E7%8A%B6%E6%80%81%E6%A0%8F%E9%85%8D%E7%BD%AE%2F</url>
    <content type="text"><![CDATA[一、全局配置状态栏 在info.plist中添加key：View controller-based status bar appearance，并设置value为NO。 在需要设置样式的地方调用： 123//UIStatusBarStyleLightContent：Light content, for use on dark backgrounds//UIStatusBarStyleDefault：Dark content, for use on light backgrounds[UIApplication sharedApplication].statusBarStyle = UIStatusBarStyleLightContent; 二、配置单个控制器状态栏 在info.plist中添加key：View controller-based status bar appearance，并设置value为YES。 如果有控制器没有导航控制器，直接重写preferredStatusBarStyle 方法返回你想要的状态栏样式即可： 123- (UIStatusBarStyle)preferredStatusBarStyle &#123; return UIStatusBarStyleLightContent;&#125; 通常都有导航控制器，如果控制器中直接重写preferredStatusBarStyle是没有效果的，这时需要在基类导航控制器中重写childViewControllerForStatusBarStyle 、preferredStatusBarStyle 任意一个方法就能实现配置单个控制器的状态栏样式： 12345678- (UIViewController *)childViewControllerForStatusBarStyle &#123; return self.topViewController;&#125;或者重写- (UIStatusBarStyle)preferredStatusBarStyle &#123; return [self.topViewController preferredStatusBarStyle];&#125; 注意：两个方法都重写，只会调用childViewControllerForStatusBarStyle，所以需要自己根据清空去选择调用那个方法。 三、通过分类实现 在项目中方便使用，我写了一个UINavigationController（WBStatusBarStyle） 分类，主要代码如下： 12345678910111213141516171819202122232425@implementation UINavigationController (WBStatusBarStyle)+ (void)wb_setDefaultStatusBarStyle:(UIStatusBarStyle)statusBarStyle &#123; objc_setAssociatedObject(self, &amp;kWBDefaultStatusBarStyleKey, @(statusBarStyle), OBJC_ASSOCIATION_RETAIN_NONATOMIC);&#125;+ (UIStatusBarStyle)wb_DefaultStatusBarStyle &#123; id style = objc_getAssociatedObject(self, &amp;kWBDefaultStatusBarStyleKey); return style ? [style integerValue] : UIStatusBarStyleDefault;&#125;/** &lt; Override to return a child view controller or nil. If non-nil, that view controller&apos;s status bar appearance attributes will be used. If nil, self is used. Whenever the return values from these methods change, -setNeedsUpdatedStatusBarAttributes should be called. &gt; *///- (UIViewController *)childViewControllerForStatusBarStyle &#123;// return self.topViewController;//&#125;////- (UIViewController *)childViewControllerForStatusBarHidden &#123;// return self.topViewController;//&#125;- (UIStatusBarStyle)preferredStatusBarStyle &#123; return [self.topViewController wb_statusBarStyle];&#125;@end UIViewController (WBStatusBarStyle) 1234567891011121314@implementation UIViewController (WBStatusBarStyle)- (void)setWb_statusBarStyle:(UIStatusBarStyle)wb_statusBarStyle &#123; objc_setAssociatedObject(self, &amp;kWBStatusBarStyleKey, @(wb_statusBarStyle), OBJC_ASSOCIATION_RETAIN_NONATOMIC); /** &lt; Whenever the return values from these methods change, -setNeedsUpdatedStatusBarAttributes should be called. &gt; */ [self setNeedsStatusBarAppearanceUpdate];&#125;- (UIStatusBarStyle)wb_statusBarStyle &#123; id style = objc_getAssociatedObject(self, &amp;kWBStatusBarStyleKey); return style ? [style integerValue] : [UINavigationController wb_DefaultStatusBarStyle];&#125;@end 四、GitHub Demo WBManageStatusBarStyleDemo WBCategories]]></content>
      <categories>
        <category>iOS</category>
      </categories>
      <tags>
        <tag>iOS</tag>
        <tag>Runtime</tag>
        <tag>Category</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo七牛插件安装与使用]]></title>
    <url>%2F2018%2F07%2F08%2FHexo%E4%B8%83%E7%89%9B%E6%8F%92%E4%BB%B6%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%2F</url>
    <content type="text"><![CDATA[相关网址 hexo-qiniu-sync 七牛云注册七牛个人账号 首先需要到七牛云官网注册个人账号。 进入控制台创建存储空间，如下图所示： 将融合 CDN默认域名添加到万网中，配置格式如下图所示：安装七牛云插件 安装七牛云插件1npm install hexo-qiniu-sync --save 配置相关信息 配置站点文件_config.yml，配置入内容（注意：添加到配置文件时，把//去掉） 12345678910111213141516171819202122232425262728#plugins:# - hexo-qiniu-syncqiniu: offline: false sync: true bucket: blogwenbo //这里将其注释掉，不注释，执行hexo g报错 # secret_file: sec/qn.json or C: access_key: your access_key secret_key: your secret_key // 上传的资源子目录前缀.如设置，需与urlPrefix同步 dirPrefix: static //外链前缀 urlPrefix: http://p2zukkwm9.bkt.clouddn.com/static //使用默认配置即可 up_host: http://upload.qiniu.com //本地目录 local_dir: static // 是否更新已经上传过的文件(仅文件大小不同或在上次上传后进行更新的才会重新上传) update_exist: true image: folder: images extend: js: folder: js css: folder: css 生成七牛配置路径，执行下面命令任意一个 12345678910111213hexo s或hexo g//终端输出INFO -----------------------------------------------------------INFO qiniu state: onlineINFO qiniu sync: trueINFO qiniu local dir: staticINFO qiniu url: http://blogwenbo.com/staticINFO -----------------------------------------------------------INFO Start processingINFO Now start qiniu sync.INFO Need upload file num: 0 就会在static目录下生成images、css、js三个文件夹。这时我们把测试图片七牛云.png放在images文件夹下，然后按照如下标签语法书写： 1&#123;% qnimg 七牛云.png title:七牛云 alt:七牛云 &apos;class:&apos; extend:?imageView2/2/w/450 %&#125; 同步静态资源到七牛云空间，主要有两种方式，一种是使用hexo命令，还有一种是使用七牛插件命令，可以参考GitHub文档：hexo-qiniu-sync 123456789101112//1、启用本地服务器.即使用 hexo server 命令（简写为 hexo s）//当以本地服务器模式启动后，会自动监测 local_dir 目录下的文件变化， 会自动将新文件进行上传。如果文件进行了修改，但设置中没有启用 update_exist 配置，则不会更新到七牛空间。hexo shexo server//2、使用命令行命令(sync | s | sync2 | s2)//命令行命令会扫描 local_dir 目录下的文件，同步至七牛空间。hexo qiniu synchexo qiniu shexo qiniu sync2hexo qiniu s2 图片处理可参考官方文档图片基本处理 问题解决 没有注释secret_file: sec/qn.json or C:报错，如下图所示： 1# secret_file: sec/qn.json or C: hexo-qiniu-sync安装好后，hexo s命令不见了，hexo d也提示问题 #41 123//将其注释就好了#plugins:# - hexo-qiniu-sync 结语自己也参考了一些文章，但讲解的都不是很详细完整，有些博客只讲解了重要的一些步骤，不管怎样，最后自己还是捣腾出来了，还是挺折腾人的，我也是第一次用七牛云存储图片，有些地方可能讲解的不是很完整，也请谅解。希望本篇博客能给你一些帮助，也欢迎大家一起交流学习。成功案例：Hexo七牛插件安装与使用。 参考文章Hexo 七牛同步插件的使用]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>QiNiu</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[WBHUDManager]]></title>
    <url>%2F2018%2F07%2F08%2FWBHUDManager%2F</url>
    <content type="text"><![CDATA[更新日志2018-08-01：更新API，支持配置更多自定义设置，录制GIF。 2018-09-09：支持pod安装 前言 在我们平时做项目的时候，为了提高交互体验，难免会用到一些提示语。除了UI上有特殊的要求需要自定义提示UI，一般会选择GitHub上一些知名的提示框架库，如： MBProgressHUD SVProgressHUD JGProgressHUD Toast 之前做项目都是用的SVProgressHUD，这个三方提示库使用非常接单，基于这个库，也很好做自定义提示封装。后来做项目改成了MBProgressHUD，相对于SVProgressHUD，MBProgressHUD使用相对来说要麻烦一点，因此，我对MBProgressHUD一些常用提示进行了封装，最开始封装的工具类存在着一些缺点，比如说在网络请求的时候，如果网络不好，拿不到回调，MBProgressHUD就会一直显示，用户无法交互，因此对这个工具类进行了改进。 MBProgressHUD(v1.1.0)我主要写了一个分类，有菊花、文字、文字+图片提示，并提供了显示完成对调，方便显示完成后进行相应的操作或界面跳转，提供的调用方法如下：123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229230231232233234235236237238239240241242243244245246247248249250251252253254255256257258259260261262263264265266267268269270271272273274275276277278279280281282283284285286287288289290291292293294295296297298299300301302303304305306307308309310311312313314315316317// MARK:Loading/** 只显示菊花，不会自动消失 (白字+黑底) @return MBProgressHUD实例对象 */+ (MBProgressHUD *)wb_showActivity;/** 只显示菊花，不会自动消失 (白字+黑底+自定义视图) @param view 要显示的视图 @return MBProgressHUD实例对象 */+ (MBProgressHUD *)wb_showActivity:(UIView *)view;/** 菊花+文字 (白字+黑底) @param message 加载文字 @return MBProgressHUD实例对象 */+ (MBProgressHUD *)wb_showActivityMessage:(NSString *)message;/** 菊花+文字 (白字+黑底) @param message 加载文字 @param view 要显示的视图 @return MBProgressHUD实例对象 */+ (MBProgressHUD *)wb_showActivityMessage:(NSString *)message toView:(UIView *)view;/** 菊花+文字 （自定义文字+内容颜色+蒙版颜色+容器颜色） @param message 加载文字 @param view 要显示的视图 @param contentColor 内容颜色 @param maskColor 蒙版颜色 @param bezelColor 容器颜色 @return MBProgressHUD实例对象 */+ (MBProgressHUD *)wb_showActivityMessage:(NSString *)message toView:(UIView *)view contentColor:(UIColor *)contentColor maskColor:(UIColor *)maskColor bezelColor:(UIColor *)bezelColor;/** 菊花+文字 （自定义文字+文字颜色+蒙版颜色+容器颜色） @param message 加载文字 @param view 要显示的视图 @param titleColor 文字颜色 @param maskColor 蒙版颜色 @param bezelColor 容器颜色 @return MBProgressHUD实例对象 */+ (MBProgressHUD *)wb_showActivityMessage:(NSString *)message toView:(UIView *)view titleColor:(UIColor *)titleColor maskColor:(UIColor *)maskColor bezelColor:(UIColor *)bezelColor;// MARK:Text/** 提示文字 （自定义文+位置中间 + 显示在window） @param message 文字 */+ (void)wb_showMessage:(NSString *)message;/** 提示文字 (标题 + 详情文字) @param message 文字 @param detailMessage 详情文字 */+ (void)wb_showMessage:(NSString *)message detailMessage:(NSString *)detailMessage;/** 提示文字 (标题 + 详情文字 + 自定义位置 + 视图) @param message 文字 @param detailMessage 详情文字 @param position 位置 */+ (void)wb_showMessage:(NSString *)message detailMessage:(NSString *)detailMessage toView:(UIView *)view position:(WBHUDPositionStyle)position;/** 提示文字（自定义文+位置中间+显示在window+完成回调） @param message 文字 @param completion 完成回调 */+ (void)wb_showMessage:(NSString *)message completion:(MBProgressHUDCompletionBlock)completion;/** 提示文字（自定文字+位置中间+自定义显示视图+完成回调） @param message 文字 @param view 要显示的视图 @param completion 完成回调 */+ (void)wb_showMessage:(NSString *)message toView:(UIView *)view completion:(MBProgressHUDCompletionBlock)completion;/** 提示文字 (自定义文字+自定义位置+自定义显示视图) @param message 文字 @param view 要显示的视图 @param position 位置 @param completion 完成回调 */+ (void)wb_showMessage:(NSString *)message toView:(UIView *)view position:(WBHUDPositionStyle)position completion:(MBProgressHUDCompletionBlock)completion;/** 提示文字 (自定义文字+详情文字+自定义位置+内容样式) @param message 文字 @param detailTitle 详情文字 @param view 要显示的视图 @param position 显示位置 @param contentStyle 内容样式 @param completion 完成回调 */+ (void)wb_showMessage:(NSString *)message detailTitle:(NSString *)detailTitle toView:(UIView *)view position:(WBHUDPositionStyle)position contentStyle:(WBHUDContentStyle)contentStyle completion:(MBProgressHUDCompletionBlock)completion;// MARK:Image/** 自定义成功提示 (显示在window) @param success 提示文字 */+ (void)wb_showSuccess:(NSString *)success;/** 自定义成功提示 (显示在window + 完成回调) @param success 提示文字 @param completion 完成回调 */+ (void)wb_showSuccess:(NSString *)success completion:(MBProgressHUDCompletionBlock)completion;/** 自定义成功提示 (显示在window + 完成回调 + 自定义显示视图) @param success 提示文字 @param view 显示视图 @param completion 完成回调 */+ (void)wb_showSuccess:(NSString *)success toView:(UIView *)view completion:(MBProgressHUDCompletionBlock)completion;/** 错误提示 (显示在window) @param error 提示文字 */+ (void)wb_showError:(NSString *)error;/** 错误提示 (显示在window + 完成回调) @param error 错误提示 @param completion 完成回调 */+ (void)wb_showError:(NSString *)error completion:(MBProgressHUDCompletionBlock)completion;/** 错误提示 (显示在window + 完成回调 + 自定义显示视图) @param error 错误提示 @param view 示视图 @param completion 完成回调 */+ (void)wb_showError:(NSString *)error toView:(UIView *)view completion:(MBProgressHUDCompletionBlock)completion;/** 信息提示 (window) @param info 提示文字 */+ (void)wb_showInfo:(NSString *)info;/** 信息提示 (window + 完成回调) @param info 提示文字 @param completion 完成回调 */+ (void)wb_showInfo:(NSString *)info completion:(MBProgressHUDCompletionBlock)completion;/** 信息提示 (window + 完成回调 + 自定义显示视图) @param info 提示文字 @param view 自定义显示视图 @param completion 完成回调 */+ (void)wb_showInfo:(NSString *)info toView:(UIView *)view completion:(MBProgressHUDCompletionBlock)completion;/** 警告提示 (window) @param warning 提示文字 */+ (void)wb_showWarning:(NSString *)warning;/** 警告提示 (window + 完成回调) @param warning 警告 @param completion 完成回调 */+ (void)wb_showWarning:(NSString *)warning completion:(MBProgressHUDCompletionBlock)completion;/** 警告提示 (window + 完成回调 + 自定义视图) @param warning 警告 @param view 自定义视图 @param completion 完成回调 */+ (void)wb_showWarning:(NSString *)warning toView:(UIView *)view completion:(MBProgressHUDCompletionBlock)completion;/** 自定义图片 + 文字提示 @param text 文字 @param icon 图片名 @param view 要显示的视图 @param completion 完成回调 */+ (void)wb_show:(NSString *)text icon:(NSString *)icon view:(UIView *)view completion:(MBProgressHUDCompletionBlock)completion;// MARK:Switch Model/** Model切换 @param view 要显示的视图 @param title 要显示的文字 @param configBlock 配置hud @return MBProgressHUD实例对象 */+ (MBProgressHUD *)wb_showModelSwitch:(UIView *)view title:(NSString *)title configBlock:(WBHUDConfigBlock)configBlock;// MARK:Progress/** 文字 + 进度条 @param view 要显示的视图 @param progressStyle 进度样式 @param title 提示文字 @param configBlock 进度配置block @return MBProgressHUD实例对象 */+ (MBProgressHUD *)wb_showDownloadToView:(UIView *)view progressStyle:(WBHUDProgressStyle)progressStyle title:(NSString *)title configBlock:(WBHUDConfigBlock)configBlock;/** 文字 + 进度条 + 取消按钮 @param view 要显示的视图 @param progressStyle 进度样式 @param title 提示文字 @param cancelTitle 取消按钮标题 @param configBlock 进度配置block @param cancelBlock 取消按钮点击回调 @return MBProgressHUD实例对象 */+ (MBProgressHUD *)wb_showDownloadToView:(UIView *)view progressStyle:(WBHUDProgressStyle)progressStyle title:(NSString *)title cancelTitle:(NSString *)cancelTitle configBlock:(WBHUDConfigBlock)configBlock cancelBlock:(WBHUDCancelBlock)cancelBlock;// MARK:Hide+ (void)wb_hideHUD;+ (void)wb_hideHUDForView:(UIView *)view; 举一个.m显示菊花方法的例子吧，MBProgressHUD最新版本对比老版本API还是有些变化的：1234567891011121314151617181920212223242526272829/** &lt; 创建HUD &gt; */+ (MBProgressHUD *)wb_createHUD:(UIView *)view &#123; if (view == nil) view = (UIView *)[UIApplication sharedApplication].delegate.window; return [MBProgressHUD showHUDAddedTo:view animated:YES];&#125;/** &lt; 设置HUD &gt; */+ (MBProgressHUD *)wb_configHUDWithView:(UIView *)view title:(NSString *)title autoDismiss:(BOOL)autoDismiss completion:(MBProgressHUDCompletionBlock)completion &#123; MBProgressHUD *hud = [self wb_createHUD:view]; /** &lt; 自动换行 &gt; */ hud.label.numberOfLines = 0; /** &lt; 提示文字 &gt; */ hud.title(title); /** &lt; 隐藏移除 &gt; */ hud.removeFromSuperViewOnHide = YES; /** &lt;默认内容样式：黑底白字 &gt; */ hud.hudContentStyle(WBHUDContentBlackStyle); /** &lt; 自动隐藏 &gt; */ if (autoDismiss) &#123; [hud hideAnimated:YES afterDelay:KHideAfterDelayTime]; &#125; hud.completionBlock = completion; return hud;&#125; 感兴趣的朋友，可以下载Demo查看具体方法实现，请戳：WBHUDManager 结语 选择哪一款提示框架，都要看自己喜好了，因为我代码水平有限，有些地方可能考虑的不够完善，只能说是抛砖引玉吧，大神们可能有更好的封装。要想基于这些框架自定义出自己需要风格的UI，还是要对框架提供的方法属性有一定的了解。]]></content>
      <categories>
        <category>iOS</category>
      </categories>
      <tags>
        <tag>iOS</tag>
        <tag>Objective-C</tag>
        <tag>GitHub</tag>
        <tag>MBProgressHUD</tag>
        <tag>Swift</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Mac OS X系统常用工具]]></title>
    <url>%2F2018%2F07%2F08%2FMac-OS-X%E7%B3%BB%E7%BB%9F%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7%2F</url>
    <content type="text"><![CDATA[分类目录 版本控制 Cornerstone Sourcetree Tower GitHubDesktop 办公 office2016 效率 Alfred 实用 Mounty CleanMyMac HideSwitch LICEcap iOS开发必备 Dash 真机调试包 数据库管理 Navicat 设计工具 Sketch MarkDown 工具 Typora iPic Cmd Markdown Sublime Text 网络工具 shadowsocks Charles 终端工具 iTerm 2 版本控制Cornerstone Cornerstone is an elegant SVN client designed specifically for the Mac. It is built on Subversion, a popular version control system well-known for its performance, flexibility, and scalability. Cornerstone excels in tracking &amp; displaying changes to data; its comparison tools enable users to view differences in multi-language formats. Better yet, Planio is now integrated into the Cornerstone environment — so you can now easily sync a local folder with your Planio repositories using your Mac! MAC上一款优雅的SVN客服端，进入公司后，使用的第一款项目版本控制工具就是它了。它是建立在Subversion之上的，因其简洁、灵活、可扩展性而闻名。 官方网站：planio Sourcetree Simplicity and power in a beautiful Git GUI. 一款免费非常值得推荐的Git GUI图形客户端。自己托管在GitHub上的demo就是用的这款软件，使用很方便，免去了git繁琐命令，极大提高了工作效率。 官方网站：Sourcetree相关博客：Sourcetree安装与使用 Tower Version control with Git - made easy.In a beautiful, efficient, and powerful app. MAC&amp;&amp;Windows平台上最好用的Git GUI客户端。不像Sourcetree，这个款软件是付费的，RMB大概500元左右，不过也有破解版的，我也没有使用过，感觉功能和Sourcetree差不多吧。 官方网址：git-tower GitHubDesktop Extend your GitHub workflow beyond your browser with GitHub Desktop, completely redesigned with Electron. Get a unified cross-platform experience that’s completely open source and ready to customize. 在我搜索MAC上好用的Git GUI客户端时下载用过，功能不是很多，基本的Git操都有，可以自己去了解下吧。 官方网址：GitHubDesktop 网络工具shadowsocks A secure socks5 proxy, designed to protect your Internet traffic. 一个安全的socks5代理，旨在保护你的网络流量。ShadowsocksX-NG有些文件是用swift写的，也是最近才接触，配置VPN时用到。 官网网址：shadowsocks Charles Charles is an HTTP proxy / HTTP monitor / Reverse Proxy that enables a developer to view all of the HTTP and SSL / HTTPS traffic between their machine and the Internet. This includes requests, responses and the HTTP headers (which contain the cookies and caching information). Charles 是在 Mac 下常用的网络封包截取工具，在做移动开发时，我们为了调试与服务器端的网络通讯协议，常常需要截取网络封包来分析。 Charles 通过将自己设置成系统的网络访问代理服务器，使得所有的网络访问请求都通过它来完成，从而实现了网络封包的截取和分析。 除了在做移动开发中调试端口外，Charles 也可以用于分析第三方应用的通讯协议。配合 Charles 的 SSL 功能，Charles 还可以分析 Https 协议。 Charles 是收费软件，可以免费试用 30 天。试用期过后，未付费的用户仍然可以继续使用，但是每次使用时间不能超过 30 分钟，并且启动时将会有 10 秒种的延时。因此，该付费方案对广大用户还是相当友好的，即使你长期不付费，也能使用完整的软件功能。只是当你需要长时间进行封包调试时，会因为 Charles 强制关闭而遇到影响。 官方网址：Charles iOS开发必备Dash Dash is an API Documentation Browser and Code Snippet Manager. Dash stores snippets of code and instantly searches offline documentation sets for 200+ APIs, 100+ cheat sheets and more. You can even generate your own docsets or request docsets to be included. 开发人员不可缺少的杰作。作为一名开发开者，我们可以通过这款软件阅读官方文档，存储代码片段，离线搜索API文档集，开发必备软件。 官方网站：Dash 实用工具LICEcap simple animated screen captures 一款简单好用的屏幕GIF录制软件。比如做demo的时候，录制demo效果。 官网网址：LICEcap相关博客：licecap For Mac安装与使用 Mounty A tiny tool to re-mount write-protected NTFS volumes under Mac OS X 10.9+ in read-write mode. 一款MAC上mini的NTFS读写软件，相比付费的NTFS读写软件，这款软件值得推荐哦。 官网：Mounty通过Homebrew安装：1brew cask install mounty HideSwitch 一款实用小工具，显示和隐藏系统隐藏文件，和Show Or Hide这个款软件类似。 CleanMyMac MAC系统清理软件，MAC上非常值得推荐的一款软件，不过是需要付费的，不过也有破解版的哦。 官方中文网站：mycleanmymac 效率Alfred Alfred is an award-winning app for Mac OS X which boosts your efficiency with hotkeys, keywords, text expansion and more. Search your Mac and the web, and be more productive with custom actions to control your Mac. 它是MAC OS X一款可以极大提高操作效率的软件，被人称之为一款神器。我们可以通过快捷键唤出Alfred，然后通过关键词搜索，总之，它是一款强大的软件。我也是最近才安装，了解的也不是很多，有兴趣的朋友可以下载使用吧。 官方网站：Alfred 办公office2016 MAC平台下的办公软件。 终端工具iTerm 2 iTerm2 is a replacement for Terminal and the successor to iTerm. It works on Macs with macOS 10.10 or newer. iTerm2 brings the terminal into the modern age with features you never knew you always wanted. MAC上最好用的终端工具。 官方网站：iTerm 2相关博客：MAC上iTerm 2安装与使用 数据库管理Navicat Powerful . Intuitive . Easy-to-use The ultimate solution for MongoDB management and development Navicat是一套快速、可靠并价格相当便宜的数据库管理工具，专为简化数据库的管理及降低系统管理成本而设。它的设计符合数据库管理员、开发人员及中小企业的需要。Navicat 是以直觉化的图形用户界面而建的，让你可以以安全并且简单的方式创建、组织、访问并共用信息。 官方网址：Navicat MarkDown 工具Typora Typora will give you a seamless experience as both a reader and a writer. It removes the preview window, mode switcher, syntax symbols of markdown source code, and all other unnecessary distractions. Replace them with a real live preview feature to help you concentrate the content itself. 所见即所得，一款免费MarkDown编辑工具，自己也有使用一段时间，开始觉得挺好用的，后来发现有些操作有些卡顿不流畅，后来就放弃了，不过还是值得推荐。 官方网址：Typora iPic 一款图床神器，还在为MarkDown图传选择而烦恼吗，iPic将是你不错的选择，可直接在App Store下载。 介绍博客 Cmd Markdown 我们理解您需要更便捷更高效的工具记录思想，整理笔记、知识，并将其中承载的价值传播给他人，Cmd Markdown 是我们给出的答案 —— 我们为记录思想和分享知识提供更专业的工具。 作业部落 Cmd Markdown这款编辑器，放弃Typora之后，最近在使用这款编辑器，感觉用起来比较稳定流畅，支持在线存储，如果你最求稳定，它将是一款不错的选择哦。 官方网址：Cmd Markdown Sublime Text A sophisticated text editor for code, markup and prose. Sublime Text是一套跨平台的文本编辑器，支持基于Python的插件。Sublime Text是专有软件，可透过包（Package）扩展。大多数的包使用自由软件授权发布，并由社群建置维护。在自己最开始接触Markdown的时候安装使用过，但是觉得写作的时候不够直观，就放弃了，最近发现这款工具真的很强大，对于代码块的编辑，有联想功能，非常值得推荐。 官方网址：Sublime_Text]]></content>
      <categories>
        <category>MAC</category>
      </categories>
      <tags>
        <tag>MAC</tag>
        <tag>DMG</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[WBCategoryKit]]></title>
    <url>%2F2018%2F07%2F08%2FWBCategoryKit%2F</url>
    <content type="text"><![CDATA[中文说明 Some useful Objective-C ategories and Macro,that contain UIKit.framework、Foundation.framework、AVFoundation.framework、QuartzCore. framework、CoreTelephony.framework、WebKit.framework、MobileCoreServices.framework、Photos.framework、AssetsLibrary.framework、Accelerate.framework、ImageIO.framework、CoreText.framework、CoreGraphics.framework and so on,i will continue to tidy up updates. iOS 系统常用框架分类封装，开发常用宏定义，支持cocoapod集成，支持只集成子模块。持续更新中… Requirements iOS 8+ Xcode 8+ InstallationCocoapods安装 安装所有分类文件 1pod 'WBCategoryKit' 集成子组件 1pod 'WBCategoryKit/UIKit' 或者1pod 'WBCategoryKit/UIKit/WKWebView' 手动集成将需要的分类文件拖入工程即可。 UsageFoundation NSObject 1234//swizzle 类方法+ (void)swizzleClassMethodWithOriginSel:(SEL)oriSel swizzledSel:(SEL)swiSel selfClass:(Class)selfClass; 1234//swizzle 实例方法 + (void)swizzleInstanceMethodWithOriginSel:(SEL)oriSel swizzledSel:(SEL)swiSel selfClass:(Class)selfClass; NSDate 12//NSDateFormatter缓存 - (NSDateFormatter *)wb_dateFormatterWithFormat:(NSString *)format; //朋友圈时间格式1+ (NSString *)compareCurrentTimeWithTimeString:(NSString *)timeString; Macro//设置平方字体PingFangSC12#define kWB_PFR kWB_SYSTEM_VERSION_9_OR_LATER ? @&quot;PingFangSC-Regular&quot; : @&quot;PingFang SC&quot;#define kWB_PFR_FONT(s) [UIFont fontWithName:kWB_PFR size:s] //主线程安全执行123#ifndef dispatch_main_async_safe#define dispatch_main_async_safe(block) dispatch_queue_async_safe(dispatch_get_main_queue(), block)#endif //同步锁12#define kWB_LOCK(lock) dispatch_semaphore_wait(lock, DISPATCH_TIME_FOREVER);#define kWB_UNLOCK(lock) dispatch_semaphore_signal(lock); UIKit WKWebView 123//获取某个标签的结点个数- (void)wb_nodeCountOfTag:(NSString *)tagcompletedHandler:(void (^) (int tagCount))completedHandler; 12//获取网页中的图片 - (void)wb_getImages:(void (^) (NSArray *images))completedHandler; 12//获取网页内容高度- (void)wb_getScrollHeight:(void (^) (CGFloat scrollHeight))completedHandler; 12//为所有图片添加点击事件- (void)wb_addClickEventOnImg; 12//根据id隐藏网页元素- (void)wb_hiddenElementById:(NSString *)idString; UIFont 12345//runtime字体适配+ (UIFont *)_wb_systemFontOfSize:(CGFloat)fontSize;+ (UIFont *)_wb_boldSystemFontOfSize:(CGFloat)fontSize;+ (UIFont *)_wb_fontWithName:(NSString *)fontName size:(CGFloat)fontSize; 更多分类使用方法，请查看WBCategoryKit。 补充本库主要是记录自己积累学习的一个过程，最初在github创建这个工程的时候，我就在自己的博客中写道将来有一天将本库制作成pod公有库，如今完成了本库的制作，虽然在制作过程中遇到了很多的问题，但还是很有成就感。如过在使用过程中，有任何建议或者问题，可以通过以下方式联系我，十分感谢。 author：wenbo QQ：1050794513 email：1050794513@qq.com 喜欢就❤️下鼓励下吧。 更新 2018-09-05 （1.0.2）： 修改podspec文件，支持三级目录。 https://www.jianshu.com/p/e917e7d95f69)]]></content>
      <categories>
        <category>iOS</category>
      </categories>
      <tags>
        <tag>iOS</tag>
        <tag>CocoaPods</tag>
        <tag>Objective-C</tag>
        <tag>GitHub</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[MAC上iTerm 2安装与使用]]></title>
    <url>%2F2018%2F07%2F08%2FMAC%E4%B8%8AiTerm-2%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%2F</url>
    <content type="text"><![CDATA[更新日志 2018-05-20 Mac安装powerline 权限问题 一、前言iTerm2是MAC下最好用的终端工具，并且还是免费的。iTerm2 是配置完毕开箱即用的 tmux，有标签变色、智能选中等特色功能。在日常开发中，我们难免会与终端命令打交道，比如使用Git，CocoaPods，Homebrew，Hexo等，下面开始介绍自定义终端样式吧！ 二、目录 下载安装iTerm 2 安装powerline 安装oh-my-zsh 安装字体库fonts 导入配色 主题设置 添加指令高亮效果zsh-syntax-highlighting 快捷键 问题解决 三、下载安装iTerm 2 GitHub 四、安装powerline12345//没有安装pip先安装pipsudo easy_install pip//之后安装powerline（这里可能会报错，可以参考问题解决）pip install powerline-status 五、安装oh-my-zsh1curl -L https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh | sh 六、安装字体库fonts123456//克隆字体库到本地git clone https://github.com/powerline/fonts.git//安装字体cd fonts./install.sh 安装成功之后输出：123➜ fonts git:(master) ./install.shCopying fonts...Powerline fonts installed to /Users/WENBO/Library/Fonts 七、导入配色 首先到GitHub下载solarized 1git clone https://github.com/altercation/solarized 解压zip文件，进入solarized/iterm2-colors-solarized文件，双击Solarized Dark.itermcolors和Solarized Light.itermcolors进行安装导入，如下图所示 进入系统偏好设置，profiles-&gt;Colors选择刚刚导入的配色方案即可八、主题设置 使用agnoster，下载安装： 123456//克隆主题到本地git clone https://github.com/fcamblor/oh-my-zsh-agnoster-fcamblor//安装主题cd oh-my-zsh-agnoster-fcamblor./install 安装成功之后，编辑~/.zshrc文件，将ZSH_THEME改为agnoster 1234# Set name of the theme to load. Optionally, if you set this to &quot;random&quot;# it&apos;ll load a random theme each time that oh-my-zsh is loaded.# See https://github.com/robbyrussell/oh-my-zsh/wiki/ThemesZSH_THEME=&quot;agnoster&quot; 九、添加指令高亮效果zsh-syntax-highlighting 下载文件 12//克隆项目到本地git clone git://github.com/zsh-users/zsh-syntax-highlighting.git 编辑.zshrc文件，在最后添加如下内容 12source /Users/WENBO/zsh-syntax-highlighting/zsh-syntax-highlighting.zshplugins=(zsh-syntax-highlighting) 注意1/Users/WENBO是*.zshrc文件所在路径，这里替换成你自己的就好了 设置成功之后，效果如下： 十、快捷键自己也才安装，先记录下来吧。 说明 快捷键 新建标签 command + t 关闭标签 command + w 切换标签 command + 数字 command + 左右方向键 切换全屏 command + enter 查找 command +f 垂直分屏 command + d 水平分屏 command + shift + d 切换屏幕 command + option + 方向键 command + [ 或 command + ] 查看历史命令 command + ; 查看剪贴板历史 command + shift + h 清除当前行 ctrl + u 到行首 ctrl + a 到行尾 ctrl + e 前进后退 ctrl + f/b (相当于左右方向键) 上一条命令 ctrl + p 搜索命令历史 ctrl + r 删除当前光标的字符 ctrl + d 删除光标之前的字符 ctrl + h 删除光标之前的单词 ctrl + w 删除到文本末尾 ctrl + k 交换光标处文本 ctrl + t 清屏1 command + r 清屏2 ctrl + l 十一、问题解决 brew link python报错12sudo mkdir /usr/local/Frameworkssudo chown $(whoami):admin /usr/local/Frameworks 之后执行，链接成功1brew link python 安装powerline报错Permission denied，原因是没有安装python,，通过homebrew安装python 1brew install python 命令显示？号，如下图所示：解决办法：进入Preference-&gt;Profiles-&gt;Text，做如下配置即可： Mac安装powerline 权限问题，报错如下解决办法：1pip install powerline-status --user -U 十二、结语在掘金上发现了这款终端工具，自己平时也有用到终端工具，于是就尝试给自己的MAC装上这款软件，在安装过程中还是遇到一些问题，不过最后都解决了。如果你也爱好终端命令操作，可以尝试DIY你喜欢的终端样式哦。 参考文章 iTerm 2 &amp;&amp; Oh My Zsh【DIY教程——亲身体验过程】 Mac终端iTerm2配置]]></content>
      <categories>
        <category>Terminal</category>
      </categories>
      <tags>
        <tag>Terminal</tag>
        <tag>MAC</tag>
        <tag>item2</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Cell自适应高度标签]]></title>
    <url>%2F2018%2F07%2F08%2FCell%E8%87%AA%E9%80%82%E5%BA%94%E9%AB%98%E5%BA%A6%E6%A0%87%E7%AD%BE%2F</url>
    <content type="text"><![CDATA[一、本地数据自适应 在做项目意见反馈的时候，需要选择反馈类型，整个界面是UITableView，我现在喜欢用自动布局，用的Masonry布局框架，开始选择类型是放在本地的，用Masonry实现cell高度自适应还算相对简单的，下面是实现数据在本地高度自适应的核心代码，该方法在cell初始化方法中调用：123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172- (void)initSubviews &#123; /** &lt;&lt; init subviews &gt; */ CGFloat margin = 15.f; CGFloat spacing = 10.f; CGFloat maxWidth = ScreenWidth; __block CGFloat rowWidth = 0; __block BOOL isNeedChangeLine = YES; __block UIButton *lastButton = nil; NSInteger count = self.dataArray.count; [self.dataArray enumerateObjectsUsingBlock:^(CYBImageTitleModel * _Nonnull obj, NSUInteger idx, BOOL * _Nonnull stop) &#123; UIButton *button = [UIButton buttonWithType:UIButtonTypeCustom]; button.titleLabel.font = FONT(14.f); button.adjustsImageWhenHighlighted = NO; [button setTitleColor:[UIColor lightGrayColor] forState:UIControlStateNormal]; [button setTitleColor:Color_Orange forState:UIControlStateSelected]; [button setBackgroundImage:obj.image forState:UIControlStateNormal]; [button setBackgroundImage:obj.selectedImage forState:UIControlStateSelected]; [button setTitle:obj.title forState:UIControlStateNormal]; button.tag = kBTN_TAG + idx; button.selected = obj.isSelected; if (obj.isSelected) &#123; tempBtn = button; &#125; [button wb_addTarget:self action:@selector(buttonClicked:)]; [self.contentView addSubview:button]; CGFloat titleWidth = [obj.title boundingRectWithSize:CGSizeMake(CGFLOAT_MAX, 28) options:NSStringDrawingUsesLineFragmentOrigin attributes:@&#123;NSFontAttributeName : FONT(14.f)&#125; context:nil].size.width + 2 * 8; rowWidth += titleWidth + spacing; /** &lt; 是否需要换行 &gt; */ if (rowWidth &gt; maxWidth - 2 * margin) &#123; isNeedChangeLine = YES; /** &lt; 判断是否超过最大值 &gt; */ if (titleWidth + 2 * margin &gt; maxWidth) &#123; titleWidth = maxWidth - 2 * margin; &#125; /** &lt; 换行后重新设置当前行的总宽度 &gt; */ rowWidth = titleWidth + spacing; &#125; [button mas_makeConstraints:^(MASConstraintMaker *make) &#123; /** &lt; 换行 &gt; */ if (isNeedChangeLine) &#123; if (!lastButton) &#123; make.top.equalTo(self.contentView.mas_top).offset(margin); &#125;else &#123; make.top.equalTo(lastButton.mas_bottom).offset(spacing); &#125; make.left.equalTo(self.contentView.mas_left).offset(margin); isNeedChangeLine = NO; &#125;else &#123; make.left.equalTo(lastButton.mas_right).offset(spacing); make.top.equalTo(lastButton.mas_top); &#125; make.height.mas_equalTo(@(28)); make.width.mas_equalTo(@(titleWidth)); /** &lt; 最后一个 &gt; */ if (idx == count - 1) &#123; make.bottom.equalTo(self.contentView.mas_bottom).offset(-margin); &#125; &#125;]; lastButton = button; &#125;];&#125; 二、网络请求数据高度自适应 后来改需求了，需要从网络请求意见反馈类型，好吧，上面的方法已经有实现高度自适应关键代码了，只要稍作修改就可实现了。但是实现过程并不是想象中那么简单，中间也经理了很多波折。因为时间还是很充裕的，我就考虑到将标签空间封装成一个视图，等要使用的时候自己添加到cell上，并设置上下左右约束，封装完成之后并没有达到我想要的效果，我发现cell根本就撑不起来，我检查了一遍约束，上下左右约束没有遗漏呀，封装的视图WBAutoTagListView核心代码如下，约束实在layoutSubviews设置的： 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849#pragma mark &lt; Layout &gt;- (void)layoutSubviews &#123; [super layoutSubviews]; CGFloat maxWidth = self.bounds.size.width - _secionInset.left - _secionInset.right; __block CGFloat rowWidth = 0; __block BOOL isNeedChangeLine = YES; __block WBTagListItem *lastItem = nil; NSInteger count = self.itemArray.count; [self.itemArray enumerateObjectsUsingBlock:^(WBTagListItem * _Nonnull obj, NSUInteger idx, BOOL * _Nonnull stop) &#123; CGFloat titleWidth = obj.titleWidth; rowWidth += titleWidth + _minimumInteritemSpacing; /** &lt; 是否需要换行 &gt; */ if (rowWidth &gt; maxWidth - 2 * _minimumInteritemSpacing) &#123; isNeedChangeLine = YES; /** &lt; 判断是否超过最大值 &gt; */ if (titleWidth + 2 * _minimumInteritemSpacing &gt; maxWidth) &#123; titleWidth = maxWidth - 2 * _minimumInteritemSpacing; &#125; /** &lt; 换行后重新设置当前行的总宽度 &gt; */ rowWidth = titleWidth + _minimumInteritemSpacing; &#125; [obj mas_makeConstraints:^(MASConstraintMaker *make) &#123; /** &lt; 换行 &gt; */ if (isNeedChangeLine) &#123; if (!lastItem) &#123; make.top.equalTo(self.mas_top).offset(_secionInset.top); &#125;else &#123; make.top.equalTo(lastItem.mas_bottom).offset(_minimumLineSpacing); &#125; make.left.equalTo(self.mas_left).offset(_secionInset.left); isNeedChangeLine = NO; &#125;else &#123; make.left.equalTo(lastItem.mas_right).offset(_minimumInteritemSpacing); make.top.equalTo(lastItem.mas_top); &#125; make.height.mas_equalTo(@(_itemHeight)); make.width.mas_equalTo(@(titleWidth)); /** &lt; 最后一个 &gt; */ if (idx == count - 1) &#123; make.bottom.mas_offset(-_secionInset.bottom).priorityMedium(); &#125; &#125;]; lastItem = obj; &#125;]; NSLog(@&quot;%f&quot;,[self systemLayoutSizeFittingSize:UILayoutFittingCompressedSize].height);&#125; 经测试，将该视图添加到控制器的视图上是可以自适应高度的，但是添加的cell上，就无法撑cell高度，尝试了许多写法，还是未能实现，控制台提示了无法算出cell的高度，就给了一个默认高度，顿时都无语了，有知道的大神能告诉我为什么有内容却无法撑起cell高度吗？ 既然封装的视图无法实现cell高度自适应，我就尝试另外的思路方法，既然是cell自适应，那就索性封装一个标签cell吧WBTagListViewCell，为了可复用性，也为WBTagListViewCell添加了一些配置属性，如下： 123456789101112131415161718192021222324252627282930313233343536373839/** &lt; 数据源 &gt; */@property (nonatomic, strong) NSArray &lt;WBTagListModel *&gt;*items;/** &lt; 内边距 默认： UIEdgeInsetsMake(15, 15, 15, 15) &gt; */@property (nonatomic, assign) UIEdgeInsets secionInset;/** &lt; 行间距 默认：15 &gt; */@property (nonatomic, assign) CGFloat minimumLineSpacing;/** &lt; item之间距离 默认：10 &gt; */@property (nonatomic, assign) CGFloat minimumInteritemSpacing;/** &lt; 是否允许点击 默认：YES &gt; */@property (nonatomic, assign) BOOL allowSelection;/** &lt; 是否允许多选 默认：NO &gt; */@property (nonatomic, assign) BOOL allowMultipleSelection;/** &lt; 标签高度 默认：28.f &gt; */@property (nonatomic, assign) CGFloat itemHeight;/** &lt; 标签左右间距 默认：10.f &gt; */@property (nonatomic, assign) CGFloat leftRightMargin;/** &lt; 背景图片 &gt; */@property (nonatomic, copy) NSString *bgImageName;/** &lt; 选中背景图片 &gt; */@property (nonatomic, copy) NSString *selectedBgImageName;/** &lt; 标签颜色 默认：浅灰色 &gt; */@property (nonatomic, strong) UIColor *titleColor;/** &lt; 按钮选中颜色 &gt; */@property (nonatomic, strong) UIColor *titleSelectedColor;/** &lt; 标题大小 默认：14pt &gt; */@property (nonatomic, strong) UIFont *font;/** &lt; 边框宽度 默认：0 &gt; */@property (nonatomic, assign) CGFloat borderWidth;/** &lt; 边框颜色 bodoerWidth &gt; 0 设置有效 &gt; */@property (nonatomic, strong) UIColor *borderColor;/** &lt; 选中边框颜色 bodoerWidth &gt; 0 设置有效 &gt; */@property (nonatomic, strong) UIColor *selectedBorderColor;/** &lt; 圆角大小 默认：0 &gt; */@property (nonatomic, assign) CGFloat cornerRadius;/** &lt; 选中的item &gt; */@property (nonatomic, strong) NSMutableArray *selectedItems;@property (nonatomic, weak) id &lt;WBTagListViewCellDelegate&gt; delegate; 关键实现步骤是重写了cell的updateConstraints，在有数据源的时候调用setNeedsUpdateConstraints，关键代码如下： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172- (void)createTagWithData:(NSArray &lt;WBTagListModel *&gt;*)itemsArray &#123; for (UIView *view in self.itemArray) &#123; [view removeFromSuperview]; &#125; [self.itemArray removeAllObjects]; for (NSInteger index = 0; index &lt; itemsArray.count; index ++) &#123; WBTagListItem *item = [WBTagListItem new]; item.title = itemsArray[index].title; item.isSelected = itemsArray[index].isSelected; item.itemTag = index; item.delegate = self; [self.contentView addSubview:item]; [self.itemArray addObject:item]; /** &lt; 默认选中第一个 &gt; */ if (index == 0 &amp;&amp; itemsArray[index].isSelected) &#123; _tempItem = item; [self.selectedItems removeAllObjects]; [self.selectedItems addObject:_tempItem]; &#125; &#125; [self setNeedsUpdateConstraints];&#125;- (void)updateConstraints &#123; [super updateConstraints]; CGFloat maxWidth = self.contentView.bounds.size.width - _secionInset.left - _secionInset.right; __block CGFloat rowWidth = 0; __block BOOL isNeedChangeLine = YES; __block WBTagListItem *lastItem = nil; NSInteger count = self.itemArray.count; [self.itemArray enumerateObjectsUsingBlock:^(WBTagListItem * _Nonnull obj, NSUInteger idx, BOOL * _Nonnull stop) &#123; CGFloat titleWidth = obj.titleWidth; rowWidth += titleWidth + _minimumInteritemSpacing; /** &lt; 是否需要换行 &gt; */ if (rowWidth &gt; maxWidth - 2 * _minimumInteritemSpacing) &#123; isNeedChangeLine = YES; /** &lt; 判断是否超过最大值 &gt; */ if (titleWidth + 2 * _minimumInteritemSpacing &gt; maxWidth) &#123; titleWidth = maxWidth - 2 * _minimumInteritemSpacing; &#125; /** &lt; 换行后重新设置当前行的总宽度 &gt; */ rowWidth = titleWidth + _minimumInteritemSpacing; &#125; [obj mas_makeConstraints:^(MASConstraintMaker *make) &#123; /** &lt; 换行 &gt; */ if (isNeedChangeLine) &#123; if (!lastItem) &#123; make.top.equalTo(self.contentView.mas_top).offset(_secionInset.top); &#125;else &#123; make.top.equalTo(lastItem.mas_bottom).offset(_minimumLineSpacing); &#125; make.left.equalTo(self.contentView.mas_left).offset(_secionInset.left); isNeedChangeLine = NO; &#125;else &#123; make.left.equalTo(lastItem.mas_right).offset(_minimumInteritemSpacing); make.top.equalTo(lastItem.mas_top); &#125; make.height.mas_equalTo(@(_itemHeight)); make.width.mas_equalTo(@(titleWidth)); /** &lt; 最后一个 &gt; */ if (idx == count - 1) &#123; make.bottom.equalTo(self.contentView.mas_bottom).offset(-_secionInset.bottom).priorityMedium(); &#125; &#125;]; lastItem = obj; &#125;];&#125; 最后运行效果也贴一张图吧 封装cell在实现过程中，也遇到一些问题，最开始把约束写到layoutSubviews还是无法自适应高度，再就是要考虑到cell复用的问题。不管怎样最后还是实现了自己想要的效果，由于技术有限，可能我有写的不对不好的地方，还请斧正。最后也贴出自动布局和frame布局标签demo，如果觉得对你有帮助，请Star鼓励下吧。三、GitHub DemoAuto：WBAutoTagListViewDemoFrame：WB_TagsViewDemo 参考 Apple官方文档]]></content>
      <categories>
        <category>iOS</category>
      </categories>
      <tags>
        <tag>iOS</tag>
        <tag>Objective-C</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[item2自动连接SSH]]></title>
    <url>%2F2018%2F07%2F08%2Fitem2%E8%87%AA%E5%8A%A8%E8%BF%9E%E6%8E%A5SSH%2F</url>
    <content type="text"><![CDATA[目录 1、编辑命令脚本2、配置item2 1、编辑命令脚本 2.1.1 打开item2终端，创建脚本文件CentOSAutoLoginSSH（名字可以自定义）文件，保存在一个你指定的文件夹下： 12345//切换文件夹cd [你要保存的文件夹下]//创建文件touch CentOSAutoLoginSSH 2.1.2 编辑CentOSAutoLoginSSH 1vim CentOSAutoLoginSSH 2.1.3 配置CentOSAutoLoginSSH123456789101112131415161718#!/usr/bin/expect -f #搬瓦工控制面板中的SSH Port set port 2121 #默认用户名root set user root #主机地址 set host 172.16.10.71 #密码 set password mima123456 set timeout -1 spawn ssh -p$port $user@$host expect &quot;*assword:*&quot; send &quot;$password\r&quot; interact expect eof :wq 编辑完成之后:wq保存配置信息。 2、配置item2 2.2.1 item2-&gt;Preference-&gt;Profile添加配置文件，操作如下图所示： 2.2.2 测试免密自动登录，选择顶部菜单Profile中的CentOSAutoLoginSSH，这时可能会报错，因为CentOSAutoLoginSSH没有执行权限，需要执行以下命令：1chmod u+x /Users/user/.ssh/CentOSAutoLoginSSH 然后测试，就实现了免密自动登录了。 2.2.3 然后我们就可以查看shadowsocks文件下的配置文件了1cat /etc/shadowsocks/config.json 参考文章 使用iTerm2快捷连接SSH Mac Item2 SSH免密登录Linux 服务器的两种方式]]></content>
      <categories>
        <category>MAC</category>
      </categories>
      <tags>
        <tag>Terminal</tag>
        <tag>item2</tag>
        <tag>SSH</tag>
        <tag>Shadowsocks</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Xcode无线真机调试]]></title>
    <url>%2F2018%2F07%2F08%2FXcode%E6%97%A0%E7%BA%BF%E7%9C%9F%E6%9C%BA%E8%B0%83%E8%AF%95%2F</url>
    <content type="text"><![CDATA[一、硬性条件 硬件环境MAC、Xcode9 系统Mac OSX 10.12.5、iOS11二、具体操作步骤 将手机用数据线连接到MAC，Xcode-&gt;Devices And Simulators-&gt;Devices中勾选connect via network 点击手机图标，鼠标右键，配置局域网Connect via IP Address 配置完成之后手机图标会有一个地球标志，带表已经连接成功 最后运行项目，就可以无线调试啦]]></content>
      <categories>
        <category>iOS</category>
      </categories>
      <tags>
        <tag>iOS</tag>
        <tag>LLDB</tag>
        <tag>Xcode</tag>
        <tag>iPhone</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[iOS定位处理约束冲突]]></title>
    <url>%2F2018%2F07%2F08%2FiOS%E5%AE%9A%E4%BD%8D%E5%A4%84%E7%90%86%E7%BA%A6%E6%9D%9F%E5%86%B2%E7%AA%81%2F</url>
    <content type="text"><![CDATA[一、添加UIViewAlertForUnsatisfiableConstraints断点 添加Symbolic Breakpoints 编辑断点symbol填入 1UIViewAlertForUnsatisfiableConstraints 添加控制台打印action 1po [[UIWindow keyWindow] _autolayoutTrace] 二、定位约束警告冲突 添加好断点之后，当界面有约束冲突，就会触发断点，控制打印如下： 1234567891011121314151617[LayoutConstraints] Unable to simultaneously satisfy constraints. Probably at least one of the constraints in the following list is one you don&apos;t want. Try this: (1) look at each constraint and try to figure out which you don&apos;t expect; (2) find the code that added the unwanted constraint or constraints and fix it. ( &lt;MASLayoutConstraint:0x604000ab04a0 UIButton:0x7faf99f04010.width == 40&gt;, &lt;MASLayoutConstraint:0x604000ab66e0 UIButton:0x7faf99f04010.left == CYBButtonView:0x7faf99f83360.left + 10&gt;, &lt;MASLayoutConstraint:0x604000abaa00 UILabel:0x7faf99f5f8e0.left == UIButton:0x7faf99f04010.right&gt;, &lt;MASLayoutConstraint:0x604000abd580 UILabel:0x7faf99f5f8e0.left == CYBButtonView:0x7faf99f83360.left + 15&gt;,)Will attempt to recover by breaking constraint &lt;MASLayoutConstraint:0x604000ab04a0 UIButton:0x7faf99f04010.width == 40&gt;Make a symbolic breakpoint at UIViewAlertForUnsatisfiableConstraints to catch this in the debugger.The methods in the UIConstraintBasedLayoutDebugging category on UIView listed in &lt;UIKit/UIView.h&gt; may also be helpful. 根据提示，找到约束有问题的控件地址0x7faf99f04010，然后全局搜索，就能找到具体是哪个控件 如果控制台打印不够直观看出是哪个控件约束有问题，我们可以通过 LLDB命令工具chisel定位寻找。 三、解决冲突通常解决冲突的方法有： 删除多余约束 修改约束优先级 参考1、How to trap on UIViewAlertForUnsatisfiableConstraints?]]></content>
      <categories>
        <category>iOS</category>
      </categories>
      <tags>
        <tag>iOS</tag>
        <tag>Objective-C</tag>
        <tag>Chisel</tag>
        <tag>Swift</tag>
        <tag>Xcode</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Chisel-LLDB调试助手]]></title>
    <url>%2F2018%2F07%2F08%2FChisel-LLDB%E8%B0%83%E8%AF%95%E5%8A%A9%E6%89%8B%2F</url>
    <content type="text"><![CDATA[Chisel is a collection of LLDB commands to assist debugging iOS apps. 目录 GitHub地址 安装 常用常用Commands 推荐博客 一、GitHub地址Chisel 二、安装 未安装Homrebrew，先安装Homrebrew参考MAC上Homebrew常用命令 安装Chisel 1brew install chisel 如果没有创建.lldbinit文件，则在终端创建文件 12touch .lldbinit //open .lldbinit 编辑.lldbinit文件，并添加以下内容command script import /usr/local/opt/chisel/libexec/fblldb.py 123456vim .lldbinit//添加以下内容# ~/.lldbinit...command script import /path/to/fblldb.py 最后wq保存，重启Xcode，就可以使用Chisel了。 三、常用Commands 命令 命令描述 iOS OS X pviews Print the recursive view description for the key window. YES YES pvc Print the recursive view controller description for the key window. YES NO visualize Open a UIImage, CGImageRef, UIView, CALayer, NSData (of an image), UIColor, CIColor, or CGColorRef in Preview.app on your Mac. YES NO fv Find a view in the hierarchy whose class name matches the provided regex. YES NO fvc Find a view controller in the hierarchy whose class name matches the provided regex. YES NO show/hide Show or hide the given view or layer. You don’t even have to continue the process to see the changes! YES YES mask/unmask Overlay a view or layer with a transparent rectangle to visualize where it is. YES NO border/unborder Add a border to a view or layer to visualize where it is. YES YES caflush Flush the render server (equivalent to a “repaint” if no animations are in-flight). YES YES bmessage Set a symbolic breakpoint on the method of a class or the method of an instance without worrying which class in the hierarchy actually implements the method. YES YES wivar Set a watchpoint on an instance variable of an object. YES YES presponder Print the responder chain starting from the given object. YES YES … … … … 就介绍这么多了，现在自己用到的也并不算太多，做下记录，方便自己以后查阅，有兴趣的朋友可以自行了解其用法吧。 推荐博客1、LLdb篇2教你使用faceBook的chisel来提高调试效率2、Chisel-LLDB命令插件，让调试更Easy]]></content>
      <categories>
        <category>iOS</category>
      </categories>
      <tags>
        <tag>iOS</tag>
        <tag>LLDB</tag>
        <tag>Terminal</tag>
        <tag>Chisel</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[iOS优秀OC开源库整理，了解一下]]></title>
    <url>%2F2018%2F07%2F08%2FiOS%E4%BC%98%E7%A7%80%E4%B8%89%E6%96%B9%E5%BC%80%E6%BA%90%E5%BA%93%E6%95%B4%E7%90%86%2F</url>
    <content type="text"><![CDATA[前言 自己从事iOS开发工作接近两年左右的时间了，在自己工作之余，收集整理了一些优秀的三方开源框架，自己整理的这些三方开源库涵盖了iOS开发面很多方面的知识。非常感谢这些开源库的作者们，正是因为这些库，提高了我们的开发效率，同样也是我们学习进步的源泉。现将这个整理工程文件分享出来，希望能给需要的朋友一些帮助，同时也自己也做下收集记录。 Github：WBCollectOCThirdLib Objective-C三方开源库表格侧滑菜单 开源库名 简介 推荐指数 MGSwipeTableCell 类似系统侧滑菜单 ⭐️⭐️⭐️⭐️ SWTableViewCell 类似系统侧滑菜单 ⭐️⭐️⭐️⭐️ ZJSwipeTableView 类似系统侧滑菜单 ⭐️⭐️⭐️⭐️ 表格高度缓存库 开源库名 简介 推荐指数 FDTemplateLayoutCell AutoLayout自动布局高度缓存库，提高滑动流畅性 ⭐️⭐️⭐️⭐️⭐️ HYBMasonryAutoCellHeight cell高度缓存 ⭐️⭐️⭐️⭐️ UITableViewDynamicLayoutCacheHeight 高性能的自动计算采用 Autolayout 布局的 UITableViewCell 和 UITableViewHeaderFooterView 的高度，内部自动管理高度缓存 ⭐️⭐️⭐️⭐️ 表格刷新控件 开源库名 简介 推荐指数 MJRefresh 国内著名iOS刷新框架 ⭐️⭐️⭐️⭐️⭐️ KafkaRefresh 丰富的iOS刷新样式 ⭐️⭐️⭐️⭐️ CBStoreHouseRefreshControl Fully customizable pull-to-refresh control inspired by Storehouse iOS app ⭐️⭐️⭐️⭐️ 弹出菜单（类似微信弹出菜单） 开源库名 简介 推荐指数 FTPopOverMenu ⭐️⭐️⭐️⭐️ kxmenu ⭐️⭐️⭐️ CMPopTipView 一个泡泡风格的提示框开源控件, 继承自UIView ⭐️⭐️⭐️⭐️ PopMenuTableView ⭐️⭐️⭐️ FFPopup 快速集成自定义弹出视图，可配置常用弹出动画样式 ⭐️⭐️⭐️⭐️ 导航栏 开源库名 简介 推荐指数 FDFullscreenPopGesture 一个优秀的全屏侧滑返回手势库 ⭐️⭐️⭐️⭐️ KMNavigationBarTransition ⭐️⭐️⭐️⭐️ RTRootNavigationController ⭐️⭐️⭐️⭐️ WRNavigationBar 导航栏渐变库 ⭐️⭐️⭐️⭐️ ScreenShotBack 类似斗鱼手势返回景深效果 ⭐️⭐️⭐️⭐️ TLYShyNavBar ⭐️⭐️⭐️ YPNavigationBarTransition A custom UINavigationBar for smooth switching between various states, including bar style, bar tint color, background image, background alpha, bar hidden, title text attributes, tint color, shadow hidden… ⭐️⭐️⭐️⭐️ HBDNavigationBar ⭐️⭐️⭐️⭐️ 动画 开源库名 简介 推荐指数 lottie-ios ⭐️⭐️⭐️⭐️⭐️ pop FaceBook开源动画框架 ⭐️⭐️⭐️⭐️⭐️ LSAnimator 优雅基础动画链式调用 ⭐️⭐️⭐️⭐️ VCTransitionsLibrary 多种转场动画集合库 ⭐️⭐️⭐️⭐️ UICountingLabel 数字动画 ⭐️⭐️⭐️⭐️ 分段控件 开源库名 简介 推荐指数 HMSegmentedControl ⭐️⭐️⭐️⭐️ JXCategoryView 腾讯新闻、今日头条、QQ音乐、网易云音乐、京东、爱奇艺、腾讯视频、淘宝、天猫、简书、微博等所有主流APP分类切换滚动视图 ⭐️⭐️⭐️⭐️⭐️ SGPagingView QQ、淘宝、微博、腾讯、网易新闻、今日头条等标题滚动视图 ⭐️⭐️⭐️⭐️ 富文本编辑 开源库名 简介 推荐指数 ZSSRichTextEditor 富文本编辑器 ⭐️⭐️⭐️⭐️ 弹幕 开源库名 简介 推荐指数 HJDanmakuDemo 弹幕库 ⭐️⭐️⭐️ BarrageRenderer 一个 iOS 上的弹幕渲染库 ⭐️⭐️⭐️⭐️ 滚动视图 开源库名 简介 推荐指数 SwipeView 封装类似滚动视图分页 ⭐️⭐️⭐️⭐️ 滚动视图悬浮效果 开源库名 简介 推荐指数 HJTabViewController ⭐️⭐️⭐️ LTScrollView ScrollView嵌套ScrolloView（UITableView 、UICollectionView）解决方案， 支持OC / Swift ⭐️⭐️⭐️ GKPageScrollView iOS类似微博、抖音、网易云等个人详情页滑动嵌套效果 ⭐️⭐️⭐️ JXPagingView 类似微博主页、简书主页等效果。多页面嵌套，既可以上下滑动，也可以左右滑动切换页面。支持HeaderView悬浮、支持下拉刷新、上拉加载更多。 ⭐️⭐️⭐️⭐️ SwipeTableView 类似半糖、美丽说主页与QQ音乐歌曲列表布局效果，实现不同菜单的左右滑动切换，同时支持类似tableview的顶部工具栏悬停 ⭐️⭐️⭐️⭐️ 红点提示 开源库名 简介 推荐指数 JSBadgeView ⭐️⭐️⭐️ WZLBadge ⭐️⭐️⭐️⭐️ 键盘 开源库名 简介 推荐指数 IQKeyboardManager 一个强大键盘管理库，推荐项目集成使用 ⭐️⭐️⭐️⭐️⭐️ MMNumberKeyboard ⭐️⭐️⭐️ TPKeyboardAvoiding 键盘处理库 ⭐️⭐️⭐️⭐️ TLKeyboard 仿微信键盘封装 ⭐️⭐️ 界面布局 开源库名 简介 推荐指数 FlexLib ⭐️⭐️⭐️ Masonry iOS原生布局AutoLayout封装 ⭐️⭐️⭐️⭐️⭐️ SDAutoLayout ⭐️⭐️⭐️⭐️ WHC_AutoLayoutKit ⭐️⭐️⭐️ MyLinearLayout MyLayout是一套iOS界面视图布局框架。MyLayout的内核是基于对UIView的layoutSubviews方法的重载以及对子视图的bounds和center属性的设置而实现的。MyLayout功能强大而且简单易用，它集成了:iOS Autolayout和SizeClass、android的5大布局体系、HTML/CSS的浮动定位技术以及flex-box和bootstrap框架等市面上主流的平台的界面布局功能，同时提供了一套非常简单和完备的多屏幕尺寸适配的解决方案 ⭐️⭐️⭐️⭐️⭐️ Graver Graver 是一款高效的 UI 渲染框架，它以更低的资源消耗来构建十分流畅的 UI 界面 ⭐️⭐️⭐️⭐️ yoga Yoga is a cross-platform layout engine which implements Flexbox. ⭐️⭐️⭐️⭐️ 进度指示器 开源库名 简介 推荐指数 DACircularProgress ⭐️⭐️⭐️ SDProgressView ⭐️⭐️⭐️ KVO 开源库名 简介 推荐指数 KVOController ⭐️⭐️⭐️⭐️ 控制器切换 开源库名 简介 推荐指数 DWQListOfDifferentOrderStatus ⭐️ HYPageView ⭐️ SGPagingView ⭐️⭐️⭐️⭐️ WMPageController ⭐️⭐️⭐️⭐️ VTMagic VTMagic is a page container library for iOS. ⭐️⭐️⭐️⭐️ ZJScrollPageView ⭐️⭐️⭐️ 数据存储 开源库名 简介 推荐指数 fmdb A Cocoa / Objective-C wrapper around SQLite ⭐️⭐️⭐️⭐️⭐️ BGFMDB ⭐️⭐️⭐️⭐️ JKDBModel ⭐️⭐️⭐️⭐️ JRDB ⭐️⭐️⭐️ LKDBHelper-SQLite-ORM ⭐️⭐️⭐️ MMKV An efficient, small mobile key-value storage framework developed by WeChat. Works on iOS, Android, macOS and Windows. ⭐️⭐️⭐️⭐️⭐️ realm-cocoa Realm is a mobile database: a replacement for Core Data &amp; SQLite ⭐️⭐️⭐️⭐️ 数据转模型 开源库名 简介 推荐指数 MJExtension ⭐️⭐️⭐️⭐️ YYModel ⭐️⭐️⭐️⭐️ Mantle ⭐️⭐️⭐️⭐️ jsonmodel ⭐️⭐️⭐️⭐️ GDataXML-HTML ⭐️⭐️⭐️ 搜索 开源库名 简介 推荐指数 PYSearch ⭐️⭐️⭐️⭐️ 提示框架 开源库名 简介 推荐指数 MBProgressHUD ⭐️⭐️⭐️⭐️ SVProgressHUD ⭐️⭐️⭐️⭐️ JGProgressHUD ⭐️⭐️⭐️⭐️ KSToastView ⭐️⭐️⭐️ MMPopupView ⭐️⭐️⭐️ SCLAlertView ⭐️⭐️⭐️⭐️ Toast ⭐️⭐️⭐️⭐️ JXTAlertManager ⭐️⭐️⭐️⭐️ SPAlertController 提醒对话框，风格和微信原生几乎零误差 ⭐️⭐️⭐️⭐️ FTIndicator A light wight UI package contains local notification, progress HUD, toast, with blur effect, elegant API and themes support. ⭐️⭐️⭐️ 图表绘制 开源库名 简介 推荐指数 AAChartKit ⭐️⭐️⭐️ JHChart ⭐️⭐️⭐️ ZFChart ⭐️⭐️⭐️ DVPieChart ⭐️⭐️ DVLineChart ⭐️⭐️ AxcDrawPath_Tool AxcAEKit系列拆分出来的一个贝塞尔曲线绘制工具，以科技风为主，动画为辅 ⭐️⭐️⭐️ 图片缓存框架 开源库名 简介 推荐指数 SDWebImage ⭐️⭐️⭐️⭐️⭐️ FLAnimatedImage ⭐️⭐️⭐️⭐️⭐️ iOS-WebP ⭐️⭐️⭐️ YYWebImage ⭐️⭐️⭐️⭐️⭐️ XHWebImageAutoSize ⭐️⭐️⭐️ 图片浏览 开源库名 简介 推荐指数 MWPhotoBrowser ⭐️⭐️⭐️⭐️ PYPhotoBrowser ⭐️⭐️⭐️⭐️ SDPhotoBrowser ⭐️⭐️⭐️ STPhotoBrowser ⭐️⭐️⭐️ KSPhotoBrowser ⭐️⭐️⭐️ GKPhotoBrowser ⭐️⭐️⭐️⭐️ YBImageBrowser iOS image browser / iOS 图片浏览器 (支持视频) ⭐️⭐️⭐️⭐️ 图片、文字轮播 开源库名 简介 推荐指数 SDCycleScrollView ⭐️⭐️⭐️⭐️ HYBLoopScrollView ⭐️⭐️⭐️ TXScrollLabelView ⭐️⭐️⭐️⭐️ DDGBannerScrollView 1、无限图片轮播功能 2、每个图片的相对偏移量，方便开发者自己封装东西 3、pageControl的几个动画，（旋转，跳跃等慢慢会增加） ⭐️⭐️⭐️ SGAdvertScrollView ⭐️⭐️⭐️ PSCarouselView A drop-in carousel view. Most of Apps put it in their first screen ⭐️⭐️⭐️ RollingNotice 淘宝、口碑、京东、美团、天猫等等一切滚动广告 Roll ⭐️⭐️⭐️⭐️ TYCyclePagerView a simple and usefull cycle pager view ,and auto scroll banner view(轮播图) ,include pageControl for iOS,support Objective-C and swift ⭐️⭐️⭐️⭐️ 图片拾取 开源库名 简介 推荐指数 TZImagePickerController ⭐️⭐️⭐️⭐️ CTAssetsPickerController ⭐️⭐️⭐️ DNImagePicker ⭐️⭐️⭐️ HXWeiboPhotoPicker ⭐️⭐️ 全景图展示 开源库名 简介 推荐指数 HelloPanoramaGL ⭐️⭐️⭐️ gvr-ios-sdk Google VR SDK for iOS ⭐️⭐️⭐️⭐️ MD360Player4iOS It is a lite library to render 360 degree panorama video for iOS. VR Player. ⭐️⭐️⭐️⭐️ 网络请求 开源库名 简介 推荐指数 AFNetworking ⭐️⭐️⭐️⭐️⭐️ YTKNetwork ⭐️⭐️⭐️⭐️ PPNetworkHelper ⭐️⭐️⭐️⭐️ HYBNetworking ⭐️⭐️⭐️ SJNetwork ⭐️⭐️⭐️ YBNetwork 基于 AFNetworking 网络中间层，注重性能，设计简洁，易于拓展 ⭐️⭐️⭐️ 网络状态监测 开源库名 简介 推荐指数 Reachability 网络状态监测 ⭐️⭐️⭐️⭐️ 文件下载 开源库名 简介 推荐指数 TWRDownloadManager ⭐️⭐️⭐️ ZFDownload ⭐️⭐️⭐️ Carousel效果 开源库名 简介 推荐指数 iCarousel ⭐️⭐️⭐️⭐️⭐️ NewPagedFlowView ⭐️⭐️⭐️ HJCarouselDemo ⭐️⭐️⭐️ TXCarouselView 仿新浪新闻首页重力卡片式轮播 ⭐️⭐️ 音视频 开源库名 简介 推荐指数 ijkplayer ⭐️⭐️⭐️⭐️⭐️ ZFPlayer ⭐️⭐️⭐️⭐️ WMPlayer ⭐️⭐️⭐️⭐️ TBPlayer ⭐️⭐️⭐️ TTAVPlayer ⭐️⭐️ SJVideoPlayer Video Player. Support cocoapods &amp; Generate GIF &amp; Export &amp; Localization &amp; Play in View(UIView ⭐️⭐️⭐️⭐️ JPVideoPlayer Automatic play video &amp; cache video data in UITableView like Weibo and Douyin. ⭐️⭐️⭐️ 占位图 开源库名 简介 推荐指数 DZNEmptyDataSet ⭐️⭐️⭐️⭐️⭐️ LYEmptyView ⭐️⭐️⭐️⭐️ Somo Somo is a iOS Skeleton-style animation library that’s simple enough,and in objective-c ⭐️⭐️⭐️ TABAnimated ⭐️⭐️⭐️⭐️ C语言扩展库 开源库名 简介 推荐指数 libextobjc ⭐️⭐️⭐️⭐️ Socket编程 开源库名 简介 推荐指数 CocoaAsyncSocket ⭐️⭐️⭐️⭐️ SocketRocket ⭐️⭐️⭐️⭐️ socket.io ⭐️⭐️⭐️⭐️ MQTTKit ⭐️⭐️⭐️ 内存泄露检测工具 开源库名 简介 推荐指数 MLeaksFinder ⭐️⭐️⭐️⭐️ FBRetainCycleDetector ⭐️⭐️⭐️⭐️ YYKit 开源库名 简介 推荐指数 YYKit A collection of iOS components. ⭐️⭐️⭐️⭐️⭐️ LOG工具 开源库名 简介 推荐指数 CocoaLumberjack ⭐️⭐️⭐️⭐️⭐️ 输入框占位符 开源库名 简介 推荐指数 UITextView-Placeholder 一个实用的设置UITextView占位文字分类 ⭐️⭐️⭐️⭐️ RPFloatingPlaceholders ⭐️⭐️⭐️⭐️ SZTextView ⭐️⭐️⭐️ 分类 开源库名 简介 推荐指数 JKCategories ⭐️⭐️⭐️⭐️ 图像处理 开源库名 简介 推荐指数 GPUImage ⭐️⭐️⭐️⭐️⭐️ TOCropViewController A view controller for iOS that allows users to crop portions of UIImage objects ⭐️⭐️⭐️⭐️ iOS开发知识集合 开源库名 简介 推荐指数 iOS-Tips ⭐️⭐️⭐️⭐️ iOS-InterviewQuestion-collection ⭐️⭐️⭐️⭐️ 安全防护 开源库名 简介 推荐指数 LSSafeProtector 强大的防止crash框架，不改变原代码支持KVO自释放，可以检测到dealloc时未释放的kvo，等19种crash ⭐️⭐️⭐️ JJException 常用crash防护框架，配置简便，推荐集成使用 ⭐️⭐️⭐️⭐️ XXShield It’s a library can avoid some crash in iOS project written by Objective-C ⭐️⭐️⭐️⭐️ NSObjectSafe Swizzle commonly used function of Foundation container to prevent nil crash ⭐️⭐️⭐️ 表单 开源库名 简介 推荐指数 XLForm ⭐️⭐️⭐️⭐️ 富文本相关 开源库名 简介 推荐指数 SJAttributesFactory ⭐️⭐️⭐️ 截屏 开源库名 简介 推荐指数 TYSnapshotScroll 一句代码保存截图，将 UIScrollView UITableView UICollectionView UIWebView WKWebView 网页 保存 为 长图 查看 ⭐️⭐️⭐️⭐️ 界面动态化方案 开源库名 简介 推荐指数 Tangram-iOS Tangram is a modular UI solution for building native page dynamically, including Tangram for Android, Tangram for iOS and even backend CMS. This project provides the sdk on iOS platform. ⭐️⭐️⭐️ LazyScrollView An iOS ScrollView to resolve the problem of reusability in views. ⭐️⭐️⭐️ 框架搭建 开源库名 简介 推荐指数 AxcAE_TabBar AxcAE_TabBar，特效TabBar，以开放为封装核心的TabBar组件，尽量将属性、API等参数全部开放给使用者，能够很方便快速使用的一个TabBar选项卡组件 ⭐️⭐️⭐️ CYLTabBarController 【中国特色 TabBar】一行代码实现 Lottie 动画TabBar，支持中间带+号的TabBar样式，自带红点角标，支持动态刷新。 ⭐️⭐️⭐️⭐️⭐️ 瀑布流 开源库名 简介 推荐指数 TTGTagCollectionView 标签流显示控件，同时支持文字或自定义View ⭐️⭐️⭐️ IGListKit A data-driven UICollectionView framework for building fast and flexible lists. ⭐️⭐️⭐️⭐️⭐️ BMLongPressDragCellCollectionView 🎉 让你轻松实现类似支付宝的拖拽重排功能, 支持各种自定义操作。 ⭐️⭐️⭐️⭐️ 启动屏 开源库名 简介 推荐指数 LSLaunchAD 一行代码实现启动广告页 ⭐️⭐️ XHLaunchAd 开屏广告、启动广告解决方案-支持静态/动态图片广告,mp4视频广告,全屏/半屏广告、兼容iPhone/iPad. ⭐️⭐️⭐️⭐️⭐️ LBLaunchImageAd iOS开发轻量级启动广告，动态获取网络启动图片，具有渐变的启动动画，支持半屏和全屏，类似百度ssp广告和广点通的广告。支持广告点击等，集成非常的方便 ⭐️⭐️⭐️⭐️ 筛选 开源库名 简介 推荐指数 GHDropMenu 仿京东/美团电商筛选菜单 电商筛选菜单 电商通用筛选菜单 ⭐️⭐️⭐️ 数据加密解密 开源库名 简介 推荐指数 MJCodeObfuscation 一个用于代码混淆和字符串加密的Mac小Demo ⭐️⭐️⭐️ CocoaSecurity Encrypt/Decrypt: AES. Hash: MD5, SHA(SHA1, SHA224, SHA256, SHA384, SHA512). Encode/Decode: Base64, Hex. ⭐️⭐️⭐️ Encryptions 多种加密解密 ⭐️⭐️⭐️ 索引&amp;分组 开源库名 简介 推荐指数 SCIndexView SCIndexView provide a index view like Wechat ⭐️⭐️⭐️ 网页进度条 开源库名 简介 推荐指数 AXWebViewController AXWebViewController is a webViewController to browse web content inside applications. It’s a lightweight controller on iOS platform based on WKWebView (UIWebView would be the base Kit under iOS 8.0). ⭐️⭐️⭐️ RxWebViewController ⭐️⭐️⭐️⭐️ 响应式编程 开源库名 简介 推荐指数 ReactiveObjC The 2.x ReactiveCocoa Objective-C API: Streams of values over time ⭐️⭐️⭐️⭐️⭐️ EasyReact EasyReact 是一个简单易用的响应式编程库 ⭐️⭐️⭐️⭐️ 协程编程 开源库名 简介 推荐指数 coobjc coobjc provides coroutine support for Objective-C and Swift. We added await method、generator and actor model like C#、Javascript and Kotlin. For convenience, we added coroutine categories for some Foundation and UIKit API in cokit framework like NSFileManager, JSON, NSData, UIImage etc. We also add tuple support in coobjc. ⭐️⭐️⭐️⭐️ PromiseKit Promises simplify asynchronous programming, freeing you up to focus on the more important things. ⭐️⭐️⭐️⭐️⭐️ 学习框架推荐 开源库名 简介 推荐指数 TLChat 高仿微信 ⭐️⭐️⭐️ VVeboTableViewDemo VVebo剥离的TableView绘制 ⭐️⭐️⭐️⭐️ iOSProject iOS project of collected some demos for iOS App, use Objective-C ⭐️⭐️⭐️⭐️ 高仿微信 开源库名 简介 推荐指数 CTMediator The mediator with no regist process to split your iOS Project into multiple project. ⭐️⭐️⭐️⭐️ JLRoutes URL routing library for iOS with a simple block-based API ⭐️⭐️⭐️⭐️ MGJRouter 一个高效/灵活的 iOS URL Router ⭐️⭐️⭐️⭐️ Hook 开源库名 简介 推荐指数 Aspects Delightful, simple library for aspect oriented programming in Objective-C and Swift ⭐️⭐️⭐️⭐️ fishhook A library that enables dynamically rebinding symbols in Mach-O binaries running on iOS. ⭐️⭐️⭐️⭐️ TrampolineHook A solution for centralized method redirection ⭐️⭐️⭐️⭐️ Stinger Stinger is a high-efficiency library with great compatibility, for aop in Objective-C, using libffi instead of Objective-C message forwarding. ⭐️⭐️⭐️⭐️ QMUI 开源库名 简介 推荐指数 QMUI_iOS QMUI iOS——致力于提高项目 UI 开发效率的解决方案 ⭐️⭐️⭐️⭐️ Web网页H5 开源库名 简介 推荐指数 VasSonic VasSonic is a lightweight and high-performance Hybrid framework developed by tencent VAS team, which is intended to speed up the first screen of websites working on Android and iOS platform. ⭐️⭐️⭐️⭐️ WebViewJavascriptBridge An iOS/OSX bridge for sending messages between Obj-C and JavaScript in UIWebViews/WebViews ⭐️⭐️⭐️⭐️ 贝塞尔曲线 开源库名 简介 推荐指数 UberSignature Provides an iOS view controller allowing a user to draw their signature with their finger in a realistic style. ⭐️⭐️⭐️ 工具 开源库名 简介 推荐指数 WHC_DataModelFactory Mac上iOS开发辅助工具，快速把json/xml数据转换生成对应模型类属性，省去麻烦手动创建，提高开发效率 ⭐️⭐️⭐️⭐️ iOS-getClientInfo 📱📲iOS中获取各种设备信息🆔的方法总结(iPhone XS Max 已更新) ⭐️⭐️⭐️⭐️ 结语 上面这些三方开源库按照自己的理解分类整理了一遍，其中OC语言库居多，自己现在也是基于OC开发，Swift收集的相对较少，这些库也是自己现在所了解到的，当然还有很多优秀的三方库自己也未发现和接触，我以后会不断在这篇博客中更新优秀的三方开源库。]]></content>
      <categories>
        <category>iOS</category>
      </categories>
      <tags>
        <tag>iOS</tag>
        <tag>Objective-C</tag>
        <tag>GitHub</tag>
        <tag>Swift</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[GitPages+Hexo搭建个人博客]]></title>
    <url>%2F2018%2F07%2F07%2FGitPages-Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%2F</url>
    <content type="text"><![CDATA[如果你想从零开始搭建一个属于自己的静态博客网站，可以参考下面三篇博文，这三篇博文是记录我从零开始搭建自己静态博客的全过程，希望能给需要的朋友一些参考： GitPages+Hexo搭建个人博客 Hexo相关配置和使用 Hexo-NexT配置超炫网页效果 最终成果： blogwenbo.com 一、GitHub创建项目 1.1 使用GitPages搭建自己静态博客前提要注册申请GitHub账号。GitHub相关配置可参考这篇文章：MAC上Git安装与GitHub基本使用。 1.2 GitHub上新创建一个wenmobo.github.io仓库，wenmobo是我的账号名，这里替换成你自己的就可以了。项目格式名称为[用户名].github.io，如下：1username.github.io 创建成功之后如下： 1.3 在桌面新建一个文件夹MyBlog，cd到该文件夹，将项目克隆到本地：1git clone git@github.com:wenmobo/wenmobo.github.io.git 二、安装Node.js 2.1 Node.js支持用HomeBrew安装，首先要安装Homebrew，Homebrew安装可查看这篇文章：MAC上Homebrew常用命令整理 2.2 Homebrew安装好之后，用Homebrew安装Node.js，终端输入：1brew node 三、安装hexo 3.1 安装hexo，终端输入： 1npm install -g hexo-cli 3.2 在本地仓库MyBlog新建文件夹Blog，然后在终端cd [Blog文件夹路径]，执行以下命令初始化博客： 123456hexo init//或者hexo init &lt;folder&gt;cd &lt;folder&gt;npm instal 成功之后，目录文件如下：12345678.├── _config.yml├── package.json├── scaffolds├── source| ├── _drafts| └── _posts└── themes 3.3 查看本地效果，终端输入：1hexo s 终端输出：123WMBdeMacBook-Pro:Hexo WENBO$ hexo sINFO Start processingINFO Hexo is running at http://localhost:4000/. Press Ctrl+C to stop. 将http://localhost:4000/.拷贝到Chome浏览器，查看效果，如下图所示： 四、总结 GitHubPages+Hexo搭建静态博客的准备工作到这里都完成了，下面一篇文章：Hexo相关配置和使用会介绍Hexo相关配置。 五、参考文章1、GithubPages教程 在GithubPages上搭建个人主页2、在Github上使用Hexo搭建个人博客3、如何使用hexo搭建个人博客（Mac OS系统，windows仅作参考）4、Hexo博客主题推荐]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>GitHub</tag>
        <tag>Hexo</tag>
        <tag>GitPages</tag>
      </tags>
  </entry>
</search>
