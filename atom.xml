<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Mr.Wen</title>
  
  <subtitle>To strive, to seek, to find, and not to yield</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://blogwenbo.com/"/>
  <updated>2021-09-23T13:47:34.184Z</updated>
  <id>http://blogwenbo.com/</id>
  
  <author>
    <name>Mr.Wen</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>iOS15适配指南</title>
    <link href="http://blogwenbo.com/2021/09/02/iOS15%E9%80%82%E9%85%8D%E6%8C%87%E5%8D%97/"/>
    <id>http://blogwenbo.com/2021/09/02/iOS15适配指南/</id>
    <published>2021-09-02T14:51:29.000Z</published>
    <updated>2021-09-23T13:47:34.184Z</updated>
    
    <content type="html"><![CDATA[<p class="description"></p><p><img src="https://" alt="" style="width:100%"></p><a id="more"></a><h3 id="UITableView-Group样式多出间距处理"><a href="#UITableView-Group样式多出间距处理" class="headerlink" title="UITableView Group样式多出间距处理"></a>UITableView Group样式多出间距处理</h3><p>项目部分界面会有这个问题，解决方案如下</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tableView.tableHeaderView = <span class="type">UIView</span>.<span class="keyword">init</span>(frame: <span class="type">CGRect</span>(x: <span class="number">0</span>, y: <span class="number">0</span>, width: <span class="type">UIScreen</span>.main.bounds.size.width, height: <span class="type">CGFloat</span>(<span class="type">Float</span>.leastNormalMagnitude)))</span><br></pre></td></tr></table></figure><h3 id="UITableView新增API导致顶部多出间距"><a href="#UITableView新增API导致顶部多出间距" class="headerlink" title="UITableView新增API导致顶部多出间距"></a>UITableView新增API导致顶部多出间距</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// Padding above each section header. The default value is `UITableViewAutomaticDimension`.</span></span><br><span class="line">    <span class="meta">@available</span>(iOS <span class="number">15.0</span>, *)</span><br><span class="line">    <span class="keyword">open</span> <span class="keyword">var</span> sectionHeaderTopPadding: <span class="type">CGFloat</span></span><br></pre></td></tr></table></figure><p>解决方法，直接设置成0即可</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tableView.sectionHeaderTopPadding = <span class="number">0</span>;</span><br></pre></td></tr></table></figure><h3 id="原生导航栏透明"><a href="#原生导航栏透明" class="headerlink" title="原生导航栏透明"></a>原生导航栏透明</h3><p>在真机iOS beta7系统上，项目导航栏默认透明</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">bar.barTintColor = self.navigationController.navigationBar.barTintColor;</span><br><span class="line">    [bar setBackgroundImage:[self.navigationController.navigationBar backgroundImageForBarMetrics:UIBarMetricsDefault] forBarMetrics:UIBarMetricsDefault];</span><br><span class="line">    bar.shadowImage = self.navigationController.navigationBar.shadowImage;</span><br></pre></td></tr></table></figure><p>需用到iOS13相关API进行适配</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">#ifdef __IPHONE_15_0</span><br><span class="line">    if (@available(iOS 15.0, *)) &#123;</span><br><span class="line">        self.km_transitionBarAppearance.backgroundColor = bar.barTintColor;</span><br><span class="line">        UIImage *backgroundImage = [bar backgroundImageForBarMetrics:UIBarMetricsDefault];</span><br><span class="line">        self.km_transitionBarAppearance.backgroundImage = backgroundImage;</span><br><span class="line">    </span><br><span class="line">        UIImage *shadowImage = bar.shadowImage;</span><br><span class="line">        if (shadowImage &amp;&amp; shadowImage.size.width &lt;= 0 &amp;&amp; shadowImage.size.height &lt;= 0) &#123;</span><br><span class="line">            shadowImage = nil;</span><br><span class="line">            self.km_transitionBarAppearance.shadowColor = [UIColor clearColor];</span><br><span class="line">        &#125;</span><br><span class="line">        self.km_transitionBarAppearance.shadowImage = shadowImage;</span><br><span class="line">        if (bar.titleTextAttributes) &#123;</span><br><span class="line">            self.km_transitionBarAppearance.titleTextAttributes = bar.titleTextAttributes;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        self.navigationController.navigationBar.scrollEdgeAppearance = self.km_transitionBarAppearance;</span><br><span class="line">        self.navigationController.navigationBar.standardAppearance = self.km_transitionBarAppearance;</span><br><span class="line">    &#125;</span><br><span class="line">#endif</span><br></pre></td></tr></table></figure><h3 id="KMNavigationBarTransition导航栏转场动画库样式问题"><a href="#KMNavigationBarTransition导航栏转场动画库样式问题" class="headerlink" title="KMNavigationBarTransition导航栏转场动画库样式问题"></a>KMNavigationBarTransition导航栏转场动画库样式问题</h3><p>在真机iOS beta7系统上，页面跳转转场动画会有异常现象，也需进行适配，我对仓库进行了fork，修改了部分代码，仅供参考：</p><p><a href="https://github.com/GKWenBo/KMNavigationBarTransition" target="_blank" rel="noopener">https://github.com/GKWenBo/KMNavigationBarTransition</a></p><p>同理，如果用到<a href="https://github.com/Tencent/QMUI_iOS" target="_blank" rel="noopener">QMUI_iOS</a>中的转场库，也需进行适配处理。</p><h3 id="高德地图存在崩溃问题"><a href="#高德地图存在崩溃问题" class="headerlink" title="高德地图存在崩溃问题"></a>高德地图存在崩溃问题</h3><p>官方已经对SDK进行修复发布新版。</p><blockquote><p>影响APP体验和稳定性的暂时就发现这些，后面有遇到新的问题也会进行补充，iOS15一些新API就自己去了解学习吧。</p></blockquote><hr>]]></content>
    
    <summary type="html">
    
      iOS15适配指南
    
    </summary>
    
      <category term="iOS" scheme="http://blogwenbo.com/categories/iOS/"/>
    
    
      <category term="Xcode" scheme="http://blogwenbo.com/tags/Xcode/"/>
    
      <category term="iOS15" scheme="http://blogwenbo.com/tags/iOS15/"/>
    
  </entry>
  
  <entry>
    <title>读SDWebImage源码心得</title>
    <link href="http://blogwenbo.com/2020/06/07/%E8%AF%BBSDWebImage%E6%BA%90%E7%A0%81%E5%BF%83%E5%BE%97/"/>
    <id>http://blogwenbo.com/2020/06/07/读SDWebImage源码心得/</id>
    <published>2020-06-07T07:17:52.000Z</published>
    <updated>2020-06-08T13:26:58.512Z</updated>
    
    <content type="html"><![CDATA[<p class="description"></p><a id="more"></a><h2 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h2><blockquote><p>笔者在业余时间对iOS著名图片加载框架<a href="https://github.com/SDWebImage/SDWebImage" target="_blank" rel="noopener">SDWebImage </a><strong>V5.8.0</strong>源码进行了阅读，发现和V5.0之前版本架构设计有很大的不同，V5.0之后的版本是面向协议的架构设计，将图片缓存、编码解码、下载、自定义转换定义了一套标准协议方法，使用者想自定义一些操作，通过遵循协议，可以很方便的进行扩展。总之，SDWebImage源码是非常值得阅读，它应用了软件设计原则，和设计模式，使软件架构层次清晰，更容易理解阅读，扩展。SDWebImage源码还是有点多的，笔者零零散散花了几天，对源码粗略的读了一遍，收获还是颇多的，由于笔者现在水平有限，对于有些源码理解不是很到位，有理解描述不对的地方，希望能批评指正。</p></blockquote><h2 id="二、官方架构图解"><a href="#二、官方架构图解" class="headerlink" title="二、官方架构图解"></a>二、官方架构图解</h2><h3 id="High-Level-Diagram"><a href="#High-Level-Diagram" class="headerlink" title="High Level Diagram"></a>High Level Diagram</h3><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gfjr6cmcxxj30sg0lcjtb.jpg" alt=""></p><h3 id="Overall-Class-Diagram"><a href="#Overall-Class-Diagram" class="headerlink" title="Overall Class Diagram"></a>Overall Class Diagram</h3><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gfjr7pni02j30zo0u0gwu.jpg" alt=""></p><h3 id="Top-Level-API-Diagram"><a href="#Top-Level-API-Diagram" class="headerlink" title="Top Level API Diagram"></a>Top Level API Diagram</h3><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gfjr8tfo67j31ac0hn438.jpg" alt=""></p><h3 id="Main-Sequence-Diagram"><a href="#Main-Sequence-Diagram" class="headerlink" title="Main Sequence Diagram"></a>Main Sequence Diagram</h3><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gfjr9lek4rj31110dk0uo.jpg" alt=""></p><h2 id="三、思维导图"><a href="#三、思维导图" class="headerlink" title="三、思维导图"></a>三、思维导图</h2><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gfjrxs5kkfj30u00xb4lh.jpg" alt=""></p><h3 id="3-1、Utils"><a href="#3-1、Utils" class="headerlink" title="3.1、Utils"></a>3.1、Utils</h3><p>主要定义了一些常用工具类，宏定义（如，平台判断，信号量锁）、不同平台命名统一、位移枚举，错误枚举，加载菊花，图片加载动画等。</p><h3 id="3-2、Private"><a href="#3-2、Private" class="headerlink" title="3.2、Private"></a>3.2、Private</h3><p>私有工具类，文件、颜色，自定义NSOperation封装，封装NSBezierPath等</p><ul><li>封装了定时器SDDisplayLink及避免循环引用SDWeakProxy</li></ul><h3 id="3-3、Cache"><a href="#3-3、Cache" class="headerlink" title="3.3、Cache"></a>3.3、Cache</h3><p>图片缓存类，处理图片缓存，查找，删除，最大存储容量配置，过期数据处理。</p><ul><li><p>SDImageCacheConfig：缓存配置类，实现了NSCopying协议，图片默认磁盘缓存为一周</p></li><li><p>SDMemoryCache：内存缓存，继承NSCache实现，其内部用到了NSMapTable，默认shouldUseWeakMemoryCache为YES</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">/// 定义属性</span><br><span class="line">@property (nonatomic, strong, nonnull) NSMapTable&lt;KeyType, ObjectType&gt; *weakCache; // strong-weak cache</span><br><span class="line"></span><br><span class="line">/// 创建</span><br><span class="line">self.weakCache = [[NSMapTable alloc] initWithKeyOptions:NSPointerFunctionsStrongMemory valueOptions:NSPointerFunctionsWeakMemory capacity:0];</span><br></pre></td></tr></table></figure></li><li><p>SDDiskCache：磁盘缓存，实现了存储、查询、删除等同步/异步操作，图片容量超容处理</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">/// APP进入后台，对过期数据进行处理</span><br><span class="line">#if SD_UIKIT</span><br><span class="line">- (void)applicationDidEnterBackground:(NSNotification *)notification &#123;</span><br><span class="line">    if (!self.config.shouldRemoveExpiredDataWhenEnterBackground) &#123;</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line">    Class UIApplicationClass = NSClassFromString(@&quot;UIApplication&quot;);</span><br><span class="line">    if(!UIApplicationClass || ![UIApplicationClass respondsToSelector:@selector(sharedApplication)]) &#123;</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line">    UIApplication *application = [UIApplication performSelector:@selector(sharedApplication)];</span><br><span class="line">    __block UIBackgroundTaskIdentifier bgTask = [application beginBackgroundTaskWithExpirationHandler:^&#123;</span><br><span class="line">        // Clean up any unfinished task business by marking where you</span><br><span class="line">        // stopped or ending the task outright.</span><br><span class="line">        [application endBackgroundTask:bgTask];</span><br><span class="line">        bgTask = UIBackgroundTaskInvalid;</span><br><span class="line">    &#125;];</span><br><span class="line"></span><br><span class="line">    // Start the long-running task and return immediately.</span><br><span class="line">    [self deleteOldFilesWithCompletionBlock:^&#123;</span><br><span class="line">        [application endBackgroundTask:bgTask];</span><br><span class="line">        bgTask = UIBackgroundTaskInvalid;</span><br><span class="line">    &#125;];</span><br><span class="line">&#125;</span><br><span class="line">#endif</span><br></pre></td></tr></table></figure><p>清理核心方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line">- (void)removeExpiredData &#123;</span><br><span class="line">    NSURL *diskCacheURL = [NSURL fileURLWithPath:self.diskCachePath isDirectory:YES];</span><br><span class="line">    </span><br><span class="line">    // Compute content date key to be used for tests</span><br><span class="line">    NSURLResourceKey cacheContentDateKey = NSURLContentModificationDateKey;</span><br><span class="line">    switch (self.config.diskCacheExpireType) &#123;</span><br><span class="line">        case SDImageCacheConfigExpireTypeAccessDate:</span><br><span class="line">            cacheContentDateKey = NSURLContentAccessDateKey;</span><br><span class="line">            break;</span><br><span class="line">        case SDImageCacheConfigExpireTypeModificationDate:</span><br><span class="line">            cacheContentDateKey = NSURLContentModificationDateKey;</span><br><span class="line">            break;</span><br><span class="line">        case SDImageCacheConfigExpireTypeCreationDate:</span><br><span class="line">            cacheContentDateKey = NSURLCreationDateKey;</span><br><span class="line">            break;</span><br><span class="line">        case SDImageCacheConfigExpireTypeChangeDate:</span><br><span class="line">            cacheContentDateKey = NSURLAttributeModificationDateKey;</span><br><span class="line">            break;</span><br><span class="line">        default:</span><br><span class="line">            break;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    NSArray&lt;NSString *&gt; *resourceKeys = @[NSURLIsDirectoryKey, cacheContentDateKey, NSURLTotalFileAllocatedSizeKey];</span><br><span class="line">    </span><br><span class="line">    // This enumerator prefetches useful properties for our cache files.</span><br><span class="line">    NSDirectoryEnumerator *fileEnumerator = [self.fileManager enumeratorAtURL:diskCacheURL</span><br><span class="line">                                               includingPropertiesForKeys:resourceKeys</span><br><span class="line">                                                                  options:NSDirectoryEnumerationSkipsHiddenFiles</span><br><span class="line">                                                             errorHandler:NULL];</span><br><span class="line">    </span><br><span class="line">    NSDate *expirationDate = (self.config.maxDiskAge &lt; 0) ? nil: [NSDate dateWithTimeIntervalSinceNow:-self.config.maxDiskAge];</span><br><span class="line">    NSMutableDictionary&lt;NSURL *, NSDictionary&lt;NSString *, id&gt; *&gt; *cacheFiles = [NSMutableDictionary dictionary];</span><br><span class="line">    NSUInteger currentCacheSize = 0;</span><br><span class="line">    </span><br><span class="line">    // Enumerate all of the files in the cache directory.  This loop has two purposes:</span><br><span class="line">    //</span><br><span class="line">    //  1. Removing files that are older than the expiration date.</span><br><span class="line">    //  2. Storing file attributes for the size-based cleanup pass.</span><br><span class="line">    NSMutableArray&lt;NSURL *&gt; *urlsToDelete = [[NSMutableArray alloc] init];</span><br><span class="line">    for (NSURL *fileURL in fileEnumerator) &#123;</span><br><span class="line">        NSError *error;</span><br><span class="line">        NSDictionary&lt;NSString *, id&gt; *resourceValues = [fileURL resourceValuesForKeys:resourceKeys error:&amp;error];</span><br><span class="line">        </span><br><span class="line">        // Skip directories and errors.</span><br><span class="line">        if (error || !resourceValues || [resourceValues[NSURLIsDirectoryKey] boolValue]) &#123;</span><br><span class="line">            continue;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        // Remove files that are older than the expiration date;</span><br><span class="line">        NSDate *modifiedDate = resourceValues[cacheContentDateKey];</span><br><span class="line">        if (expirationDate &amp;&amp; [[modifiedDate laterDate:expirationDate] isEqualToDate:expirationDate]) &#123;</span><br><span class="line">            [urlsToDelete addObject:fileURL];</span><br><span class="line">            continue;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        // Store a reference to this file and account for its total size.</span><br><span class="line">        NSNumber *totalAllocatedSize = resourceValues[NSURLTotalFileAllocatedSizeKey];</span><br><span class="line">        currentCacheSize += totalAllocatedSize.unsignedIntegerValue;</span><br><span class="line">        cacheFiles[fileURL] = resourceValues;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    for (NSURL *fileURL in urlsToDelete) &#123;</span><br><span class="line">        [self.fileManager removeItemAtURL:fileURL error:nil];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    // If our remaining disk cache exceeds a configured maximum size, perform a second</span><br><span class="line">    // size-based cleanup pass.  We delete the oldest files first.</span><br><span class="line">    NSUInteger maxDiskSize = self.config.maxDiskSize;</span><br><span class="line">    if (maxDiskSize &gt; 0 &amp;&amp; currentCacheSize &gt; maxDiskSize) &#123;</span><br><span class="line">        // Target half of our maximum cache size for this cleanup pass.</span><br><span class="line">        const NSUInteger desiredCacheSize = maxDiskSize / 2;</span><br><span class="line">        </span><br><span class="line">        // Sort the remaining cache files by their last modification time or last access time (oldest first).</span><br><span class="line">        NSArray&lt;NSURL *&gt; *sortedFiles = [cacheFiles keysSortedByValueWithOptions:NSSortConcurrent</span><br><span class="line">                                                                 usingComparator:^NSComparisonResult(id obj1, id obj2) &#123;</span><br><span class="line">                                                                     return [obj1[cacheContentDateKey] compare:obj2[cacheContentDateKey]];</span><br><span class="line">                                                                 &#125;];</span><br><span class="line">        </span><br><span class="line">        // Delete files until we fall below our desired cache size.</span><br><span class="line">        for (NSURL *fileURL in sortedFiles) &#123;</span><br><span class="line">            if ([self.fileManager removeItemAtURL:fileURL error:nil]) &#123;</span><br><span class="line">                NSDictionary&lt;NSString *, id&gt; *resourceValues = cacheFiles[fileURL];</span><br><span class="line">                NSNumber *totalAllocatedSize = resourceValues[NSURLTotalFileAllocatedSizeKey];</span><br><span class="line">                currentCacheSize -= totalAllocatedSize.unsignedIntegerValue;</span><br><span class="line">                </span><br><span class="line">                if (currentCacheSize &lt; desiredCacheSize) &#123;</span><br><span class="line">                    break;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>SDImageCachesManager：管理遵循SDImageCache协议的对象，同时自己也遵循SDImageCache协议，将相关操作派发的具体的处理类，如磁盘、内存缓存。</p></li></ul><h3 id="3-4、Prefetcher"><a href="#3-4、Prefetcher" class="headerlink" title="3.4、Prefetcher"></a>3.4、Prefetcher</h3><blockquote><p>Prefetch some URLs in the cache for future use. Images are downloaded in low priority.</p></blockquote><p>预取缓存中的一些url以备将来使用。以低优先级下载图像。</p><h3 id="3-5、Transformer"><a href="#3-5、Transformer" class="headerlink" title="3.5、Transformer"></a>3.5、Transformer</h3><blockquote><p>/**</p><p> A transformer protocol to transform the image load from cache or from download.</p><p> You can provide transformer to cache and manager (Through the <code>transformer</code> property or context option <code>SDWebImageContextImageTransformer</code>).</p><p> @note The transform process is called from a global queue in order to not to block the main queue.</p><p> */</p></blockquote><p>图片转化相关属性包装，现在提供了这几种<strong>SDImagePipelineTransformer</strong>，<strong>SDImageRoundCornerTransformer</strong>、<strong>SDImageResizingTransformer</strong>、<strong>SDImageCroppingTransformer</strong>、<strong>SDImageFlippingTransformer</strong>、<strong>SDImageRotationTransformer</strong>、<strong>SDImageTintTransformer</strong>、<strong>SDImageBlurTransformer</strong>、<strong>SDImageFilterTransformer</strong>，见名知意这些Transformer的用途，其实现类<strong>UIImage+Transform</strong> Category中。</p><h3 id="3-6、Downloader"><a href="#3-6、Downloader" class="headerlink" title="3.6、Downloader"></a>3.6、Downloader</h3><p>图片下载处理相关类，下载结果通过Block回调。提供了根据URL下载图片，可控制暂停、取消，最大下载并发数量，默认是6个，下载一些状态获取。</p><p><strong>SDWebImageDownloaderConfig</strong>：下载相关配置，如最大并发数量，请求超时设置，队列执行顺序，证书设置等</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> The class contains all the config for image downloader</span><br><span class="line"> @note This class conform to NSCopying, make sure to add the property in `copyWithZone:` as well.</span><br><span class="line"> */</span><br><span class="line">@interface SDWebImageDownloaderConfig : NSObject &lt;NSCopying&gt;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> Gets the default downloader config used for shared instance or initialization when it does not provide any downloader config. Such as `SDWebImageDownloader.sharedDownloader`.</span><br><span class="line"> @note You can modify the property on default downloader config, which can be used for later created downloader instance. The already created downloader instance does not get affected.</span><br><span class="line"> */</span><br><span class="line">@property (nonatomic, class, readonly, nonnull) SDWebImageDownloaderConfig *defaultDownloaderConfig;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * The maximum number of concurrent downloads.</span><br><span class="line"> * Defaults to 6.</span><br><span class="line"> */</span><br><span class="line">@property (nonatomic, assign) NSInteger maxConcurrentDownloads;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * The timeout value (in seconds) for each download operation.</span><br><span class="line"> * Defaults to 15.0.</span><br><span class="line"> */</span><br><span class="line">@property (nonatomic, assign) NSTimeInterval downloadTimeout;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * The minimum interval about progress percent during network downloading. Which means the next progress callback and current progress callback&apos;s progress percent difference should be larger or equal to this value. However, the final finish download progress callback does not get effected.</span><br><span class="line"> * The value should be 0.0-1.0.</span><br><span class="line"> * @note If you&apos;re using progressive decoding feature, this will also effect the image refresh rate.</span><br><span class="line"> * @note This value may enhance the performance if you don&apos;t want progress callback too frequently.</span><br><span class="line"> * Defaults to 0, which means each time we receive the new data from URLSession, we callback the progressBlock immediately.</span><br><span class="line"> */</span><br><span class="line">@property (nonatomic, assign) double minimumProgressInterval;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * The custom session configuration in use by NSURLSession. If you don&apos;t provide one, we will use `defaultSessionConfiguration` instead.</span><br><span class="line"> * Defatuls to nil.</span><br><span class="line"> * @note This property does not support dynamic changes, means it&apos;s immutable after the downloader instance initialized.</span><br><span class="line"> */</span><br><span class="line">@property (nonatomic, strong, nullable) NSURLSessionConfiguration *sessionConfiguration;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * Gets/Sets a subclass of `SDWebImageDownloaderOperation` as the default</span><br><span class="line"> * `NSOperation` to be used each time SDWebImage constructs a request</span><br><span class="line"> * operation to download an image.</span><br><span class="line"> * Defaults to nil.</span><br><span class="line"> * @note Passing `NSOperation&lt;SDWebImageDownloaderOperation&gt;` to set as default. Passing `nil` will revert to `SDWebImageDownloaderOperation`.</span><br><span class="line"> */</span><br><span class="line">@property (nonatomic, assign, nullable) Class operationClass;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * Changes download operations execution order.</span><br><span class="line"> * Defaults to `SDWebImageDownloaderFIFOExecutionOrder`.</span><br><span class="line"> */</span><br><span class="line">@property (nonatomic, assign) SDWebImageDownloaderExecutionOrder executionOrder;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * Set the default URL credential to be set for request operations.</span><br><span class="line"> * Defaults to nil.</span><br><span class="line"> */</span><br><span class="line">@property (nonatomic, copy, nullable) NSURLCredential *urlCredential;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * Set username using for HTTP Basic authentication.</span><br><span class="line"> * Defaults to nil.</span><br><span class="line"> */</span><br><span class="line">@property (nonatomic, copy, nullable) NSString *username;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * Set password using for HTTP Basic authentication.</span><br><span class="line"> * Defautls to nil.</span><br><span class="line"> */</span><br><span class="line">@property (nonatomic, copy, nullable) NSString *password;</span><br><span class="line"></span><br><span class="line">@end</span><br></pre></td></tr></table></figure><ul><li><strong>SDWebImageDownloaderRequestModifier</strong>：封装NSMutableURLRequest相关设置，可通过提供Block配置。</li><li><strong>SDWebImageDownloaderResponseModifier</strong>：请求NSHTTPURLResponse配置，可通过提供Block配置。</li><li><strong>SDWebImageDownloaderDecryptor</strong>：图片二进制加密处理，可通过提供Block配置。默认Base64。</li></ul><p><strong>SDImageLoader</strong>：定义了图片下载方法协议<strong>SDImageLoader</strong>，图片解码方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> This is the built-in decoding process for image download from network or local file.</span><br><span class="line"> @note If you want to implement your custom loader with `requestImageWithURL:options:context:progress:completed:` API, but also want to keep compatible with SDWebImage&apos;s behavior, you&apos;d better use this to produce image.</span><br><span class="line"></span><br><span class="line"> @param imageData The image data from the network. Should not be nil</span><br><span class="line"> @param imageURL The image URL from the input. Should not be nil</span><br><span class="line"> @param options The options arg from the input</span><br><span class="line"> @param context The context arg from the input</span><br><span class="line"> @return The decoded image for current image data load from the network</span><br><span class="line"> */</span><br><span class="line">FOUNDATION_EXPORT UIImage * _Nullable SDImageLoaderDecodeImageData(NSData * _Nonnull imageData, NSURL * _Nonnull imageURL, SDWebImageOptions options, SDWebImageContext * _Nullable context);</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> This is the built-in decoding process for image progressive download from network. It&apos;s used when `SDWebImageProgressiveLoad` option is set. (It&apos;s not required when your loader does not support progressive image loading)</span><br><span class="line"> @note If you want to implement your custom loader with `requestImageWithURL:options:context:progress:completed:` API, but also want to keep compatible with SDWebImage&apos;s behavior, you&apos;d better use this to produce image.</span><br><span class="line"></span><br><span class="line"> @param imageData The image data from the network so far. Should not be nil</span><br><span class="line"> @param imageURL The image URL from the input. Should not be nil</span><br><span class="line"> @param finished Pass NO to specify the download process has not finished. Pass YES when all image data has finished.</span><br><span class="line"> @param operation The loader operation associated with current progressive download. Why to provide this is because progressive decoding need to store the partial decoded context for each operation to avoid conflict. You should provide the operation from `loadImageWithURL:` method return value.</span><br><span class="line"> @param options The options arg from the input</span><br><span class="line"> @param context The context arg from the input</span><br><span class="line"> @return The decoded progressive image for current image data load from the network</span><br><span class="line"> */</span><br><span class="line">FOUNDATION_EXPORT UIImage * _Nullable SDImageLoaderDecodeProgressiveImageData(NSData * _Nonnull imageData, NSURL * _Nonnull imageURL, BOOL finished,  id&lt;SDWebImageOperation&gt; _Nonnull operation, SDWebImageOptions options, SDWebImageContext * _Nullable context);</span><br></pre></td></tr></table></figure><ul><li><p><strong>SDWebImageDownloaderOperation</strong>: 自定义NSOperation子类，封装了图片下载任务</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line">/// 图片下载任务方法</span><br><span class="line">- (void)start &#123;</span><br><span class="line">    @synchronized (self) &#123;</span><br><span class="line">        if (self.isCancelled) &#123;</span><br><span class="line">            self.finished = YES;</span><br><span class="line">            // Operation cancelled by user before sending the request</span><br><span class="line">            [self callCompletionBlocksWithError:[NSError errorWithDomain:SDWebImageErrorDomain code:SDWebImageErrorCancelled userInfo:@&#123;NSLocalizedDescriptionKey : @&quot;Operation cancelled by user before sending the request&quot;&#125;]];</span><br><span class="line">            [self reset];</span><br><span class="line">            return;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">#if SD_UIKIT</span><br><span class="line">        Class UIApplicationClass = NSClassFromString(@&quot;UIApplication&quot;);</span><br><span class="line">        BOOL hasApplication = UIApplicationClass &amp;&amp; [UIApplicationClass respondsToSelector:@selector(sharedApplication)];</span><br><span class="line">        if (hasApplication &amp;&amp; [self shouldContinueWhenAppEntersBackground]) &#123;</span><br><span class="line">            __weak typeof(self) wself = self;</span><br><span class="line">            UIApplication * app = [UIApplicationClass performSelector:@selector(sharedApplication)];</span><br><span class="line">            self.backgroundTaskId = [app beginBackgroundTaskWithExpirationHandler:^&#123;</span><br><span class="line">                [wself cancel];</span><br><span class="line">            &#125;];</span><br><span class="line">        &#125;</span><br><span class="line">#endif</span><br><span class="line">        NSURLSession *session = self.unownedSession;</span><br><span class="line">        if (!session) &#123;</span><br><span class="line">            NSURLSessionConfiguration *sessionConfig = [NSURLSessionConfiguration defaultSessionConfiguration];</span><br><span class="line">            sessionConfig.timeoutIntervalForRequest = 15;</span><br><span class="line">            </span><br><span class="line">            /**</span><br><span class="line">             *  Create the session for this task</span><br><span class="line">             *  We send nil as delegate queue so that the session creates a serial operation queue for performing all delegate</span><br><span class="line">             *  method calls and completion handler calls.</span><br><span class="line">             */</span><br><span class="line">            session = [NSURLSession sessionWithConfiguration:sessionConfig</span><br><span class="line">                                                    delegate:self</span><br><span class="line">                                               delegateQueue:nil];</span><br><span class="line">            self.ownedSession = session;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        if (self.options &amp; SDWebImageDownloaderIgnoreCachedResponse) &#123;</span><br><span class="line">            // Grab the cached data for later check</span><br><span class="line">            NSURLCache *URLCache = session.configuration.URLCache;</span><br><span class="line">            if (!URLCache) &#123;</span><br><span class="line">                URLCache = [NSURLCache sharedURLCache];</span><br><span class="line">            &#125;</span><br><span class="line">            NSCachedURLResponse *cachedResponse;</span><br><span class="line">            // NSURLCache&apos;s `cachedResponseForRequest:` is not thread-safe, see https://developer.apple.com/documentation/foundation/nsurlcache#2317483</span><br><span class="line">            @synchronized (URLCache) &#123;</span><br><span class="line">                cachedResponse = [URLCache cachedResponseForRequest:self.request];</span><br><span class="line">            &#125;</span><br><span class="line">            if (cachedResponse) &#123;</span><br><span class="line">                self.cachedData = cachedResponse.data;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        self.dataTask = [session dataTaskWithRequest:self.request];</span><br><span class="line">        self.executing = YES;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if (self.dataTask) &#123;</span><br><span class="line">        if (self.options &amp; SDWebImageDownloaderHighPriority) &#123;</span><br><span class="line">            self.dataTask.priority = NSURLSessionTaskPriorityHigh;</span><br><span class="line">            self.coderQueue.qualityOfService = NSQualityOfServiceUserInteractive;</span><br><span class="line">        &#125; else if (self.options &amp; SDWebImageDownloaderLowPriority) &#123;</span><br><span class="line">            self.dataTask.priority = NSURLSessionTaskPriorityLow;</span><br><span class="line">            self.coderQueue.qualityOfService = NSQualityOfServiceBackground;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            self.dataTask.priority = NSURLSessionTaskPriorityDefault;</span><br><span class="line">            self.coderQueue.qualityOfService = NSQualityOfServiceDefault;</span><br><span class="line">        &#125;</span><br><span class="line">        [self.dataTask resume];</span><br><span class="line">        for (SDWebImageDownloaderProgressBlock progressBlock in [self callbacksForKey:kProgressCallbackKey]) &#123;</span><br><span class="line">            progressBlock(0, NSURLResponseUnknownLength, self.request.URL);</span><br><span class="line">        &#125;</span><br><span class="line">        __block typeof(self) strongSelf = self;</span><br><span class="line">        dispatch_async(dispatch_get_main_queue(), ^&#123;</span><br><span class="line">            [[NSNotificationCenter defaultCenter] postNotificationName:SDWebImageDownloadStartNotification object:strongSelf];</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        [self callCompletionBlocksWithError:[NSError errorWithDomain:SDWebImageErrorDomain code:SDWebImageErrorInvalidDownloadOperation userInfo:@&#123;NSLocalizedDescriptionKey : @&quot;Task can&apos;t be initialized&quot;&#125;]];</span><br><span class="line">        [self done];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><ul><li><p><strong>SDWebImageDownloader</strong>：图片下载类，遵循了<strong>SDImageLoader</strong>，内部持有<strong>SDWebImageDownloaderConfig、</strong>SDWebImageDownloaderResponseModifier<strong>、</strong>SDWebImageDownloaderRequestModifier**等实例类。图片下载核心方法如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line">/// 开始一个图片下载任务</span><br><span class="line">- (nullable SDWebImageDownloadToken *)downloadImageWithURL:(nullable NSURL *)url</span><br><span class="line">                                                   options:(SDWebImageDownloaderOptions)options</span><br><span class="line">                                                   context:(nullable SDWebImageContext *)context</span><br><span class="line">                                                  progress:(nullable SDWebImageDownloaderProgressBlock)progressBlock</span><br><span class="line">                                                 completed:(nullable SDWebImageDownloaderCompletedBlock)completedBlock &#123;</span><br><span class="line">    // The URL will be used as the key to the callbacks dictionary so it cannot be nil. If it is nil immediately call the completed block with no image or data.</span><br><span class="line">    if (url == nil) &#123;</span><br><span class="line">        if (completedBlock) &#123;</span><br><span class="line">            NSError *error = [NSError errorWithDomain:SDWebImageErrorDomain code:SDWebImageErrorInvalidURL userInfo:@&#123;NSLocalizedDescriptionKey : @&quot;Image url is nil&quot;&#125;];</span><br><span class="line">            completedBlock(nil, nil, error, YES);</span><br><span class="line">        &#125;</span><br><span class="line">        return nil;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    SD_LOCK(self.operationsLock);</span><br><span class="line">    id downloadOperationCancelToken;</span><br><span class="line">    NSOperation&lt;SDWebImageDownloaderOperation&gt; *operation = [self.URLOperations objectForKey:url];</span><br><span class="line">    // There is a case that the operation may be marked as finished or cancelled, but not been removed from `self.URLOperations`.</span><br><span class="line">    if (!operation || operation.isFinished || operation.isCancelled) &#123;</span><br><span class="line">        operation = [self createDownloaderOperationWithUrl:url options:options context:context];</span><br><span class="line">        if (!operation) &#123;</span><br><span class="line">            SD_UNLOCK(self.operationsLock);</span><br><span class="line">            if (completedBlock) &#123;</span><br><span class="line">                NSError *error = [NSError errorWithDomain:SDWebImageErrorDomain code:SDWebImageErrorInvalidDownloadOperation userInfo:@&#123;NSLocalizedDescriptionKey : @&quot;Downloader operation is nil&quot;&#125;];</span><br><span class="line">                completedBlock(nil, nil, error, YES);</span><br><span class="line">            &#125;</span><br><span class="line">            return nil;</span><br><span class="line">        &#125;</span><br><span class="line">        @weakify(self);</span><br><span class="line">        operation.completionBlock = ^&#123;</span><br><span class="line">            @strongify(self);</span><br><span class="line">            if (!self) &#123;</span><br><span class="line">                return;</span><br><span class="line">            &#125;</span><br><span class="line">            SD_LOCK(self.operationsLock);</span><br><span class="line">            [self.URLOperations removeObjectForKey:url];</span><br><span class="line">            SD_UNLOCK(self.operationsLock);</span><br><span class="line">        &#125;;</span><br><span class="line">        self.URLOperations[url] = operation;</span><br><span class="line">        // Add the handlers before submitting to operation queue, avoid the race condition that operation finished before setting handlers.</span><br><span class="line">        downloadOperationCancelToken = [operation addHandlersForProgress:progressBlock completed:completedBlock];</span><br><span class="line">        // Add operation to operation queue only after all configuration done according to Apple&apos;s doc.</span><br><span class="line">        // `addOperation:` does not synchronously execute the `operation.completionBlock` so this will not cause deadlock.</span><br><span class="line">        [self.downloadQueue addOperation:operation];</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        // When we reuse the download operation to attach more callbacks, there may be thread safe issue because the getter of callbacks may in another queue (decoding queue or delegate queue)</span><br><span class="line">        // So we lock the operation here, and in `SDWebImageDownloaderOperation`, we use `@synchonzied (self)`, to ensure the thread safe between these two classes.</span><br><span class="line">        @synchronized (operation) &#123;</span><br><span class="line">            downloadOperationCancelToken = [operation addHandlersForProgress:progressBlock completed:completedBlock];</span><br><span class="line">        &#125;</span><br><span class="line">        if (!operation.isExecuting) &#123;</span><br><span class="line">            if (options &amp; SDWebImageDownloaderHighPriority) &#123;</span><br><span class="line">                operation.queuePriority = NSOperationQueuePriorityHigh;</span><br><span class="line">            &#125; else if (options &amp; SDWebImageDownloaderLowPriority) &#123;</span><br><span class="line">                operation.queuePriority = NSOperationQueuePriorityLow;</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                operation.queuePriority = NSOperationQueuePriorityNormal;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    SD_UNLOCK(self.operationsLock);</span><br><span class="line">    </span><br><span class="line">    SDWebImageDownloadToken *token = [[SDWebImageDownloadToken alloc] initWithDownloadOperation:operation];</span><br><span class="line">    token.url = url;</span><br><span class="line">    token.request = operation.request;</span><br><span class="line">    token.downloadOperationCancelToken = downloadOperationCancelToken;</span><br><span class="line">    </span><br><span class="line">    return token;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>SDImageLoadersManager</strong>：遵循<strong>SDImageLoader</strong>协议，管理遵循了SDImageLoader协议的数组，主要代码如下：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">#pragma mark - SDImageLoader</span><br><span class="line"></span><br><span class="line">- (BOOL)canRequestImageForURL:(nullable NSURL *)url &#123;</span><br><span class="line">    NSArray&lt;id&lt;SDImageLoader&gt;&gt; *loaders = self.loaders;</span><br><span class="line">    for (id&lt;SDImageLoader&gt; loader in loaders.reverseObjectEnumerator) &#123;</span><br><span class="line">        if ([loader canRequestImageForURL:url]) &#123;</span><br><span class="line">            return YES;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return NO;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (id&lt;SDWebImageOperation&gt;)requestImageWithURL:(NSURL *)url options:(SDWebImageOptions)options context:(SDWebImageContext *)context progress:(SDImageLoaderProgressBlock)progressBlock completed:(SDImageLoaderCompletedBlock)completedBlock &#123;</span><br><span class="line">    if (!url) &#123;</span><br><span class="line">        return nil;</span><br><span class="line">    &#125;</span><br><span class="line">    NSArray&lt;id&lt;SDImageLoader&gt;&gt; *loaders = self.loaders;</span><br><span class="line">    for (id&lt;SDImageLoader&gt; loader in loaders.reverseObjectEnumerator) &#123;</span><br><span class="line">        if ([loader canRequestImageForURL:url]) &#123;</span><br><span class="line">            return [loader requestImageWithURL:url options:options context:context progress:progressBlock completed:completedBlock];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return nil;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (BOOL)shouldBlockFailedURLWithURL:(NSURL *)url error:(NSError *)error &#123;</span><br><span class="line">    NSArray&lt;id&lt;SDImageLoader&gt;&gt; *loaders = self.loaders;</span><br><span class="line">    for (id&lt;SDImageLoader&gt; loader in loaders.reverseObjectEnumerator) &#123;</span><br><span class="line">        if ([loader canRequestImageForURL:url]) &#123;</span><br><span class="line">            return [loader shouldBlockFailedURLWithURL:url error:error];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return NO;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-5、Decoder"><a href="#3-5、Decoder" class="headerlink" title="3.5、Decoder"></a>3.5、Decoder</h3><p>图片编/解码。支持的图片格式如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> You can use switch case like normal enum. It&apos;s also recommended to add a default case. You should not assume anything about the raw value.</span><br><span class="line"> For custom coder plugin, it can also extern the enum for supported format. See `SDImageCoder` for more detailed information.</span><br><span class="line"> */</span><br><span class="line">typedef NSInteger SDImageFormat NS_TYPED_EXTENSIBLE_ENUM;</span><br><span class="line">static const SDImageFormat SDImageFormatUndefined = -1;</span><br><span class="line">static const SDImageFormat SDImageFormatJPEG      = 0;</span><br><span class="line">static const SDImageFormat SDImageFormatPNG       = 1;</span><br><span class="line">static const SDImageFormat SDImageFormatGIF       = 2;</span><br><span class="line">static const SDImageFormat SDImageFormatTIFF      = 3;</span><br><span class="line">static const SDImageFormat SDImageFormatWebP      = 4; /// SDWebImage默认不支持</span><br><span class="line">static const SDImageFormat SDImageFormatHEIC      = 5;</span><br><span class="line">static const SDImageFormat SDImageFormatHEIF      = 6;</span><br><span class="line">static const SDImageFormat SDImageFormatPDF       = 7;</span><br><span class="line">static const SDImageFormat SDImageFormatSVG       = 8;</span><br></pre></td></tr></table></figure><p>对于特殊格式的图片，SDWebImage创建了一个对应的编解码子类，遵循了<strong>SDImageIOAnimatedCoder</strong>，<strong>SDImageIOAnimatedCoder</strong>又遵循了<strong>&lt;SDProgressiveImageCoder, SDAnimatedImageCoder&gt;</strong>协议。这部分内容还是相对来说枯燥复杂的。</p><ul><li><strong>SDImageCoder</strong>：定义了主要编解码方法，同时也定义了<strong>SDProgressiveImageCoder</strong>、<strong>SDAnimatedImageCoder</strong>、<strong>SDAnimatedImageProvider</strong>等协议</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">#pragma mark - Coder</span><br><span class="line">/**</span><br><span class="line"> This is the image coder protocol to provide custom image decoding/encoding.</span><br><span class="line"> These methods are all required to implement.</span><br><span class="line"> @note Pay attention that these methods are not called from main queue.</span><br><span class="line"> */</span><br><span class="line">@protocol SDImageCoder &lt;NSObject&gt;</span><br><span class="line"></span><br><span class="line">@required</span><br><span class="line">#pragma mark - Decoding</span><br><span class="line">/**</span><br><span class="line"> Returns YES if this coder can decode some data. Otherwise, the data should be passed to another coder.</span><br><span class="line"> </span><br><span class="line"> @param data The image data so we can look at it</span><br><span class="line"> @return YES if this coder can decode the data, NO otherwise</span><br><span class="line"> */</span><br><span class="line">- (BOOL)canDecodeFromData:(nullable NSData *)data;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> Decode the image data to image.</span><br><span class="line"> @note This protocol may supports decode animated image frames. You can use `+[SDImageCoderHelper animatedImageWithFrames:]` to produce an animated image with frames.</span><br><span class="line"></span><br><span class="line"> @param data The image data to be decoded</span><br><span class="line"> @param options A dictionary containing any decoding options. Pass @&#123;SDImageCoderDecodeScaleFactor: @(1.0)&#125; to specify scale factor for image. Pass @&#123;SDImageCoderDecodeFirstFrameOnly: @(YES)&#125; to decode the first frame only.</span><br><span class="line"> @return The decoded image from data</span><br><span class="line"> */</span><br><span class="line">- (nullable UIImage *)decodedImageWithData:(nullable NSData *)data</span><br><span class="line">                                   options:(nullable SDImageCoderOptions *)options;</span><br><span class="line"></span><br><span class="line">#pragma mark - Encoding</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> Returns YES if this coder can encode some image. Otherwise, it should be passed to another coder.</span><br><span class="line"> For custom coder which introduce new image format, you&apos;d better define a new `SDImageFormat` using like this. If you&apos;re creating public coder plugin for new image format, also update `https://github.com/rs/SDWebImage/wiki/Coder-Plugin-List` to avoid same value been defined twice.</span><br><span class="line"> * @code</span><br><span class="line"> static const SDImageFormat SDImageFormatHEIF = 10;</span><br><span class="line"> * @endcode</span><br><span class="line"> </span><br><span class="line"> @param format The image format</span><br><span class="line"> @return YES if this coder can encode the image, NO otherwise</span><br><span class="line"> */</span><br><span class="line">- (BOOL)canEncodeToFormat:(SDImageFormat)format NS_SWIFT_NAME(canEncode(to:));</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> Encode the image to image data.</span><br><span class="line"> @note This protocol may supports encode animated image frames. You can use `+[SDImageCoderHelper framesFromAnimatedImage:]` to assemble an animated image with frames.</span><br><span class="line"></span><br><span class="line"> @param image The image to be encoded</span><br><span class="line"> @param format The image format to encode, you should note `SDImageFormatUndefined` format is also  possible</span><br><span class="line"> @param options A dictionary containing any encoding options. Pass @&#123;SDImageCoderEncodeCompressionQuality: @(1)&#125; to specify compression quality.</span><br><span class="line"> @return The encoded image data</span><br><span class="line"> */</span><br><span class="line">- (nullable NSData *)encodedDataWithImage:(nullable UIImage *)image</span><br><span class="line">                                   format:(SDImageFormat)format</span><br><span class="line">                                  options:(nullable SDImageCoderOptions *)options;</span><br><span class="line"></span><br><span class="line">@end</span><br></pre></td></tr></table></figure><ul><li><strong>SDImageCodersManager</strong>：管理了各种图片格式编/解码类，同时遵循了SDImageCoder协议，核心代码如下：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">#pragma mark - SDImageCoder</span><br><span class="line">- (BOOL)canDecodeFromData:(NSData *)data &#123;</span><br><span class="line">    NSArray&lt;id&lt;SDImageCoder&gt;&gt; *coders = self.coders;</span><br><span class="line">    for (id&lt;SDImageCoder&gt; coder in coders.reverseObjectEnumerator) &#123;</span><br><span class="line">        if ([coder canDecodeFromData:data]) &#123;</span><br><span class="line">            return YES;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return NO;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (BOOL)canEncodeToFormat:(SDImageFormat)format &#123;</span><br><span class="line">    NSArray&lt;id&lt;SDImageCoder&gt;&gt; *coders = self.coders;</span><br><span class="line">    for (id&lt;SDImageCoder&gt; coder in coders.reverseObjectEnumerator) &#123;</span><br><span class="line">        if ([coder canEncodeToFormat:format]) &#123;</span><br><span class="line">            return YES;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return NO;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (UIImage *)decodedImageWithData:(NSData *)data options:(nullable SDImageCoderOptions *)options &#123;</span><br><span class="line">    if (!data) &#123;</span><br><span class="line">        return nil;</span><br><span class="line">    &#125;</span><br><span class="line">    UIImage *image;</span><br><span class="line">    NSArray&lt;id&lt;SDImageCoder&gt;&gt; *coders = self.coders;</span><br><span class="line">    for (id&lt;SDImageCoder&gt; coder in coders.reverseObjectEnumerator) &#123;</span><br><span class="line">        if ([coder canDecodeFromData:data]) &#123;</span><br><span class="line">            image = [coder decodedImageWithData:data options:options];</span><br><span class="line">            break;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    return image;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (NSData *)encodedDataWithImage:(UIImage *)image format:(SDImageFormat)format options:(nullable SDImageCoderOptions *)options &#123;</span><br><span class="line">    if (!image) &#123;</span><br><span class="line">        return nil;</span><br><span class="line">    &#125;</span><br><span class="line">    NSArray&lt;id&lt;SDImageCoder&gt;&gt; *coders = self.coders;</span><br><span class="line">    for (id&lt;SDImageCoder&gt; coder in coders.reverseObjectEnumerator) &#123;</span><br><span class="line">        if ([coder canEncodeToFormat:format]) &#123;</span><br><span class="line">            return [coder encodedDataWithImage:image format:format options:options];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return nil;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="3-7、Manager"><a href="#3-7、Manager" class="headerlink" title="3.7、Manager"></a>3.7、Manager</h3><p>UIKit相关UI控件分类API调用上游类， 管理图片缓存、下载、编/解码、转换等操作。</p><ul><li><strong>SDWebImageManager</strong>：SDWebImage核心类。提供了各种操作实例代码。</li></ul><p>初始化方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * Allows to specify instance of cache and image loader used with image manager.</span><br><span class="line"> * @return new instance of `SDWebImageManager` with specified cache and loader.</span><br><span class="line"> */</span><br><span class="line">- (nonnull instancetype)initWithCache:(nonnull id&lt;SDImageCache&gt;)cache loader:(nonnull id&lt;SDImageLoader&gt;)loader NS_DESIGNATED_INITIALIZER;</span><br></pre></td></tr></table></figure><p>下载图片方法定义</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * Downloads the image at the given URL if not present in cache or return the cached version otherwise.</span><br><span class="line"> *</span><br><span class="line"> * @param url            The URL to the image</span><br><span class="line"> * @param options        A mask to specify options to use for this request</span><br><span class="line"> * @param context        A context contains different options to perform specify changes or processes, see `SDWebImageContextOption`. This hold the extra objects which `options` enum can not hold.</span><br><span class="line"> * @param progressBlock  A block called while image is downloading</span><br><span class="line"> *                       @note the progress block is executed on a background queue</span><br><span class="line"> * @param completedBlock A block called when operation has been completed.</span><br><span class="line"> *</span><br><span class="line"> * @return Returns an instance of SDWebImageCombinedOperation, which you can cancel the loading process.</span><br><span class="line"> */</span><br><span class="line">- (nullable SDWebImageCombinedOperation *)loadImageWithURL:(nullable NSURL *)url</span><br><span class="line">                                                   options:(SDWebImageOptions)options</span><br><span class="line">                                                   context:(nullable SDWebImageContext *)context</span><br><span class="line">                                                  progress:(nullable SDImageLoaderProgressBlock)progressBlock</span><br><span class="line">                                                 completed:(nonnull SDInternalCompletionBlock)completedBlock;</span><br></pre></td></tr></table></figure><p>下载图片方法实现</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br></pre></td><td class="code"><pre><span class="line">/// 实现</span><br><span class="line">- (SDWebImageCombinedOperation *)loadImageWithURL:(nullable NSURL *)url</span><br><span class="line">                                          options:(SDWebImageOptions)options</span><br><span class="line">                                          context:(nullable SDWebImageContext *)context</span><br><span class="line">                                         progress:(nullable SDImageLoaderProgressBlock)progressBlock</span><br><span class="line">                                        completed:(nonnull SDInternalCompletionBlock)completedBlock &#123;</span><br><span class="line">    // Invoking this method without a completedBlock is pointless</span><br><span class="line">    NSAssert(completedBlock != nil, @&quot;If you mean to prefetch the image, use -[SDWebImagePrefetcher prefetchURLs] instead&quot;);</span><br><span class="line"></span><br><span class="line">    // Very common mistake is to send the URL using NSString object instead of NSURL. For some strange reason, Xcode won&apos;t</span><br><span class="line">    // throw any warning for this type mismatch. Here we failsafe this error by allowing URLs to be passed as NSString.</span><br><span class="line">    if ([url isKindOfClass:NSString.class]) &#123;</span><br><span class="line">        url = [NSURL URLWithString:(NSString *)url];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // Prevents app crashing on argument type error like sending NSNull instead of NSURL</span><br><span class="line">    if (![url isKindOfClass:NSURL.class]) &#123;</span><br><span class="line">        url = nil;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    SDWebImageCombinedOperation *operation = [SDWebImageCombinedOperation new];</span><br><span class="line">    operation.manager = self;</span><br><span class="line"></span><br><span class="line">    BOOL isFailedUrl = NO;</span><br><span class="line">    if (url) &#123;</span><br><span class="line">        SD_LOCK(self.failedURLsLock);</span><br><span class="line">        isFailedUrl = [self.failedURLs containsObject:url];</span><br><span class="line">        SD_UNLOCK(self.failedURLsLock);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if (url.absoluteString.length == 0 || (!(options &amp; SDWebImageRetryFailed) &amp;&amp; isFailedUrl)) &#123;</span><br><span class="line">        NSString *description = isFailedUrl ? @&quot;Image url is blacklisted&quot; : @&quot;Image url is nil&quot;;</span><br><span class="line">        NSInteger code = isFailedUrl ? SDWebImageErrorBlackListed : SDWebImageErrorInvalidURL;</span><br><span class="line">        [self callCompletionBlockForOperation:operation completion:completedBlock error:[NSError errorWithDomain:SDWebImageErrorDomain code:code userInfo:@&#123;NSLocalizedDescriptionKey : description&#125;] url:url];</span><br><span class="line">        return operation;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    SD_LOCK(self.runningOperationsLock);</span><br><span class="line">    [self.runningOperations addObject:operation];</span><br><span class="line">    SD_UNLOCK(self.runningOperationsLock);</span><br><span class="line">    </span><br><span class="line">    // Preprocess the options and context arg to decide the final the result for manager</span><br><span class="line">    SDWebImageOptionsResult *result = [self processedResultForURL:url options:options context:context];</span><br><span class="line">    </span><br><span class="line">    // Start the entry to load image from cache</span><br><span class="line">    [self callCacheProcessForOperation:operation url:url options:result.options context:result.context progress:progressBlock completed:completedBlock];</span><br><span class="line"></span><br><span class="line">    return operation;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#pragma mark - Private</span><br><span class="line"></span><br><span class="line">// Query normal cache process</span><br><span class="line">- (void)callCacheProcessForOperation:(nonnull SDWebImageCombinedOperation *)operation</span><br><span class="line">                                 url:(nonnull NSURL *)url</span><br><span class="line">                             options:(SDWebImageOptions)options</span><br><span class="line">                             context:(nullable SDWebImageContext *)context</span><br><span class="line">                            progress:(nullable SDImageLoaderProgressBlock)progressBlock</span><br><span class="line">                           completed:(nullable SDInternalCompletionBlock)completedBlock &#123;</span><br><span class="line">    // Grab the image cache to use</span><br><span class="line">    id&lt;SDImageCache&gt; imageCache;</span><br><span class="line">    if ([context[SDWebImageContextImageCache] conformsToProtocol:@protocol(SDImageCache)]) &#123;</span><br><span class="line">        imageCache = context[SDWebImageContextImageCache];</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        imageCache = self.imageCache;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    // Get the query cache type</span><br><span class="line">    SDImageCacheType queryCacheType = SDImageCacheTypeAll;</span><br><span class="line">    if (context[SDWebImageContextQueryCacheType]) &#123;</span><br><span class="line">        queryCacheType = [context[SDWebImageContextQueryCacheType] integerValue];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    // Check whether we should query cache</span><br><span class="line">    BOOL shouldQueryCache = !SD_OPTIONS_CONTAINS(options, SDWebImageFromLoaderOnly);</span><br><span class="line">    if (shouldQueryCache) &#123;</span><br><span class="line">        NSString *key = [self cacheKeyForURL:url context:context];</span><br><span class="line">        @weakify(operation);</span><br><span class="line">        operation.cacheOperation = [imageCache queryImageForKey:key options:options context:context cacheType:queryCacheType completion:^(UIImage * _Nullable cachedImage, NSData * _Nullable cachedData, SDImageCacheType cacheType) &#123;</span><br><span class="line">            @strongify(operation);</span><br><span class="line">            if (!operation || operation.isCancelled) &#123;</span><br><span class="line">                // Image combined operation cancelled by user</span><br><span class="line">                [self callCompletionBlockForOperation:operation completion:completedBlock error:[NSError errorWithDomain:SDWebImageErrorDomain code:SDWebImageErrorCancelled userInfo:@&#123;NSLocalizedDescriptionKey : @&quot;Operation cancelled by user during querying the cache&quot;&#125;] url:url];</span><br><span class="line">                [self safelyRemoveOperationFromRunning:operation];</span><br><span class="line">                return;</span><br><span class="line">            &#125; else if (context[SDWebImageContextImageTransformer] &amp;&amp; !cachedImage) &#123;</span><br><span class="line">                // Have a chance to quary original cache instead of downloading</span><br><span class="line">                [self callOriginalCacheProcessForOperation:operation url:url options:options context:context progress:progressBlock completed:completedBlock];</span><br><span class="line">                return;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            // Continue download process</span><br><span class="line">            [self callDownloadProcessForOperation:operation url:url options:options context:context cachedImage:cachedImage cachedData:cachedData cacheType:cacheType progress:progressBlock completed:completedBlock];</span><br><span class="line">        &#125;];</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        // Continue download process</span><br><span class="line">        [self callDownloadProcessForOperation:operation url:url options:options context:context cachedImage:nil cachedData:nil cacheType:SDImageCacheTypeNone progress:progressBlock completed:completedBlock];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// Query original cache process</span><br><span class="line">- (void)callOriginalCacheProcessForOperation:(nonnull SDWebImageCombinedOperation *)operation</span><br><span class="line">                                         url:(nonnull NSURL *)url</span><br><span class="line">                                     options:(SDWebImageOptions)options</span><br><span class="line">                                     context:(nullable SDWebImageContext *)context</span><br><span class="line">                                    progress:(nullable SDImageLoaderProgressBlock)progressBlock</span><br><span class="line">                                   completed:(nullable SDInternalCompletionBlock)completedBlock &#123;</span><br><span class="line">    // Grab the image cache to use</span><br><span class="line">    id&lt;SDImageCache&gt; imageCache;</span><br><span class="line">    if ([context[SDWebImageContextImageCache] conformsToProtocol:@protocol(SDImageCache)]) &#123;</span><br><span class="line">        imageCache = context[SDWebImageContextImageCache];</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        imageCache = self.imageCache;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    // Get the original query cache type</span><br><span class="line">    SDImageCacheType originalQueryCacheType = SDImageCacheTypeNone;</span><br><span class="line">    if (context[SDWebImageContextOriginalQueryCacheType]) &#123;</span><br><span class="line">        originalQueryCacheType = [context[SDWebImageContextOriginalQueryCacheType] integerValue];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    // Check whether we should query original cache</span><br><span class="line">    BOOL shouldQueryOriginalCache = (originalQueryCacheType != SDImageCacheTypeNone);</span><br><span class="line">    if (shouldQueryOriginalCache) &#123;</span><br><span class="line">        // Change originContext to mutable</span><br><span class="line">        SDWebImageMutableContext * __block originContext;</span><br><span class="line">        if (context) &#123;</span><br><span class="line">            originContext = [context mutableCopy];</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            originContext = [NSMutableDictionary dictionary];</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        // Disable transformer for cache key generation</span><br><span class="line">        id&lt;SDImageTransformer&gt; transformer = originContext[SDWebImageContextImageTransformer];</span><br><span class="line">        originContext[SDWebImageContextImageTransformer] = [NSNull null];</span><br><span class="line">        </span><br><span class="line">        NSString *key = [self cacheKeyForURL:url context:originContext];</span><br><span class="line">        @weakify(operation);</span><br><span class="line">        operation.cacheOperation = [imageCache queryImageForKey:key options:options context:context cacheType:originalQueryCacheType completion:^(UIImage * _Nullable cachedImage, NSData * _Nullable cachedData, SDImageCacheType cacheType) &#123;</span><br><span class="line">            @strongify(operation);</span><br><span class="line">            if (!operation || operation.isCancelled) &#123;</span><br><span class="line">                // Image combined operation cancelled by user</span><br><span class="line">                [self callCompletionBlockForOperation:operation completion:completedBlock error:[NSError errorWithDomain:SDWebImageErrorDomain code:SDWebImageErrorCancelled userInfo:@&#123;NSLocalizedDescriptionKey : @&quot;Operation cancelled by user during querying the cache&quot;&#125;] url:url];</span><br><span class="line">                [self safelyRemoveOperationFromRunning:operation];</span><br><span class="line">                return;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            // Add original transformer</span><br><span class="line">            if (transformer) &#123;</span><br><span class="line">                originContext[SDWebImageContextImageTransformer] = transformer;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            // Use the store cache process instead of downloading, and ignore .refreshCached option for now</span><br><span class="line">            [self callStoreCacheProcessForOperation:operation url:url options:options context:context downloadedImage:cachedImage downloadedData:cachedData finished:YES progress:progressBlock completed:completedBlock];</span><br><span class="line">            </span><br><span class="line">            [self safelyRemoveOperationFromRunning:operation];</span><br><span class="line">        &#125;];</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        // Continue download process</span><br><span class="line">        [self callDownloadProcessForOperation:operation url:url options:options context:context cachedImage:nil cachedData:nil cacheType:originalQueryCacheType progress:progressBlock completed:completedBlock];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// Download process</span><br><span class="line">- (void)callDownloadProcessForOperation:(nonnull SDWebImageCombinedOperation *)operation</span><br><span class="line">                                    url:(nonnull NSURL *)url</span><br><span class="line">                                options:(SDWebImageOptions)options</span><br><span class="line">                                context:(SDWebImageContext *)context</span><br><span class="line">                            cachedImage:(nullable UIImage *)cachedImage</span><br><span class="line">                             cachedData:(nullable NSData *)cachedData</span><br><span class="line">                              cacheType:(SDImageCacheType)cacheType</span><br><span class="line">                               progress:(nullable SDImageLoaderProgressBlock)progressBlock</span><br><span class="line">                              completed:(nullable SDInternalCompletionBlock)completedBlock &#123;</span><br><span class="line">    // Grab the image loader to use</span><br><span class="line">    id&lt;SDImageLoader&gt; imageLoader;</span><br><span class="line">    if ([context[SDWebImageContextImageLoader] conformsToProtocol:@protocol(SDImageLoader)]) &#123;</span><br><span class="line">        imageLoader = context[SDWebImageContextImageLoader];</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        imageLoader = self.imageLoader;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    // Check whether we should download image from network</span><br><span class="line">    BOOL shouldDownload = !SD_OPTIONS_CONTAINS(options, SDWebImageFromCacheOnly);</span><br><span class="line">    shouldDownload &amp;= (!cachedImage || options &amp; SDWebImageRefreshCached);</span><br><span class="line">    shouldDownload &amp;= (![self.delegate respondsToSelector:@selector(imageManager:shouldDownloadImageForURL:)] || [self.delegate imageManager:self shouldDownloadImageForURL:url]);</span><br><span class="line">    shouldDownload &amp;= [imageLoader canRequestImageForURL:url];</span><br><span class="line">    if (shouldDownload) &#123;</span><br><span class="line">        if (cachedImage &amp;&amp; options &amp; SDWebImageRefreshCached) &#123;</span><br><span class="line">            // If image was found in the cache but SDWebImageRefreshCached is provided, notify about the cached image</span><br><span class="line">            // AND try to re-download it in order to let a chance to NSURLCache to refresh it from server.</span><br><span class="line">            [self callCompletionBlockForOperation:operation completion:completedBlock image:cachedImage data:cachedData error:nil cacheType:cacheType finished:YES url:url];</span><br><span class="line">            // Pass the cached image to the image loader. The image loader should check whether the remote image is equal to the cached image.</span><br><span class="line">            SDWebImageMutableContext *mutableContext;</span><br><span class="line">            if (context) &#123;</span><br><span class="line">                mutableContext = [context mutableCopy];</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                mutableContext = [NSMutableDictionary dictionary];</span><br><span class="line">            &#125;</span><br><span class="line">            mutableContext[SDWebImageContextLoaderCachedImage] = cachedImage;</span><br><span class="line">            context = [mutableContext copy];</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        @weakify(operation);</span><br><span class="line">        operation.loaderOperation = [imageLoader requestImageWithURL:url options:options context:context progress:progressBlock completed:^(UIImage *downloadedImage, NSData *downloadedData, NSError *error, BOOL finished) &#123;</span><br><span class="line">            @strongify(operation);</span><br><span class="line">            if (!operation || operation.isCancelled) &#123;</span><br><span class="line">                // Image combined operation cancelled by user</span><br><span class="line">                [self callCompletionBlockForOperation:operation completion:completedBlock error:[NSError errorWithDomain:SDWebImageErrorDomain code:SDWebImageErrorCancelled userInfo:@&#123;NSLocalizedDescriptionKey : @&quot;Operation cancelled by user during sending the request&quot;&#125;] url:url];</span><br><span class="line">            &#125; else if (cachedImage &amp;&amp; options &amp; SDWebImageRefreshCached &amp;&amp; [error.domain isEqualToString:SDWebImageErrorDomain] &amp;&amp; error.code == SDWebImageErrorCacheNotModified) &#123;</span><br><span class="line">                // Image refresh hit the NSURLCache cache, do not call the completion block</span><br><span class="line">            &#125; else if ([error.domain isEqualToString:SDWebImageErrorDomain] &amp;&amp; error.code == SDWebImageErrorCancelled) &#123;</span><br><span class="line">                // Download operation cancelled by user before sending the request, don&apos;t block failed URL</span><br><span class="line">                [self callCompletionBlockForOperation:operation completion:completedBlock error:error url:url];</span><br><span class="line">            &#125; else if (error) &#123;</span><br><span class="line">                [self callCompletionBlockForOperation:operation completion:completedBlock error:error url:url];</span><br><span class="line">                BOOL shouldBlockFailedURL = [self shouldBlockFailedURLWithURL:url error:error options:options context:context];</span><br><span class="line">                </span><br><span class="line">                if (shouldBlockFailedURL) &#123;</span><br><span class="line">                    SD_LOCK(self.failedURLsLock);</span><br><span class="line">                    [self.failedURLs addObject:url];</span><br><span class="line">                    SD_UNLOCK(self.failedURLsLock);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                if ((options &amp; SDWebImageRetryFailed)) &#123;</span><br><span class="line">                    SD_LOCK(self.failedURLsLock);</span><br><span class="line">                    [self.failedURLs removeObject:url];</span><br><span class="line">                    SD_UNLOCK(self.failedURLsLock);</span><br><span class="line">                &#125;</span><br><span class="line">                // Continue store cache process</span><br><span class="line">                [self callStoreCacheProcessForOperation:operation url:url options:options context:context downloadedImage:downloadedImage downloadedData:downloadedData finished:finished progress:progressBlock completed:completedBlock];</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            if (finished) &#123;</span><br><span class="line">                [self safelyRemoveOperationFromRunning:operation];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;];</span><br><span class="line">    &#125; else if (cachedImage) &#123;</span><br><span class="line">        [self callCompletionBlockForOperation:operation completion:completedBlock image:cachedImage data:cachedData error:nil cacheType:cacheType finished:YES url:url];</span><br><span class="line">        [self safelyRemoveOperationFromRunning:operation];</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        // Image not in cache and download disallowed by delegate</span><br><span class="line">        [self callCompletionBlockForOperation:operation completion:completedBlock image:nil data:nil error:nil cacheType:SDImageCacheTypeNone finished:YES url:url];</span><br><span class="line">        [self safelyRemoveOperationFromRunning:operation];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// Store cache process</span><br><span class="line">- (void)callStoreCacheProcessForOperation:(nonnull SDWebImageCombinedOperation *)operation</span><br><span class="line">                                      url:(nonnull NSURL *)url</span><br><span class="line">                                  options:(SDWebImageOptions)options</span><br><span class="line">                                  context:(SDWebImageContext *)context</span><br><span class="line">                          downloadedImage:(nullable UIImage *)downloadedImage</span><br><span class="line">                           downloadedData:(nullable NSData *)downloadedData</span><br><span class="line">                                 finished:(BOOL)finished</span><br><span class="line">                                 progress:(nullable SDImageLoaderProgressBlock)progressBlock</span><br><span class="line">                                completed:(nullable SDInternalCompletionBlock)completedBlock &#123;</span><br><span class="line">    // the target image store cache type</span><br><span class="line">    SDImageCacheType storeCacheType = SDImageCacheTypeAll;</span><br><span class="line">    if (context[SDWebImageContextStoreCacheType]) &#123;</span><br><span class="line">        storeCacheType = [context[SDWebImageContextStoreCacheType] integerValue];</span><br><span class="line">    &#125;</span><br><span class="line">    // the original store image cache type</span><br><span class="line">    SDImageCacheType originalStoreCacheType = SDImageCacheTypeNone;</span><br><span class="line">    if (context[SDWebImageContextOriginalStoreCacheType]) &#123;</span><br><span class="line">        originalStoreCacheType = [context[SDWebImageContextOriginalStoreCacheType] integerValue];</span><br><span class="line">    &#125;</span><br><span class="line">    // origin cache key</span><br><span class="line">    SDWebImageMutableContext *originContext = [context mutableCopy];</span><br><span class="line">    // disable transformer for cache key generation</span><br><span class="line">    originContext[SDWebImageContextImageTransformer] = [NSNull null];</span><br><span class="line">    NSString *key = [self cacheKeyForURL:url context:originContext];</span><br><span class="line">    id&lt;SDImageTransformer&gt; transformer = context[SDWebImageContextImageTransformer];</span><br><span class="line">    if (![transformer conformsToProtocol:@protocol(SDImageTransformer)]) &#123;</span><br><span class="line">        transformer = nil;</span><br><span class="line">    &#125;</span><br><span class="line">    id&lt;SDWebImageCacheSerializer&gt; cacheSerializer = context[SDWebImageContextCacheSerializer];</span><br><span class="line">    </span><br><span class="line">    BOOL shouldTransformImage = downloadedImage &amp;&amp; transformer;</span><br><span class="line">    shouldTransformImage = shouldTransformImage &amp;&amp; (!downloadedImage.sd_isAnimated || (options &amp; SDWebImageTransformAnimatedImage));</span><br><span class="line">    shouldTransformImage = shouldTransformImage &amp;&amp; (!downloadedImage.sd_isVector || (options &amp; SDWebImageTransformVectorImage));</span><br><span class="line">    BOOL shouldCacheOriginal = downloadedImage &amp;&amp; finished;</span><br><span class="line">    </span><br><span class="line">    // if available, store original image to cache</span><br><span class="line">    if (shouldCacheOriginal) &#123;</span><br><span class="line">        // normally use the store cache type, but if target image is transformed, use original store cache type instead</span><br><span class="line">        SDImageCacheType targetStoreCacheType = shouldTransformImage ? originalStoreCacheType : storeCacheType;</span><br><span class="line">        if (cacheSerializer &amp;&amp; (targetStoreCacheType == SDImageCacheTypeDisk || targetStoreCacheType == SDImageCacheTypeAll)) &#123;</span><br><span class="line">            dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_HIGH, 0), ^&#123;</span><br><span class="line">                @autoreleasepool &#123;</span><br><span class="line">                    NSData *cacheData = [cacheSerializer cacheDataWithImage:downloadedImage originalData:downloadedData imageURL:url];</span><br><span class="line">                    [self storeImage:downloadedImage imageData:cacheData forKey:key cacheType:targetStoreCacheType options:options context:context completion:^&#123;</span><br><span class="line">                        // Continue transform process</span><br><span class="line">                        [self callTransformProcessForOperation:operation url:url options:options context:context originalImage:downloadedImage originalData:downloadedData finished:finished progress:progressBlock completed:completedBlock];</span><br><span class="line">                    &#125;];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            [self storeImage:downloadedImage imageData:downloadedData forKey:key cacheType:targetStoreCacheType options:options context:context completion:^&#123;</span><br><span class="line">                // Continue transform process</span><br><span class="line">                [self callTransformProcessForOperation:operation url:url options:options context:context originalImage:downloadedImage originalData:downloadedData finished:finished progress:progressBlock completed:completedBlock];</span><br><span class="line">            &#125;];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        // Continue transform process</span><br><span class="line">        [self callTransformProcessForOperation:operation url:url options:options context:context originalImage:downloadedImage originalData:downloadedData finished:finished progress:progressBlock completed:completedBlock];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// Transform process</span><br><span class="line">- (void)callTransformProcessForOperation:(nonnull SDWebImageCombinedOperation *)operation</span><br><span class="line">                                     url:(nonnull NSURL *)url</span><br><span class="line">                                 options:(SDWebImageOptions)options</span><br><span class="line">                                 context:(SDWebImageContext *)context</span><br><span class="line">                           originalImage:(nullable UIImage *)originalImage</span><br><span class="line">                            originalData:(nullable NSData *)originalData</span><br><span class="line">                                finished:(BOOL)finished</span><br><span class="line">                                progress:(nullable SDImageLoaderProgressBlock)progressBlock</span><br><span class="line">                               completed:(nullable SDInternalCompletionBlock)completedBlock &#123;</span><br><span class="line">    // the target image store cache type</span><br><span class="line">    SDImageCacheType storeCacheType = SDImageCacheTypeAll;</span><br><span class="line">    if (context[SDWebImageContextStoreCacheType]) &#123;</span><br><span class="line">        storeCacheType = [context[SDWebImageContextStoreCacheType] integerValue];</span><br><span class="line">    &#125;</span><br><span class="line">    // transformed cache key</span><br><span class="line">    NSString *key = [self cacheKeyForURL:url context:context];</span><br><span class="line">    id&lt;SDImageTransformer&gt; transformer = context[SDWebImageContextImageTransformer];</span><br><span class="line">    if (![transformer conformsToProtocol:@protocol(SDImageTransformer)]) &#123;</span><br><span class="line">        transformer = nil;</span><br><span class="line">    &#125;</span><br><span class="line">    id&lt;SDWebImageCacheSerializer&gt; cacheSerializer = context[SDWebImageContextCacheSerializer];</span><br><span class="line">    </span><br><span class="line">    BOOL shouldTransformImage = originalImage &amp;&amp; transformer;</span><br><span class="line">    shouldTransformImage = shouldTransformImage &amp;&amp; (!originalImage.sd_isAnimated || (options &amp; SDWebImageTransformAnimatedImage));</span><br><span class="line">    shouldTransformImage = shouldTransformImage &amp;&amp; (!originalImage.sd_isVector || (options &amp; SDWebImageTransformVectorImage));</span><br><span class="line">    // if available, store transformed image to cache</span><br><span class="line">    if (shouldTransformImage) &#123;</span><br><span class="line">        dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_HIGH, 0), ^&#123;</span><br><span class="line">            @autoreleasepool &#123;</span><br><span class="line">                UIImage *transformedImage = [transformer transformedImageWithImage:originalImage forKey:key];</span><br><span class="line">                if (transformedImage &amp;&amp; finished) &#123;</span><br><span class="line">                    BOOL imageWasTransformed = ![transformedImage isEqual:originalImage];</span><br><span class="line">                    NSData *cacheData;</span><br><span class="line">                    // pass nil if the image was transformed, so we can recalculate the data from the image</span><br><span class="line">                    if (cacheSerializer &amp;&amp; (storeCacheType == SDImageCacheTypeDisk || storeCacheType == SDImageCacheTypeAll)) &#123;</span><br><span class="line">                        cacheData = [cacheSerializer cacheDataWithImage:transformedImage originalData:(imageWasTransformed ? nil : originalData) imageURL:url];</span><br><span class="line">                    &#125; else &#123;</span><br><span class="line">                        cacheData = (imageWasTransformed ? nil : originalData);</span><br><span class="line">                    &#125;</span><br><span class="line">                    [self storeImage:transformedImage imageData:cacheData forKey:key cacheType:storeCacheType options:options context:context completion:^&#123;</span><br><span class="line">                        [self callCompletionBlockForOperation:operation completion:completedBlock image:transformedImage data:originalData error:nil cacheType:SDImageCacheTypeNone finished:finished url:url];</span><br><span class="line">                    &#125;];</span><br><span class="line">                &#125; else &#123;</span><br><span class="line">                    [self callCompletionBlockForOperation:operation completion:completedBlock image:transformedImage data:originalData error:nil cacheType:SDImageCacheTypeNone finished:finished url:url];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        [self callCompletionBlockForOperation:operation completion:completedBlock image:originalImage data:originalData error:nil cacheType:SDImageCacheTypeNone finished:finished url:url];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>先检查内存是否有缓存，没有从磁盘查找，都没有开启一个图片下载任务，拿到图片数据缓存到内存，磁盘，磁盘查找源码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line">- (nullable NSOperation *)queryCacheOperationForKey:(nullable NSString *)key options:(SDImageCacheOptions)options context:(nullable SDWebImageContext *)context cacheType:(SDImageCacheType)queryCacheType done:(nullable SDImageCacheQueryCompletionBlock)doneBlock &#123;</span><br><span class="line">    if (!key) &#123;</span><br><span class="line">        if (doneBlock) &#123;</span><br><span class="line">            doneBlock(nil, nil, SDImageCacheTypeNone);</span><br><span class="line">        &#125;</span><br><span class="line">        return nil;</span><br><span class="line">    &#125;</span><br><span class="line">    // Invalid cache type</span><br><span class="line">    if (queryCacheType == SDImageCacheTypeNone) &#123;</span><br><span class="line">        if (doneBlock) &#123;</span><br><span class="line">            doneBlock(nil, nil, SDImageCacheTypeNone);</span><br><span class="line">        &#125;</span><br><span class="line">        return nil;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    // First check the in-memory cache...</span><br><span class="line">    UIImage *image;</span><br><span class="line">    if (queryCacheType != SDImageCacheTypeDisk) &#123;</span><br><span class="line">        image = [self imageFromMemoryCacheForKey:key];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    if (image) &#123;</span><br><span class="line">        if (options &amp; SDImageCacheDecodeFirstFrameOnly) &#123;</span><br><span class="line">            // Ensure static image</span><br><span class="line">            Class animatedImageClass = image.class;</span><br><span class="line">            if (image.sd_isAnimated || ([animatedImageClass isSubclassOfClass:[UIImage class]] &amp;&amp; [animatedImageClass conformsToProtocol:@protocol(SDAnimatedImage)])) &#123;</span><br><span class="line">#if SD_MAC</span><br><span class="line">                image = [[NSImage alloc] initWithCGImage:image.CGImage scale:image.scale orientation:kCGImagePropertyOrientationUp];</span><br><span class="line">#else</span><br><span class="line">                image = [[UIImage alloc] initWithCGImage:image.CGImage scale:image.scale orientation:image.imageOrientation];</span><br><span class="line">#endif</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; else if (options &amp; SDImageCacheMatchAnimatedImageClass) &#123;</span><br><span class="line">            // Check image class matching</span><br><span class="line">            Class animatedImageClass = image.class;</span><br><span class="line">            Class desiredImageClass = context[SDWebImageContextAnimatedImageClass];</span><br><span class="line">            if (desiredImageClass &amp;&amp; ![animatedImageClass isSubclassOfClass:desiredImageClass]) &#123;</span><br><span class="line">                image = nil;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    BOOL shouldQueryMemoryOnly = (queryCacheType == SDImageCacheTypeMemory) || (image &amp;&amp; !(options &amp; SDImageCacheQueryMemoryData));</span><br><span class="line">    if (shouldQueryMemoryOnly) &#123;</span><br><span class="line">        if (doneBlock) &#123;</span><br><span class="line">            doneBlock(image, nil, SDImageCacheTypeMemory);</span><br><span class="line">        &#125;</span><br><span class="line">        return nil;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    // Second check the disk cache...</span><br><span class="line">    NSOperation *operation = [NSOperation new];</span><br><span class="line">    // Check whether we need to synchronously query disk</span><br><span class="line">    // 1. in-memory cache hit &amp; memoryDataSync</span><br><span class="line">    // 2. in-memory cache miss &amp; diskDataSync</span><br><span class="line">    BOOL shouldQueryDiskSync = ((image &amp;&amp; options &amp; SDImageCacheQueryMemoryDataSync) ||</span><br><span class="line">                                (!image &amp;&amp; options &amp; SDImageCacheQueryDiskDataSync));</span><br><span class="line">    void(^queryDiskBlock)(void) =  ^&#123;</span><br><span class="line">        if (operation.isCancelled) &#123;</span><br><span class="line">            if (doneBlock) &#123;</span><br><span class="line">                doneBlock(nil, nil, SDImageCacheTypeNone);</span><br><span class="line">            &#125;</span><br><span class="line">            return;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        @autoreleasepool &#123;</span><br><span class="line">            NSData *diskData = [self diskImageDataBySearchingAllPathsForKey:key];</span><br><span class="line">            UIImage *diskImage;</span><br><span class="line">            SDImageCacheType cacheType = SDImageCacheTypeNone;</span><br><span class="line">            if (image) &#123;</span><br><span class="line">                // the image is from in-memory cache, but need image data</span><br><span class="line">                diskImage = image;</span><br><span class="line">                cacheType = SDImageCacheTypeMemory;</span><br><span class="line">            &#125; else if (diskData) &#123;</span><br><span class="line">                cacheType = SDImageCacheTypeDisk;</span><br><span class="line">                // decode image data only if in-memory cache missed</span><br><span class="line">                diskImage = [self diskImageForKey:key data:diskData options:options context:context];</span><br><span class="line">                if (diskImage &amp;&amp; self.config.shouldCacheImagesInMemory) &#123;</span><br><span class="line">                    NSUInteger cost = diskImage.sd_memoryCost;</span><br><span class="line">                    [self.memoryCache setObject:diskImage forKey:key cost:cost];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            if (doneBlock) &#123;</span><br><span class="line">                if (shouldQueryDiskSync) &#123;</span><br><span class="line">                    doneBlock(diskImage, diskData, cacheType);</span><br><span class="line">                &#125; else &#123;</span><br><span class="line">                    dispatch_async(dispatch_get_main_queue(), ^&#123;</span><br><span class="line">                        doneBlock(diskImage, diskData, cacheType);</span><br><span class="line">                    &#125;);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    </span><br><span class="line">    // Query in ioQueue to keep IO-safe</span><br><span class="line">    if (shouldQueryDiskSync) &#123;</span><br><span class="line">        dispatch_sync(self.ioQueue, queryDiskBlock);</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        dispatch_async(self.ioQueue, queryDiskBlock);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    return operation;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-8、AnimatedImage"><a href="#3-8、AnimatedImage" class="headerlink" title="3.8、AnimatedImage"></a>3.8、AnimatedImage</h3><p>类似<a href="https://github.com/Flipboard/FLAnimatedImage" target="_blank" rel="noopener">FLAnimatedImage</a>高性能播放GIF格式图片，对于大容量GIF图片，直接加载会导致内存暴涨，这点在我负责的APP深有体会，由于GIF图片过大，导致首次加载界面会出现卡顿，界面渲染延迟，后来换成了<a href="https://github.com/Flipboard/FLAnimatedImage" target="_blank" rel="noopener">FLAnimatedImage</a>，解决了播放GIF大图内存的问题。现在SDWebImage也提供了GI图片加载类，提高性能。</p><ul><li><strong>SDAnimatedImage</strong>：继承自UIImage</li><li><strong>SDAnimatedImageView</strong>：继承UIImageView，处理GIF图片播放</li><li><strong>SDAnimatedImageView+WebCache</strong>：提供类似普通图片加载API，加载网络或本地</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * Set the imageView `image` with an `url`.</span><br><span class="line"> *</span><br><span class="line"> * The download is asynchronous and cached.</span><br><span class="line"> *</span><br><span class="line"> * @param url The url for the image.</span><br><span class="line"> */</span><br><span class="line">- (void)sd_setImageWithURL:(nullable NSURL *)url NS_REFINED_FOR_SWIFT;</span><br></pre></td></tr></table></figure><ul><li><strong>SDAnimatedImagePlayer</strong>：A player to control the playback of animated image, which can be used to drive Animated ImageView or any rendering usage, like CALayer/WatchKit/SwiftUI rendering.</li></ul><h3 id="3-9、Categories"><a href="#3-9、Categories" class="headerlink" title="3.9、Categories"></a>3.9、Categories</h3><p>图片相关分类</p><ul><li><strong>NSData+ImageContentType</strong>：图片格式判断，字符串转换</li><li><strong>UIImage+ExtendedCacheData</strong>：给图片关联数据，需遵循NSCoding协议</li><li><strong>UIImage+GIF</strong>：将二进制数据转化为GIF图片</li><li><strong>UIImage+Metadata</strong>： UIImage category for image metadata, including animation, loop count, format, incremental, etc.</li><li><strong>UIImage+MultiFormat</strong>：图片编码解码</li><li><strong>UIImage+ForceDecode</strong>：UIImage category about force decode feature (avoid Image/IO’s lazy decoding during rendering behavior).</li><li><strong>UIImage+Transform</strong>： Provide some commen method for <code>UIImage</code>.Image process is based on Core Graphics and vImage.</li><li><strong>UIImage+MemoryCacheCost</strong>：图片内存消耗</li><li><strong>NSImage+Compatibility</strong>：This category is provided to easily write cross-platform(AppKit/UIKit) code. For common usage, see <code>UIImage+Metadata.h</code></li><li><strong>UIView+WebCacheOperation</strong>：These methods are used to support canceling for UIView image loading, it’s designed to be used internal but not external. All the stored operations are weak, so it will be dalloced after image loading finished. If you need to store operations, use your own class to keep a strong reference for them.</li></ul><h3 id="3-10、WebCache-Categories"><a href="#3-10、WebCache-Categories" class="headerlink" title="3.10、WebCache Categories"></a>3.10、WebCache Categories</h3><p>支持图片设置UI控件设置图片分类。<strong>UIView+WebCache</strong>分类添加了图片主要设置逻辑。其次就是我们熟知的<strong>UIImageView+WebCache</strong>、<strong>UIImageView+HighlightedWebCache</strong>、<strong>UIButton+WebCache</strong>、<strong>NSButton+WebCache</strong>、</p><ul><li><strong>UIView+WebCache</strong></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * Set the imageView `image` with an `url` and optionally a placeholder image.</span><br><span class="line"> *</span><br><span class="line"> * The download is asynchronous and cached.</span><br><span class="line"> *</span><br><span class="line"> * @param url            The url for the image.</span><br><span class="line"> * @param placeholder    The image to be set initially, until the image request finishes.</span><br><span class="line"> * @param options        The options to use when downloading the image. @see SDWebImageOptions for the possible values.</span><br><span class="line"> * @param context        A context contains different options to perform specify changes or processes, see `SDWebImageContextOption`. This hold the extra objects which `options` enum can not hold.</span><br><span class="line"> * @param setImageBlock  Block used for custom set image code. If not provide, use the built-in set image code (supports `UIImageView/NSImageView` and `UIButton/NSButton` currently)</span><br><span class="line"> * @param progressBlock  A block called while image is downloading</span><br><span class="line"> *                       @note the progress block is executed on a background queue</span><br><span class="line"> * @param completedBlock A block called when operation has been completed.</span><br><span class="line"> *   This block has no return value and takes the requested UIImage as first parameter and the NSData representation as second parameter.</span><br><span class="line"> *   In case of error the image parameter is nil and the third parameter may contain an NSError.</span><br><span class="line"> *</span><br><span class="line"> *   The forth parameter is an `SDImageCacheType` enum indicating if the image was retrieved from the local cache</span><br><span class="line"> *   or from the memory cache or from the network.</span><br><span class="line"> *</span><br><span class="line"> *   The fith parameter normally is always YES. However, if you provide SDWebImageAvoidAutoSetImage with SDWebImageProgressiveLoad options to enable progressive downloading and set the image yourself. This block is thus called repeatedly with a partial image. When image is fully downloaded, the</span><br><span class="line"> *   block is called a last time with the full image and the last parameter set to YES.</span><br><span class="line"> *</span><br><span class="line"> *   The last parameter is the original image URL</span><br><span class="line"> */</span><br><span class="line">- (void)sd_internalSetImageWithURL:(nullable NSURL *)url</span><br><span class="line">                  placeholderImage:(nullable UIImage *)placeholder</span><br><span class="line">                           options:(SDWebImageOptions)options</span><br><span class="line">                           context:(nullable SDWebImageContext *)context</span><br><span class="line">                     setImageBlock:(nullable SDSetImageBlock)setImageBlock</span><br><span class="line">                          progress:(nullable SDImageLoaderProgressBlock)progressBlock</span><br><span class="line">                         completed:(nullable SDInternalCompletionBlock)completedBlock;</span><br><span class="line">/**</span><br><span class="line"> * Cancel the current image load</span><br><span class="line"> */</span><br><span class="line">- (void)sd_cancelCurrentImageLoad;</span><br><span class="line"></span><br><span class="line">#if SD_UIKIT || SD_MAC</span><br><span class="line"></span><br><span class="line">#pragma mark - Image Transition</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> The image transition when image load finished. See `SDWebImageTransition`.</span><br><span class="line"> If you specify nil, do not do transition. Defautls to nil.</span><br><span class="line"> */</span><br><span class="line">@property (nonatomic, strong, nullable) SDWebImageTransition *sd_imageTransition;</span><br><span class="line"></span><br><span class="line">#pragma mark - Image Indicator</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> The image indicator during the image loading. If you do not need indicator, specify nil. Defaults to nil</span><br><span class="line"> The setter will remove the old indicator view and add new indicator view to current view&apos;s subview.</span><br><span class="line"> @note Because this is UI related, you should access only from the main queue.</span><br><span class="line"> */</span><br><span class="line">@property (nonatomic, strong, nullable) id&lt;SDWebImageIndicator&gt; sd_imageIndicator;</span><br><span class="line"></span><br><span class="line">#endif</span><br></pre></td></tr></table></figure><p>方法实现：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br></pre></td><td class="code"><pre><span class="line">- (void)sd_internalSetImageWithURL:(nullable NSURL *)url</span><br><span class="line">                  placeholderImage:(nullable UIImage *)placeholder</span><br><span class="line">                           options:(SDWebImageOptions)options</span><br><span class="line">                           context:(nullable SDWebImageContext *)context</span><br><span class="line">                     setImageBlock:(nullable SDSetImageBlock)setImageBlock</span><br><span class="line">                          progress:(nullable SDImageLoaderProgressBlock)progressBlock</span><br><span class="line">                         completed:(nullable SDInternalCompletionBlock)completedBlock &#123;</span><br><span class="line">    if (context) &#123;</span><br><span class="line">        // copy to avoid mutable object</span><br><span class="line">        context = [context copy];</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        context = [NSDictionary dictionary];</span><br><span class="line">    &#125;</span><br><span class="line">    NSString *validOperationKey = context[SDWebImageContextSetImageOperationKey];</span><br><span class="line">    if (!validOperationKey) &#123;</span><br><span class="line">        // pass through the operation key to downstream, which can used for tracing operation or image view class</span><br><span class="line">        validOperationKey = NSStringFromClass([self class]);</span><br><span class="line">        SDWebImageMutableContext *mutableContext = [context mutableCopy];</span><br><span class="line">        mutableContext[SDWebImageContextSetImageOperationKey] = validOperationKey;</span><br><span class="line">        context = [mutableContext copy];</span><br><span class="line">    &#125;</span><br><span class="line">    self.sd_latestOperationKey = validOperationKey;</span><br><span class="line">    /// 取消上一次的下载任务</span><br><span class="line">    [self sd_cancelImageLoadOperationWithKey:validOperationKey];</span><br><span class="line">    self.sd_imageURL = url;</span><br><span class="line">    </span><br><span class="line">    /// 如果不延迟加载展位图，就先显示占位图</span><br><span class="line">    if (!(options &amp; SDWebImageDelayPlaceholder)) &#123;</span><br><span class="line">        dispatch_main_async_safe(^&#123;</span><br><span class="line">            [self sd_setImage:placeholder imageData:nil basedOnClassOrViaCustomSetImageBlock:setImageBlock cacheType:SDImageCacheTypeNone imageURL:url];</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    if (url) &#123;</span><br><span class="line">        // reset the progress</span><br><span class="line">        NSProgress *imageProgress = objc_getAssociatedObject(self, @selector(sd_imageProgress));</span><br><span class="line">        if (imageProgress) &#123;</span><br><span class="line">            imageProgress.totalUnitCount = 0;</span><br><span class="line">            imageProgress.completedUnitCount = 0;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">#if SD_UIKIT || SD_MAC</span><br><span class="line">        // check and start image indicator</span><br><span class="line">        [self sd_startImageIndicator];</span><br><span class="line">        id&lt;SDWebImageIndicator&gt; imageIndicator = self.sd_imageIndicator;</span><br><span class="line">#endif</span><br><span class="line">        SDWebImageManager *manager = context[SDWebImageContextCustomManager];</span><br><span class="line">        if (!manager) &#123;</span><br><span class="line">            manager = [SDWebImageManager sharedManager];</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            // remove this manager to avoid retain cycle (manger -&gt; loader -&gt; operation -&gt; context -&gt; manager)</span><br><span class="line">            SDWebImageMutableContext *mutableContext = [context mutableCopy];</span><br><span class="line">            mutableContext[SDWebImageContextCustomManager] = nil;</span><br><span class="line">            context = [mutableContext copy];</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        SDImageLoaderProgressBlock combinedProgressBlock = ^(NSInteger receivedSize, NSInteger expectedSize, NSURL * _Nullable targetURL) &#123;</span><br><span class="line">            if (imageProgress) &#123;</span><br><span class="line">                imageProgress.totalUnitCount = expectedSize;</span><br><span class="line">                imageProgress.completedUnitCount = receivedSize;</span><br><span class="line">            &#125;</span><br><span class="line">#if SD_UIKIT || SD_MAC</span><br><span class="line">            if ([imageIndicator respondsToSelector:@selector(updateIndicatorProgress:)]) &#123;</span><br><span class="line">                double progress = 0;</span><br><span class="line">                if (expectedSize != 0) &#123;</span><br><span class="line">                    progress = (double)receivedSize / expectedSize;</span><br><span class="line">                &#125;</span><br><span class="line">                progress = MAX(MIN(progress, 1), 0); // 0.0 - 1.0</span><br><span class="line">                dispatch_async(dispatch_get_main_queue(), ^&#123;</span><br><span class="line">                    [imageIndicator updateIndicatorProgress:progress];</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;</span><br><span class="line">#endif</span><br><span class="line">          /// 回调下载进度  </span><br><span class="line">          if (progressBlock) &#123;</span><br><span class="line">                progressBlock(receivedSize, expectedSize, targetURL);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        @weakify(self);</span><br><span class="line">        id &lt;SDWebImageOperation&gt; operation = [manager loadImageWithURL:url options:options context:context progress:combinedProgressBlock completed:^(UIImage *image, NSData *data, NSError *error, SDImageCacheType cacheType, BOOL finished, NSURL *imageURL) &#123;</span><br><span class="line">            @strongify(self);</span><br><span class="line">            if (!self) &#123; return; &#125;</span><br><span class="line">            // if the progress not been updated, mark it to complete state</span><br><span class="line">            if (imageProgress &amp;&amp; finished &amp;&amp; !error &amp;&amp; imageProgress.totalUnitCount == 0 &amp;&amp; imageProgress.completedUnitCount == 0) &#123;</span><br><span class="line">                imageProgress.totalUnitCount = SDWebImageProgressUnitCountUnknown;</span><br><span class="line">                imageProgress.completedUnitCount = SDWebImageProgressUnitCountUnknown;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">#if SD_UIKIT || SD_MAC</span><br><span class="line">            // check and stop image indicator</span><br><span class="line">            if (finished) &#123;</span><br><span class="line">                [self sd_stopImageIndicator];</span><br><span class="line">            &#125;</span><br><span class="line">#endif</span><br><span class="line">            </span><br><span class="line">            BOOL shouldCallCompletedBlock = finished || (options &amp; SDWebImageAvoidAutoSetImage);</span><br><span class="line">            BOOL shouldNotSetImage = ((image &amp;&amp; (options &amp; SDWebImageAvoidAutoSetImage)) ||</span><br><span class="line">                                      (!image &amp;&amp; !(options &amp; SDWebImageDelayPlaceholder)));</span><br><span class="line">            SDWebImageNoParamsBlock callCompletedBlockClojure = ^&#123;</span><br><span class="line">                if (!self) &#123; return; &#125;</span><br><span class="line">                if (!shouldNotSetImage) &#123;</span><br><span class="line">                    [self sd_setNeedsLayout];</span><br><span class="line">                &#125;</span><br><span class="line">                if (completedBlock &amp;&amp; shouldCallCompletedBlock) &#123;</span><br><span class="line">                    completedBlock(image, data, error, cacheType, finished, url);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;;</span><br><span class="line">            </span><br><span class="line">            // case 1a: we got an image, but the SDWebImageAvoidAutoSetImage flag is set</span><br><span class="line">            // OR</span><br><span class="line">            // case 1b: we got no image and the SDWebImageDelayPlaceholder is not set</span><br><span class="line">            if (shouldNotSetImage) &#123;</span><br><span class="line">                dispatch_main_async_safe(callCompletedBlockClojure);</span><br><span class="line">                return;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            UIImage *targetImage = nil;</span><br><span class="line">            NSData *targetData = nil;</span><br><span class="line">            if (image) &#123;</span><br><span class="line">                // case 2a: we got an image and the SDWebImageAvoidAutoSetImage is not set</span><br><span class="line">                targetImage = image;</span><br><span class="line">                targetData = data;</span><br><span class="line">            &#125; else if (options &amp; SDWebImageDelayPlaceholder) &#123;</span><br><span class="line">                // case 2b: we got no image and the SDWebImageDelayPlaceholder flag is set</span><br><span class="line">                targetImage = placeholder;</span><br><span class="line">                targetData = nil;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">#if SD_UIKIT || SD_MAC</span><br><span class="line">            // check whether we should use the image transition</span><br><span class="line">            SDWebImageTransition *transition = nil;</span><br><span class="line">            if (finished &amp;&amp; (options &amp; SDWebImageForceTransition || cacheType == SDImageCacheTypeNone)) &#123;</span><br><span class="line">                transition = self.sd_imageTransition;</span><br><span class="line">            &#125;</span><br><span class="line">#endif</span><br><span class="line">            dispatch_main_async_safe(^&#123;</span><br><span class="line">#if SD_UIKIT || SD_MAC</span><br><span class="line">                /// 设置缓存或网络加载图片</span><br><span class="line">                [self sd_setImage:targetImage imageData:targetData basedOnClassOrViaCustomSetImageBlock:setImageBlock transition:transition cacheType:cacheType imageURL:imageURL];</span><br><span class="line">#else</span><br><span class="line">                [self sd_setImage:targetImage imageData:targetData basedOnClassOrViaCustomSetImageBlock:setImageBlock cacheType:cacheType imageURL:imageURL];</span><br><span class="line">#endif</span><br><span class="line">                callCompletedBlockClojure();</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;];</span><br><span class="line">        </span><br><span class="line">        /// 存储图片下载operation</span><br><span class="line">        [self sd_setImageLoadOperation:operation forKey:validOperationKey];</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">#if SD_UIKIT || SD_MAC</span><br><span class="line">        [self sd_stopImageIndicator];</span><br><span class="line">#endif</span><br><span class="line">        dispatch_main_async_safe(^&#123;</span><br><span class="line">            if (completedBlock) &#123;</span><br><span class="line">                NSError *error = [NSError errorWithDomain:SDWebImageErrorDomain code:SDWebImageErrorInvalidURL userInfo:@&#123;NSLocalizedDescriptionKey : @&quot;Image url is nil&quot;&#125;];</span><br><span class="line">                completedBlock(nil, nil, error, SDImageCacheTypeNone, YES, url);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (void)sd_setImage:(UIImage *)image imageData:(NSData *)imageData basedOnClassOrViaCustomSetImageBlock:(SDSetImageBlock)setImageBlock cacheType:(SDImageCacheType)cacheType imageURL:(NSURL *)imageURL &#123;</span><br><span class="line">#if SD_UIKIT || SD_MAC</span><br><span class="line">    [self sd_setImage:image imageData:imageData basedOnClassOrViaCustomSetImageBlock:setImageBlock transition:nil cacheType:cacheType imageURL:imageURL];</span><br><span class="line">#else</span><br><span class="line">    // watchOS does not support view transition. Simplify the logic</span><br><span class="line">    if (setImageBlock) &#123;</span><br><span class="line">        setImageBlock(image, imageData, cacheType, imageURL);</span><br><span class="line">    &#125; else if ([self isKindOfClass:[UIImageView class]]) &#123;</span><br><span class="line">        UIImageView *imageView = (UIImageView *)self;</span><br><span class="line">        [imageView setImage:image];</span><br><span class="line">    &#125;</span><br><span class="line">#endif</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#if SD_UIKIT || SD_MAC</span><br><span class="line">- (void)sd_setImage:(UIImage *)image imageData:(NSData *)imageData basedOnClassOrViaCustomSetImageBlock:(SDSetImageBlock)setImageBlock transition:(SDWebImageTransition *)transition cacheType:(SDImageCacheType)cacheType imageURL:(NSURL *)imageURL &#123;</span><br><span class="line">    UIView *view = self;</span><br><span class="line">    SDSetImageBlock finalSetImageBlock;</span><br><span class="line">    if (setImageBlock) &#123;</span><br><span class="line">        finalSetImageBlock = setImageBlock;</span><br><span class="line">    &#125; else if ([view isKindOfClass:[UIImageView class]]) &#123;</span><br><span class="line">        UIImageView *imageView = (UIImageView *)view;</span><br><span class="line">        finalSetImageBlock = ^(UIImage *setImage, NSData *setImageData, SDImageCacheType setCacheType, NSURL *setImageURL) &#123;</span><br><span class="line">            imageView.image = setImage;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">#if SD_UIKIT</span><br><span class="line">    else if ([view isKindOfClass:[UIButton class]]) &#123;</span><br><span class="line">        UIButton *button = (UIButton *)view;</span><br><span class="line">        finalSetImageBlock = ^(UIImage *setImage, NSData *setImageData, SDImageCacheType setCacheType, NSURL *setImageURL) &#123;</span><br><span class="line">            [button setImage:setImage forState:UIControlStateNormal];</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">#endif</span><br><span class="line">#if SD_MAC</span><br><span class="line">    else if ([view isKindOfClass:[NSButton class]]) &#123;</span><br><span class="line">        NSButton *button = (NSButton *)view;</span><br><span class="line">        finalSetImageBlock = ^(UIImage *setImage, NSData *setImageData, SDImageCacheType setCacheType, NSURL *setImageURL) &#123;</span><br><span class="line">            button.image = setImage;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">#endif</span><br><span class="line">    </span><br><span class="line">    if (transition) &#123;</span><br><span class="line">#if SD_UIKIT</span><br><span class="line">        [UIView transitionWithView:view duration:0 options:0 animations:^&#123;</span><br><span class="line">            // 0 duration to let UIKit render placeholder and prepares block</span><br><span class="line">            if (transition.prepares) &#123;</span><br><span class="line">                transition.prepares(view, image, imageData, cacheType, imageURL);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; completion:^(BOOL finished) &#123;</span><br><span class="line">            [UIView transitionWithView:view duration:transition.duration options:transition.animationOptions animations:^&#123;</span><br><span class="line">                if (finalSetImageBlock &amp;&amp; !transition.avoidAutoSetImage) &#123;</span><br><span class="line">                    finalSetImageBlock(image, imageData, cacheType, imageURL);</span><br><span class="line">                &#125;</span><br><span class="line">                if (transition.animations) &#123;</span><br><span class="line">                    transition.animations(view, image);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; completion:transition.completion];</span><br><span class="line">        &#125;];</span><br><span class="line">#elif SD_MAC</span><br><span class="line">        [NSAnimationContext runAnimationGroup:^(NSAnimationContext * _Nonnull prepareContext) &#123;</span><br><span class="line">            // 0 duration to let AppKit render placeholder and prepares block</span><br><span class="line">            prepareContext.duration = 0;</span><br><span class="line">            if (transition.prepares) &#123;</span><br><span class="line">                transition.prepares(view, image, imageData, cacheType, imageURL);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; completionHandler:^&#123;</span><br><span class="line">            [NSAnimationContext runAnimationGroup:^(NSAnimationContext * _Nonnull context) &#123;</span><br><span class="line">                context.duration = transition.duration;</span><br><span class="line">                #pragma clang diagnostic push</span><br><span class="line">                #pragma clang diagnostic ignored &quot;-Wdeprecated-declarations&quot;</span><br><span class="line">                CAMediaTimingFunction *timingFunction = transition.timingFunction;</span><br><span class="line">                #pragma clang diagnostic pop</span><br><span class="line">                if (!timingFunction) &#123;</span><br><span class="line">                    timingFunction = SDTimingFunctionFromAnimationOptions(transition.animationOptions);</span><br><span class="line">                &#125;</span><br><span class="line">                context.timingFunction = timingFunction;</span><br><span class="line">                context.allowsImplicitAnimation = SD_OPTIONS_CONTAINS(transition.animationOptions, SDWebImageAnimationOptionAllowsImplicitAnimation);</span><br><span class="line">                if (finalSetImageBlock &amp;&amp; !transition.avoidAutoSetImage) &#123;</span><br><span class="line">                    finalSetImageBlock(image, imageData, cacheType, imageURL);</span><br><span class="line">                &#125;</span><br><span class="line">                CATransition *trans = SDTransitionFromAnimationOptions(transition.animationOptions);</span><br><span class="line">                if (trans) &#123;</span><br><span class="line">                    [view.layer addAnimation:trans forKey:kCATransition];</span><br><span class="line">                &#125;</span><br><span class="line">                if (transition.animations) &#123;</span><br><span class="line">                    transition.animations(view, image);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; completionHandler:^&#123;</span><br><span class="line">                if (transition.completion) &#123;</span><br><span class="line">                    transition.completion(YES);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;];</span><br><span class="line">        &#125;];</span><br><span class="line">#endif</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        if (finalSetImageBlock) &#123;</span><br><span class="line">            finalSetImageBlock(image, imageData, cacheType, imageURL);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">#endif</span><br></pre></td></tr></table></figure><p>取消下载任务</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">- (void)sd_cancelImageLoadOperationWithKey:(nullable NSString *)key &#123;</span><br><span class="line">    if (key) &#123;</span><br><span class="line">        // Cancel in progress downloader from queue</span><br><span class="line">        SDOperationsDictionary *operationDictionary = [self sd_operationDictionary];</span><br><span class="line">        id&lt;SDWebImageOperation&gt; operation;</span><br><span class="line">        </span><br><span class="line">        @synchronized (self) &#123;</span><br><span class="line">            operation = [operationDictionary objectForKey:key];</span><br><span class="line">        &#125;</span><br><span class="line">        if (operation) &#123;</span><br><span class="line">            if ([operation conformsToProtocol:@protocol(SDWebImageOperation)]) &#123;</span><br><span class="line">                [operation cancel];</span><br><span class="line">            &#125;</span><br><span class="line">            @synchronized (self) &#123;</span><br><span class="line">                [operationDictionary removeObjectForKey:key];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>总的来说，5.0之后的版本，图片设置分类代码简化了许多，因为相关逻辑都被抽离到了Manager里，分类里之需关注方法调用，不用再处理复杂图片的查询，下载，缓存等逻辑。</p><h3 id="3-11、SDWebImageMapKit"><a href="#3-11、SDWebImageMapKit" class="headerlink" title="3.11、SDWebImageMapKit"></a>3.11、SDWebImageMapKit</h3><p>主要为MKAnnotationView添加了设置图片分类。</p><h2 id="四、软件架构设计需知识储备"><a href="#四、软件架构设计需知识储备" class="headerlink" title="四、软件架构设计需知识储备"></a>四、软件架构设计需知识储备</h2><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gfjtj8emsuj311p0u0478.jpg" alt=""></p><p>对源码阅读一遍，我所理解的设计图片加载库所需要的知识储备</p><blockquote><ul><li>CocoTouch各种framework</li><li>多线程</li><li>图片编/解码</li><li>网络</li><li>文件系统</li><li>跨平台适配</li><li>设计模式</li><li>软件设计原则</li><li>算法</li></ul></blockquote><h2 id="五、相关插件"><a href="#五、相关插件" class="headerlink" title="五、相关插件"></a>五、相关插件</h2><h3 id="Coders-for-additional-image-formats"><a href="#Coders-for-additional-image-formats" class="headerlink" title="Coders for additional image formats"></a>Coders for additional image formats</h3><table><thead><tr><th style="text-align:center">Plugin</th><th style="text-align:center">Description</th></tr></thead><tbody><tr><td style="text-align:center"><a href="https://github.com/SDWebImage/SDWebImageWebPCoder" target="_blank" rel="noopener">SDWebImageWebPCoder</a></td><td style="text-align:center">coder for WebP format. Based on <a href="https://chromium.googlesource.com/webm/libwebp" target="_blank" rel="noopener">libwebp</a></td></tr><tr><td style="text-align:center"><a href="https://github.com/SDWebImage/SDWebImageHEIFCoder" target="_blank" rel="noopener">SDWebImageHEIFCoder</a></td><td style="text-align:center">coder for HEIF format, iOS 8+/macOS 10.10+ support. Based on <a href="https://github.com/strukturag/libheif" target="_blank" rel="noopener">libheif</a></td></tr><tr><td style="text-align:center"><a href="https://github.com/SDWebImage/SDWebImageBPGCoder" target="_blank" rel="noopener">SDWebImageBPGCoder</a></td><td style="text-align:center">coder for BPG format. Based on <a href="https://github.com/mirrorer/libbpg" target="_blank" rel="noopener">libbpg</a></td></tr><tr><td style="text-align:center"><a href="https://github.com/SDWebImage/SDWebImageFLIFCoder" target="_blank" rel="noopener">SDWebImageFLIFCoder</a></td><td style="text-align:center">coder for FLIF format. Based on <a href="https://github.com/FLIF-hub/FLIF" target="_blank" rel="noopener">libflif</a></td></tr><tr><td style="text-align:center"><a href="https://github.com/SDWebImage/SDWebImageAVIFCoder" target="_blank" rel="noopener">SDWebImageAVIFCoder</a></td><td style="text-align:center">coder for AVIF (AV1-based) format. Based on <a href="https://github.com/AOMediaCodec/libavif" target="_blank" rel="noopener">libavif</a></td></tr><tr><td style="text-align:center"><a href="https://github.com/SDWebImage/SDWebImagePDFCoder" target="_blank" rel="noopener">SDWebImagePDFCoder</a></td><td style="text-align:center">coder for PDF vector format. Using built-in frameworks</td></tr><tr><td style="text-align:center"><a href="https://github.com/SDWebImage/SDWebImageSVGCoder" target="_blank" rel="noopener">SDWebImageSVGCoder</a></td><td style="text-align:center">coder for SVG vector format. Using built-in frameworks</td></tr><tr><td style="text-align:center"><a href="https://github.com/SDWebImage/SDWebImageLottieCoder" target="_blank" rel="noopener">SDWebImageLottieCoder</a></td><td style="text-align:center">coder for Lottie animation format. Based on <a href="https://github.com/Samsung/rlottie" target="_blank" rel="noopener">rlottie</a></td></tr></tbody></table><h3 id="Custom-Caches"><a href="#Custom-Caches" class="headerlink" title="Custom Caches"></a>Custom Caches</h3><table><thead><tr><th style="text-align:center">Plugin</th><th style="text-align:center">Description</th></tr></thead><tbody><tr><td style="text-align:center"><a href="https://github.com/SDWebImage/SDWebImageYYPlugin" target="_blank" rel="noopener">SDWebImageYYPlugin</a></td><td style="text-align:center">plugin to support caching images with <a href="https://github.com/ibireme/YYCache" target="_blank" rel="noopener">YYCache</a></td></tr><tr><td style="text-align:center"><a href="https://github.com/SDWebImage/SDWebImagePINPlugin" target="_blank" rel="noopener">SDWebImagePINPlugin</a></td><td style="text-align:center">plugin to support caching images with <a href="https://github.com/pinterest/PINCache" target="_blank" rel="noopener">PINCache</a></td></tr></tbody></table><h3 id="Custom-Loaders"><a href="#Custom-Loaders" class="headerlink" title="Custom Loaders"></a>Custom Loaders</h3><table><thead><tr><th style="text-align:center">Plugin</th><th style="text-align:center">Description</th></tr></thead><tbody><tr><td style="text-align:center"><a href="https://github.com/SDWebImage/SDWebImagePhotosPlugin" target="_blank" rel="noopener">SDWebImagePhotosPlugin</a></td><td style="text-align:center">plugin to support loading images from Photos (using <code>Photos.framework</code>)</td></tr><tr><td style="text-align:center"><a href="https://github.com/SDWebImage/SDWebImageLinkPlugin" target="_blank" rel="noopener">SDWebImageLinkPlugin</a></td><td style="text-align:center">plugin to support loading images from rich link url, as well as <code>LPLinkView</code> (using <code>LinkPresentation.framework</code>)</td></tr></tbody></table><h3 id="Integration-with-3rd-party-libraries"><a href="#Integration-with-3rd-party-libraries" class="headerlink" title="Integration with 3rd party libraries"></a>Integration with 3rd party libraries</h3><table><thead><tr><th style="text-align:center">Plugin</th><th style="text-align:center">Description</th></tr></thead><tbody><tr><td style="text-align:center"><a href="https://github.com/SDWebImage/SDWebImageLottiePlugin" target="_blank" rel="noopener">SDWebImageLottiePlugin</a></td><td style="text-align:center">plugin to support <a href="https://github.com/airbnb/lottie-ios" target="_blank" rel="noopener">Lottie-iOS</a>, vector animation rending with remote JSON files</td></tr><tr><td style="text-align:center"><a href="https://github.com/SDWebImage/SDWebImageLottiePlugin" target="_blank" rel="noopener">SDWebImageSVGKitPlugin</a></td><td style="text-align:center">plugin to support <a href="https://github.com/SVGKit/SVGKit" target="_blank" rel="noopener">SVGKit</a>, SVG rendering using Core Animation, iOS 8+/macOS 10.10+ support</td></tr><tr><td style="text-align:center"><a href="https://github.com/SDWebImage/SDWebImageFLPlugin" target="_blank" rel="noopener">SDWebImageFLPlugin</a></td><td style="text-align:center">plugin to support <a href="https://github.com/Flipboard/FLAnimatedImage" target="_blank" rel="noopener">FLAnimatedImage</a> as the engine for animated GIFs</td></tr><tr><td style="text-align:center"><a href="https://github.com/SDWebImage/SDWebImageYYPlugin" target="_blank" rel="noopener">SDWebImageYYPlugin</a></td><td style="text-align:center">plugin to integrate <a href="https://github.com/ibireme/YYImage" target="_blank" rel="noopener">YYImage</a> &amp; <a href="https://github.com/ibireme/YYCache" target="_blank" rel="noopener">YYCache</a> for image rendering &amp; caching</td></tr></tbody></table><h2 id="六、结语"><a href="#六、结语" class="headerlink" title="六、结语"></a>六、结语</h2><blockquote><p>到这里，对源码的解读也就告一段落了。最新版本的架构设计也更加合理，使用协议，使扩展相当灵活，也更容易插件化，对各个功能能够轻松实现替换。框架图片编码解码处理，对于现在的我来说，理解还是有些吃力，总的来说，这次的源码阅读，我收获颇多，好的框架，更易于让人使用，阅读，理解，希望自己在以后编码设计中，能够汲取其优秀的编程设计思想，灵活运用。以后有时间，也会继续阅读源码，相信每次阅读，都会有新的体会与收获。如文章有解读不对的地方，希望能批评指正。</p></blockquote><hr>]]></content>
    
    <summary type="html">
    
      笔者在业余时间对iOS著名图片加载框架[SDWebImage ](https://github.com/SDWebImage/SDWebImage)**V5.8.0**源码进行了阅读，发现和V5.0之前版本架构设计有很大的不同，V5.0之后的版本是面向协议的架构设计，将图片缓存、编码解码、下载、自定义转换定义了一套标准协议方法，使用者想自定义一些操作，通过遵循协议，可以很方便的进行扩展。总之，SDWebImage源码是非常值得阅读，它应用了软件设计原则，和设计模式，使软件架构层次清晰，更容易理解阅读，扩展。SDWebImage源码还是有点多的，笔者零零散散花了几天，对源码粗略的读了一遍，收获还是颇多的，由于笔者现在水平有限，对于有些源码理解不是很到位，有理解描述不对的地方，希望能批评指正。
    
    </summary>
    
      <category term="iOS" scheme="http://blogwenbo.com/categories/iOS/"/>
    
    
      <category term="iOS" scheme="http://blogwenbo.com/tags/iOS/"/>
    
      <category term="SDWebImage" scheme="http://blogwenbo.com/tags/SDWebImage/"/>
    
  </entry>
  
  <entry>
    <title>设计模式</title>
    <link href="http://blogwenbo.com/2020/06/06/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    <id>http://blogwenbo.com/2020/06/06/设计模式/</id>
    <published>2020-06-06T04:16:11.000Z</published>
    <updated>2020-06-12T16:07:23.710Z</updated>
    
    <content type="html"><![CDATA[<p class="description"></p><a id="more"></a><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote><p>笔者在现在iOS开发中很少使用设计模式，但在日常开发中，接触的CocoTouch开发框架中，很多开发类库都用到了软件设计原则，和设计模式。遵循软件设计原则，合理使用设计模式，对于提高软件可阅读性，扩展性，可维护性，稳定性，是很有必要的。自己现在也是通过浏览博客，查阅资料，对软件设计原则，设计模式有一个大概的了解，先做下文章记录，以后自己在开发中有更深入的学习和应用，会更新博客，写下自己的见解。</p></blockquote><h1 id="软件设计7大原则"><a href="#软件设计7大原则" class="headerlink" title="软件设计7大原则"></a>软件设计7大原则</h1><table><thead><tr><th style="text-align:center">编写</th><th style="text-align:center">全称</th><th style="text-align:center">中文名称</th></tr></thead><tbody><tr><td style="text-align:center">S</td><td style="text-align:center">Single Responsibility Principle</td><td style="text-align:center">单一职责原则</td></tr><tr><td style="text-align:center">O</td><td style="text-align:center">Open Close Principle</td><td style="text-align:center">开闭原则</td></tr><tr><td style="text-align:center">L</td><td style="text-align:center">Liskov Substitution Principle</td><td style="text-align:center">里氏替换原则</td></tr><tr><td style="text-align:center">I</td><td style="text-align:center">Interface Segregation Principle</td><td style="text-align:center">接口隔离原则</td></tr><tr><td style="text-align:center">D</td><td style="text-align:center">Dependence Inversion Principle</td><td style="text-align:center">依赖倒置原则</td></tr><tr><td style="text-align:center">L</td><td style="text-align:center">Law Of Demeter</td><td style="text-align:center">迪米特法则</td></tr><tr><td style="text-align:center">C</td><td style="text-align:center">Composite/Aggregate Reuse Principle CARP</td><td style="text-align:center">组合/聚合复用原则</td></tr></tbody></table><p>前5中被称之为SOLID原则</p><h2 id="思维导图"><a href="#思维导图" class="headerlink" title="思维导图"></a>思维导图</h2><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gfingk7lqtj31490lbju6.jpg" alt=""></p><h2 id="设计原则定义"><a href="#设计原则定义" class="headerlink" title="设计原则定义"></a>设计原则定义</h2><h3 id="开闭原则（Open-Close-Principle）"><a href="#开闭原则（Open-Close-Principle）" class="headerlink" title="开闭原则（Open Close Principle）"></a>开闭原则（Open Close Principle）</h3><p>一个软件实体如类、模块和函数应该对扩展开放，对修改关闭。</p><ul><li><p>iOS应用例子</p><p>1、类别，在不修改现有类，为类添加方法</p></li></ul><h3 id="单一职责原则（Single-Responsibility-Principle）"><a href="#单一职责原则（Single-Responsibility-Principle）" class="headerlink" title="单一职责原则（Single Responsibility Principle）"></a>单一职责原则（Single Responsibility Principle）</h3><p>一个类只允许有一个职责，即只有一个导致该类变更的原因。</p><ul><li><p>iOS应用例子</p><p>1、UIView与CALayer，UIView负责事件管理，提供内容，CALayer负责渲染。</p></li></ul><h3 id="依赖倒置原则（Dependency-Inversion-Principle）"><a href="#依赖倒置原则（Dependency-Inversion-Principle）" class="headerlink" title="依赖倒置原则（Dependency Inversion Principle）"></a>依赖倒置原则（Dependency Inversion Principle）</h3><ul><li>依赖抽象，而不是依赖实现。</li><li>抽象不应该依赖细节；细节应该依赖抽象。</li><li>高层模块不能依赖低层模块，二者都应该依赖抽象。</li></ul><h3 id="接口分离原则（Interface-Segregation-Principle）"><a href="#接口分离原则（Interface-Segregation-Principle）" class="headerlink" title="接口分离原则（Interface Segregation Principle）"></a>接口分离原则（Interface Segregation Principle）</h3><p>多个特定的客户端接口要好于一个通用性的总接口。</p><ul><li><p>iOS应用例子</p><p>1、UITableViewDelegate，UITableViewDataSource，一个专门负责事件响应，一个专门负责数据提供</p></li></ul><h3 id="迪米特法则（Law-of-Demeter）"><a href="#迪米特法则（Law-of-Demeter）" class="headerlink" title="迪米特法则（Law of Demeter）"></a>迪米特法则（Law of Demeter）</h3><p>一个对象应该对尽可能少的对象有接触，也就是只接触那些真正需要接触的对象。</p><h3 id="里氏替换原则（Liskov-Substitution-Principle）"><a href="#里氏替换原则（Liskov-Substitution-Principle）" class="headerlink" title="里氏替换原则（Liskov Substitution Principle）"></a>里氏替换原则（Liskov Substitution Principle）</h3><p>所有引用基类的地方必须能透明地使用其子类的对象，也就是说子类对象可以替换其父类对象，而程序执行效果不变。</p><h3 id="组合-聚合复用原则"><a href="#组合-聚合复用原则" class="headerlink" title="组合/聚合复用原则"></a>组合/聚合复用原则</h3><p>要尽量使用合成/聚合，尽量不要使用继承。</p><h1 id="23种设计模式"><a href="#23种设计模式" class="headerlink" title="23种设计模式"></a>23种设计模式</h1><h2 id="思维导图-1"><a href="#思维导图-1" class="headerlink" title="思维导图"></a>思维导图</h2><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gfimwh5vk2j315r0u0jw8.jpg" alt=""></p><h2 id="设计模式的三个分类"><a href="#设计模式的三个分类" class="headerlink" title="设计模式的三个分类"></a>设计模式的三个分类</h2><p>创建型模式：对象实例化的模式，创建型模式用于解耦对象的实例化过程。</p><p>结构型模式：把类或对象结合在一起形成一个更大的结构。</p><p>行为型模式：类和对象如何交互，及划分责任和算法。</p><h2 id="分类模式的关键点"><a href="#分类模式的关键点" class="headerlink" title="分类模式的关键点"></a>分类模式的关键点</h2><h3 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h3><p>某个类只能有一个实例，提供一个全局的访问点。</p><ul><li><p>iOS应用场景</p><p>1、Cocoa中框架中的<strong>NSFileManager</strong>、<strong>NSUserDefaults</strong>，自己实现的单例等。</p></li></ul><h3 id="简单工厂"><a href="#简单工厂" class="headerlink" title="简单工厂"></a>简单工厂</h3><p>一个工厂类根据传入的参量决定创建出那一种产品类的实例。</p><h3 id="工厂方法"><a href="#工厂方法" class="headerlink" title="工厂方法"></a>工厂方法</h3><p>定义一个创建对象的接口，让子类决定实例化那个类。</p><h3 id="抽象工厂"><a href="#抽象工厂" class="headerlink" title="抽象工厂"></a>抽象工厂</h3><p>创建相关或依赖对象的家族，而无需明确指定具体类。</p><ul><li><p>iOS应用例子</p><p>1、Cocoa将类簇限制在数据存储可能因环境而变的对象生成上。Foundation框架为<code>NSString</code>、<code>NSData</code>、<code>NSDictionary</code>、<code>NSSet</code>、和<code>NSArray</code>对象定义了类簇。公共超类包括上述的不可变类和与其相互补充的可变类<code>NSMutableString</code>、<code>NSMutableData</code>、<code>NSMutableDictionary</code>、<code>NSMutableSet</code>、和<code>NSMutableArray</code>。</p></li></ul><h3 id="建造者模式"><a href="#建造者模式" class="headerlink" title="建造者模式"></a>建造者模式</h3><p>封装一个复杂对象的构建过程，并可以按步骤构造。</p><h3 id="原型模式"><a href="#原型模式" class="headerlink" title="原型模式"></a>原型模式</h3><p>通过复制现有的实例来创建新的实例。</p><ul><li><p>iOS应用场景</p><p>1、在Objective-C中使用原型模式, 首先要遵循NSCoping协议(OC中一些内置类遵循该协议, 例如NSArray, NSMutableArray等)</p></li></ul><h3 id="适配器模式"><a href="#适配器模式" class="headerlink" title="适配器模式"></a>适配器模式</h3><p>将一个类的方法接口转换成客户希望的另外一个接口。</p><h3 id="组合模式"><a href="#组合模式" class="headerlink" title="组合模式"></a>组合模式</h3><p>将对象组合成树形结构以表示“”部分-整体“”的层次结构。</p><h3 id="装饰模式"><a href="#装饰模式" class="headerlink" title="装饰模式"></a>装饰模式</h3><p>动态的给对象添加新的功能。</p><ul><li><p>iOS应用例子</p><p>1、Cocoa在实现某些类时用到了装饰模式，包括<code>NSAttributedString</code>、<code>NSScrollView</code>、和<code>NSTableView</code>。</p></li></ul><h3 id="代理模式"><a href="#代理模式" class="headerlink" title="代理模式"></a>代理模式</h3><p>为其他对象提供一个代理以便控制这个对象的访问。</p><ul><li><p>iOS应用例子</p><p>UITableView，UIScrollView，AppDelegate</p></li></ul><h3 id="亨元（蝇量）模式"><a href="#亨元（蝇量）模式" class="headerlink" title="亨元（蝇量）模式"></a>亨元（蝇量）模式</h3><p>通过共享技术来有效的支持大量细粒度的对象。</p><h3 id="外观模式"><a href="#外观模式" class="headerlink" title="外观模式"></a>外观模式</h3><p>对外提供一个统一的方法，来访问子系统中的一群接口。</p><h3 id="桥接模式"><a href="#桥接模式" class="headerlink" title="桥接模式"></a>桥接模式</h3><p>将抽象部分和它的实现部分分离，使它们都可以独立的变化。</p><h3 id="模板模式："><a href="#模板模式：" class="headerlink" title="模板模式："></a>模板模式：</h3><p>定义一个算法结构，而将一些步骤延迟到子类实现。</p><h3 id="解释器模式"><a href="#解释器模式" class="headerlink" title="解释器模式"></a>解释器模式</h3><p>给定一个语言，定义它的文法的一种表示，并定义一个解释器。</p><h3 id="策略模式"><a href="#策略模式" class="headerlink" title="策略模式"></a>策略模式</h3><p>定义一系列算法，把他们封装起来，并且使它们可以相互替换。</p><h3 id="状态模式"><a href="#状态模式" class="headerlink" title="状态模式"></a>状态模式</h3><p>允许一个对象在其对象内部状态改变时改变它的行为。</p><h3 id="观察者模式"><a href="#观察者模式" class="headerlink" title="观察者模式"></a>观察者模式</h3><p>对象间的一对多的依赖关系。</p><ul><li><p>iOS应用例子</p><p>1、通知、KVO</p></li></ul><h3 id="备忘录模式"><a href="#备忘录模式" class="headerlink" title="备忘录模式"></a>备忘录模式</h3><p>在不破坏封装的前提下，保持对象的内部状态。</p><ul><li><p>iOS应用例子</p><p>1、归档、序列化、CoreData等</p></li></ul><h3 id="中介者模式"><a href="#中介者模式" class="headerlink" title="中介者模式"></a>中介者模式</h3><p>用一个中介对象来封装一系列的对象交互。</p><ul><li><p>iOS应用例子</p><p>1、CTMediator组件化</p></li></ul><h3 id="命令模式"><a href="#命令模式" class="headerlink" title="命令模式"></a>命令模式</h3><p>将命令请求封装为一个对象，使得可以用不同的请求来进行参数化。</p><h3 id="访问者模式"><a href="#访问者模式" class="headerlink" title="访问者模式"></a>访问者模式</h3><p>在不改变数据结构的前提下，增加作用于一组对象元素的新功能。</p><h3 id="责任链模式"><a href="#责任链模式" class="headerlink" title="责任链模式"></a>责任链模式</h3><p>将请求的发送者和接收者解耦，使的多个对象都有处理这个请求的机会。</p><h3 id="迭代器模式"><a href="#迭代器模式" class="headerlink" title="迭代器模式"></a>迭代器模式</h3><p>一种遍历访问聚合对象中各个元素的方法，不暴露该对象的内部结构。</p><ul><li><p>iOS应用例子</p><p>1、Foundation框架中的<code>NSEnumerator</code>类实现了迭代器模式。<code>NSEnumerator</code>抽象类的私有具体子类返回的枚举器对象可以顺序遍历不同类型的集合—数组、集合、字典（值和键）—并将集合中的对象返回给客户代码。</p></li></ul><hr><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><p><a href="https://www.jianshu.com/p/e5c69c7b8c00" target="_blank" rel="noopener">iOS设计模式详解</a></p><p><a href="https://www.cnblogs.com/pony1223/p/7608955.html" target="_blank" rel="noopener">JAVA设计模式总结之23种设计模式</a>]</p><p><a href="https://juejin.im/post/5b9526c1e51d450e69731dc2" target="_blank" rel="noopener">面向对象设计的六大设计原则（附 Demo &amp; UML类图）</a></p>]]></content>
    
    <summary type="html">
    
      设计模式（Design pattern）是一套被反复使用、多数人知晓的、经过分类编目的、代码设计经验的总结。使用设计模式是为了可重用代码、让代码更容易被他人理解、保证代码可靠性。
    
    </summary>
    
      <category term="设计模式" scheme="http://blogwenbo.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="iOS" scheme="http://blogwenbo.com/tags/iOS/"/>
    
      <category term="设计模式" scheme="http://blogwenbo.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="软件设计原则" scheme="http://blogwenbo.com/tags/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%8E%9F%E5%88%99/"/>
    
  </entry>
  
  <entry>
    <title>CTMediator源码浅析及实践</title>
    <link href="http://blogwenbo.com/2020/06/04/CTMediator%E6%BA%90%E7%A0%81%E6%B5%85%E6%9E%90%E5%8F%8A%E5%AE%9E%E8%B7%B5/"/>
    <id>http://blogwenbo.com/2020/06/04/CTMediator源码浅析及实践/</id>
    <published>2020-06-04T06:54:44.000Z</published>
    <updated>2020-06-04T08:42:53.767Z</updated>
    
    <content type="html"><![CDATA[<p class="description"></p><a id="more"></a><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p>组件化开发的概念已经出现很久了，当APP业务庞大到无法很好的团队协作开发，组件化开发模式就派上用场了。发展演变的今天，已经有很多解决方案了，最具有代表的就是<strong>Target-Action</strong>，<strong>URL</strong>，<strong>Protocol</strong>这三种方式，不管用哪一种，适合才是最好的。</p><p>从自己接触到这个概念，就一直很感兴趣，但那会儿公司也没有强制要求用组件化开发，确实公司业务也没有达到需要用这种模式，盲目实行只会增加维护管理的成本。</p><p>最近在公司项目，基于<strong>Target-Action</strong>中间着模式，对现有的工程进行组件化改造，他是<strong>casatwy</strong>老师开源的一个组件化库，最近对源码进行了阅读，源码并不多，就一百来行，精简但是却很强大。下面对源码进行解读吧。</p></blockquote><h2 id="思维导图"><a href="#思维导图" class="headerlink" title="思维导图"></a>思维导图</h2><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gfgairj455j31ge0u0dos.jpg" alt=""></p><h2 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h2><h3 id="CTMediator"><a href="#CTMediator" class="headerlink" title="CTMediator"></a>CTMediator</h3><p>其实现原理是基于Runtime实现方法调度</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">- (id)performSelector:(SEL)aSelector withObject:(id)object;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">NSInvocation</span><br></pre></td></tr></table></figure><p>核心源码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line">- (id)safePerformAction:(SEL)action target:(NSObject *)target params:(NSDictionary *)params</span><br><span class="line">&#123;</span><br><span class="line">    NSMethodSignature* methodSig = [target methodSignatureForSelector:action];</span><br><span class="line">    if(methodSig == nil) &#123;</span><br><span class="line">        return nil;</span><br><span class="line">    &#125;</span><br><span class="line">    const char* retType = [methodSig methodReturnType];</span><br><span class="line"></span><br><span class="line">    if (strcmp(retType, @encode(void)) == 0) &#123;</span><br><span class="line">        NSInvocation *invocation = [NSInvocation invocationWithMethodSignature:methodSig];</span><br><span class="line">        [invocation setArgument:&amp;params atIndex:2];</span><br><span class="line">        [invocation setSelector:action];</span><br><span class="line">        [invocation setTarget:target];</span><br><span class="line">        [invocation invoke];</span><br><span class="line">        return nil;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if (strcmp(retType, @encode(NSInteger)) == 0) &#123;</span><br><span class="line">        NSInvocation *invocation = [NSInvocation invocationWithMethodSignature:methodSig];</span><br><span class="line">        [invocation setArgument:&amp;params atIndex:2];</span><br><span class="line">        [invocation setSelector:action];</span><br><span class="line">        [invocation setTarget:target];</span><br><span class="line">        [invocation invoke];</span><br><span class="line">        NSInteger result = 0;</span><br><span class="line">        [invocation getReturnValue:&amp;result];</span><br><span class="line">        return @(result);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if (strcmp(retType, @encode(BOOL)) == 0) &#123;</span><br><span class="line">        NSInvocation *invocation = [NSInvocation invocationWithMethodSignature:methodSig];</span><br><span class="line">        [invocation setArgument:&amp;params atIndex:2];</span><br><span class="line">        [invocation setSelector:action];</span><br><span class="line">        [invocation setTarget:target];</span><br><span class="line">        [invocation invoke];</span><br><span class="line">        BOOL result = 0;</span><br><span class="line">        [invocation getReturnValue:&amp;result];</span><br><span class="line">        return @(result);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if (strcmp(retType, @encode(CGFloat)) == 0) &#123;</span><br><span class="line">        NSInvocation *invocation = [NSInvocation invocationWithMethodSignature:methodSig];</span><br><span class="line">        [invocation setArgument:&amp;params atIndex:2];</span><br><span class="line">        [invocation setSelector:action];</span><br><span class="line">        [invocation setTarget:target];</span><br><span class="line">        [invocation invoke];</span><br><span class="line">        CGFloat result = 0;</span><br><span class="line">        [invocation getReturnValue:&amp;result];</span><br><span class="line">        return @(result);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if (strcmp(retType, @encode(NSUInteger)) == 0) &#123;</span><br><span class="line">        NSInvocation *invocation = [NSInvocation invocationWithMethodSignature:methodSig];</span><br><span class="line">        [invocation setArgument:&amp;params atIndex:2];</span><br><span class="line">        [invocation setSelector:action];</span><br><span class="line">        [invocation setTarget:target];</span><br><span class="line">        [invocation invoke];</span><br><span class="line">        NSUInteger result = 0;</span><br><span class="line">        [invocation getReturnValue:&amp;result];</span><br><span class="line">        return @(result);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">#pragma clang diagnostic push</span><br><span class="line">#pragma clang diagnostic ignored &quot;-Warc-performSelector-leaks&quot;</span><br><span class="line">    return [target performSelector:action withObject:params];</span><br><span class="line">#pragma clang diagnostic pop</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>头文件开放的两个接口方法，都是对上面这个方法传入参数进行处理，包括一些容错处理</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// 远程App调用入口</span><br><span class="line">- (id _Nullable)performActionWithUrl:(NSURL * _Nullable)url completion:(void(^_Nullable)(NSDictionary * _Nullable info))completion;</span><br><span class="line">// 本地组件调用入口</span><br><span class="line">- (id _Nullable )performTarget:(NSString * _Nullable)targetName action:(NSString * _Nullable)actionName params:(NSDictionary * _Nullable)params shouldCacheTarget:(BOOL)shouldCacheTarget;</span><br></pre></td></tr></table></figure><h3 id="CTMediator-HandyTools"><a href="#CTMediator-HandyTools" class="headerlink" title="CTMediator+HandyTools"></a>CTMediator+HandyTools</h3><p>CTMediator的扩展方法，可以不再VC类里实现跳转，减少依赖，实现解耦。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">- (UIViewController * _Nullable)topViewController;</span><br><span class="line">- (void)pushViewController:(UIViewController *)viewController animated:(BOOL)animated;</span><br><span class="line">- (void)presentViewController:(UIViewController *)viewControllerToPresent animated:(BOOL)animated completion:(void (^ _Nullable )(void))completion;</span><br></pre></td></tr></table></figure><h2 id="实际应用"><a href="#实际应用" class="headerlink" title="实际应用"></a>实际应用</h2><h3 id="一开始就实施"><a href="#一开始就实施" class="headerlink" title="一开始就实施"></a>一开始就实施</h3><p>如果一开始都采用这种架构模式，实现组件化开发还是很容易的，可以更多的专注于业务开发。</p><h3 id="在现有工程实施"><a href="#在现有工程实施" class="headerlink" title="在现有工程实施"></a>在现有工程实施</h3><p>如果是对现有工程实施改造，如果之前模块划分混乱，那么改造起来是相当的痛苦，各种依赖，剪不断，理还乱。</p><ul><li>第一步，制作基础依赖库，供上层业务依赖，如网络请求，工具类，基础UI组件，比较稳定，变动较少</li><li>第二步，拆分业务模块，跳转实施改造，创建Target_XX，文件，XX是targetName，<strong>nativeFetchDetailViewController</strong>是actionName</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">- (UIViewController *)Action_nativeFetchDetailViewController:(NSDictionary *)params</span><br><span class="line">&#123;</span><br><span class="line">    // 因为action是从属于ModuleA的，所以action直接可以使用ModuleA里的所有声明</span><br><span class="line">    DemoModuleADetailViewController *viewController = [[DemoModuleADetailViewController alloc] init];</span><br><span class="line">    viewController.valueLabel.text = params[@&quot;key&quot;];</span><br><span class="line">    return viewController;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建<strong>CTMediator (CTMediatorModuleAActions)</strong>分类，添加跳转方法，这个文件就是需要维护的依赖文件，实现依赖解耦</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">- (UIViewController *)CTMediator_viewControllerForDetail;</span><br></pre></td></tr></table></figure><ul><li>第三步，解决编译报错，并集成到主工程，让主工程编译通过</li></ul><p>当然，CTMediator主要通过Runtime方法调度，不仅仅是实现跳转，它可以动态调度<strong>Target_XX</strong>任意返回值得方法，如基础数据类型，void，OC的类，从而达到解耦的目的，在调用的时候，可以传参是否缓存Target，这在cell复用的时候非常有用，在VC销毁时清除Target即可。</p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><blockquote><p>相对于一般的开源库，<strong>casatwy</strong>老师的这个库，代码非常的精简，但却非常实用强大，可看出作者优秀的架构设计能力。代码不在多，而在精。对于我们日常开发也是很有启发的，对于一个新功能的开发，在开发之前，是不是应该考虑到可扩展，可复用，稳定性，实用性，然后才进行开发。组件化的实施，对于业务多，团队开发，还是很有必要的，但实施工程也会有各种各样的问题，需要不断优化解决，才能让APP更加稳定，更加易于维护。</p></blockquote><hr>]]></content>
    
    <summary type="html">
    
      组件化开发的概念已经出现很久了，当APP业务庞大到无法很好的团队协作开发，组件化开发模式就派上用场了。发展演变的今天，已经有很多解决方案了，最具有代表的就是**Target-Action**，**URL**，**Protocol**这三种方式，不管用哪一种，适合才是最好的。
    
    </summary>
    
      <category term="iOS" scheme="http://blogwenbo.com/categories/iOS/"/>
    
    
      <category term="iOS" scheme="http://blogwenbo.com/tags/iOS/"/>
    
      <category term="CocoaPods" scheme="http://blogwenbo.com/tags/CocoaPods/"/>
    
      <category term="组件化" scheme="http://blogwenbo.com/tags/%E7%BB%84%E4%BB%B6%E5%8C%96/"/>
    
      <category term="APP架构" scheme="http://blogwenbo.com/tags/APP%E6%9E%B6%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>MJExtension源码阅读笔记</title>
    <link href="http://blogwenbo.com/2020/05/29/MJExtension%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/"/>
    <id>http://blogwenbo.com/2020/05/29/MJExtension源码阅读笔记/</id>
    <published>2020-05-29T13:11:48.000Z</published>
    <updated>2020-05-30T09:28:33.909Z</updated>
    
    <content type="html"><![CDATA[<p class="description"></p><a id="more"></a><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p>编写native界面，就避免不了和JSON数据打交道，界面数据填充，我们可以通过原生的字典取值，这样做似乎不是很优雅，于是我们通过一个字典去初始化一个模型类，通过属性名取值，但这样似乎不是很自动化。于是后来就有了JSON自动转模型框架，如MJExtension、YYModel等高性能转化框架。MJExtension可以轻松实现JSON和模型互转，自定义别名，自定义转换，归档解档，总之相当的强大。</p></blockquote><h2 id="实现原理浅析"><a href="#实现原理浅析" class="headerlink" title="实现原理浅析"></a>实现原理浅析</h2><p>通过阅读源码，其实现原理主要运用了Runtime技术、KVC实现的。</p><h2 id="框架思维导图"><a href="#框架思维导图" class="headerlink" title="框架思维导图"></a>框架思维导图</h2><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gfai6ntgzjj322w0u047h.jpg" alt=""></p><h2 id="实用技巧"><a href="#实用技巧" class="headerlink" title="实用技巧"></a>实用技巧</h2><h3 id="标注方法过期"><a href="#标注方法过期" class="headerlink" title="标注方法过期"></a>标注方法过期</h3><p>当我们设计一个开源库的时候，有时候考虑的可能并不是很全面，比如方法命名不准确，不能表明用途，或者不推荐使用了，可以给出相应的提示</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">/// MJExtensionConst</span><br><span class="line"></span><br><span class="line">/// 过期</span><br><span class="line">#define MJExtensionDeprecated(instead) NS_DEPRECATED(2_0, 2_0, 2_0, 2_0, instead)</span><br><span class="line"></span><br><span class="line">/// 具体使用</span><br><span class="line">- (void)mj_keyValuesDidFinishConvertingToObject MJExtensionDeprecated(&quot;请使用`mj_didConvertToObjectWithKeyValues:`替代&quot;);</span><br></pre></td></tr></table></figure><h3 id="遍历Protocol的PropertyList"><a href="#遍历Protocol的PropertyList" class="headerlink" title="遍历Protocol的PropertyList"></a>遍历Protocol的PropertyList</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">+ (BOOL)isFromNSObjectProtocolProperty:(NSString *)propertyName</span><br><span class="line">&#123;</span><br><span class="line">    if (!propertyName) return NO;</span><br><span class="line">    </span><br><span class="line">    static NSSet&lt;NSString *&gt; *objectProtocolPropertyNames;</span><br><span class="line">    static dispatch_once_t onceToken;</span><br><span class="line">    dispatch_once(&amp;onceToken, ^&#123;</span><br><span class="line">        unsigned int count = 0;</span><br><span class="line">        objc_property_t *propertyList = protocol_copyPropertyList(@protocol(NSObject), &amp;count);</span><br><span class="line">        NSMutableSet *propertyNames = [NSMutableSet setWithCapacity:count];</span><br><span class="line">        for (int i = 0; i &lt; count; i++) &#123;</span><br><span class="line">            objc_property_t property = propertyList[i];</span><br><span class="line">            NSString *propertyName = [NSString stringWithCString:property_getName(property) encoding:NSUTF8StringEncoding];</span><br><span class="line">            if (propertyName) &#123;</span><br><span class="line">                [propertyNames addObject:propertyName];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        objectProtocolPropertyNames = [propertyNames copy];</span><br><span class="line">        free(propertyList);</span><br><span class="line">    &#125;);</span><br><span class="line">    </span><br><span class="line">    return [objectProtocolPropertyNames containsObject:propertyName];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="获得类所有成员变量"><a href="#获得类所有成员变量" class="headerlink" title="获得类所有成员变量"></a>获得类所有成员变量</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">/// NSObject+MJKeyValue</span><br><span class="line">+ (NSMutableArray *)mj_properties</span><br><span class="line">&#123;</span><br><span class="line">    NSMutableArray *cachedProperties = [self mj_propertyDictForKey:&amp;MJCachedPropertiesKey][NSStringFromClass(self)];</span><br><span class="line">    if (cachedProperties == nil) &#123;</span><br><span class="line">    </span><br><span class="line">        if (cachedProperties == nil) &#123;</span><br><span class="line">            cachedProperties = [NSMutableArray array];</span><br><span class="line">            </span><br><span class="line">            /// 遍历类</span><br><span class="line">            [self mj_enumerateClasses:^(__unsafe_unretained Class c, BOOL *stop) &#123;</span><br><span class="line">                // 1.获得所有的成员变量</span><br><span class="line">                unsigned int outCount = 0;</span><br><span class="line">                objc_property_t *properties = class_copyPropertyList(c, &amp;outCount);</span><br><span class="line">                </span><br><span class="line">                // 2.遍历每一个成员变量</span><br><span class="line">                for (unsigned int i = 0; i&lt;outCount; i++) &#123;</span><br><span class="line">                    MJProperty *property = [MJProperty cachedPropertyWithProperty:properties[i]];</span><br><span class="line">                    // 过滤掉Foundation框架类里面的属性</span><br><span class="line">                    if ([MJFoundation isClassFromFoundation:property.srcClass]) continue;</span><br><span class="line">                    // 过滤掉`hash`, `superclass`, `description`, `debugDescription`</span><br><span class="line">                    if ([MJFoundation isFromNSObjectProtocolProperty:property.name]) continue;</span><br><span class="line">                    </span><br><span class="line">                    property.srcClass = c;</span><br><span class="line">                    [property setOriginKey:[self mj_propertyKey:property.name] forClass:self];</span><br><span class="line">                    [property setObjectClassInArray:[self mj_propertyObjectClassInArray:property.name] forClass:self];</span><br><span class="line">                    [cachedProperties addObject:property];</span><br><span class="line">                &#125;</span><br><span class="line">                </span><br><span class="line">                // 3.释放内存</span><br><span class="line">                free(properties);</span><br><span class="line">            &#125;];</span><br><span class="line">            </span><br><span class="line">            [self mj_propertyDictForKey:&amp;MJCachedPropertiesKey][NSStringFromClass(self)] = cachedProperties;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    return cachedProperties;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="属性类型说明"><a href="#属性类型说明" class="headerlink" title="属性类型说明"></a><a href="https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/ObjCRuntimeGuide/Articles/ocrtPropertyIntrospection.html#//apple_ref/doc/uid/TP40008048-CH101-SW1" target="_blank" rel="noopener">属性类型说明</a></h3><p>Objective-C type encodings</p><table><thead><tr><th style="text-align:left">Code</th><th style="text-align:left">Meaning</th></tr></thead><tbody><tr><td style="text-align:left"><code>c</code></td><td style="text-align:left">A <code>char</code></td></tr><tr><td style="text-align:left"><code>i</code></td><td style="text-align:left">An <code>int</code></td></tr><tr><td style="text-align:left"><code>s</code></td><td style="text-align:left">A <code>short</code></td></tr><tr><td style="text-align:left"><code>l</code></td><td style="text-align:left">A <code>long`</code>l` is treated as a 32-bit quantity on 64-bit programs.</td></tr><tr><td style="text-align:left"><code>q</code></td><td style="text-align:left">A <code>long long</code></td></tr><tr><td style="text-align:left"><code>C</code></td><td style="text-align:left">An <code>unsigned char</code></td></tr><tr><td style="text-align:left"><code>I</code></td><td style="text-align:left">An <code>unsigned int</code></td></tr><tr><td style="text-align:left"><code>S</code></td><td style="text-align:left">An <code>unsigned short</code></td></tr><tr><td style="text-align:left"><code>L</code></td><td style="text-align:left">An <code>unsigned long</code></td></tr><tr><td style="text-align:left"><code>Q</code></td><td style="text-align:left">An <code>unsigned long long</code></td></tr><tr><td style="text-align:left"><code>f</code></td><td style="text-align:left">A <code>float</code></td></tr><tr><td style="text-align:left"><code>d</code></td><td style="text-align:left">A <code>double</code></td></tr><tr><td style="text-align:left"><code>B</code></td><td style="text-align:left">A C++ <code>bool</code> or a C99 <code>_Bool</code></td></tr><tr><td style="text-align:left"><code>v</code></td><td style="text-align:left">A <code>void</code></td></tr><tr><td style="text-align:left"><code>*</code></td><td style="text-align:left">A character string (<code>char *</code>)</td></tr><tr><td style="text-align:left"><code>@</code></td><td style="text-align:left">An object (whether statically typed or typed <code>id</code>)</td></tr><tr><td style="text-align:left"><code>#</code></td><td style="text-align:left">A class object (<code>Class</code>)</td></tr><tr><td style="text-align:left"><code>:</code></td><td style="text-align:left">A method selector (<code>SEL</code>)</td></tr><tr><td style="text-align:left">[<em>array type</em>]</td><td style="text-align:left">An array</td></tr><tr><td style="text-align:left">{<em>name=type…</em>}</td><td style="text-align:left">A structure</td></tr><tr><td style="text-align:left">(<em>name</em>=<em>type…</em>)</td><td style="text-align:left">A union</td></tr><tr><td style="text-align:left"><code>b</code>num</td><td style="text-align:left">A bit field of <em>num</em> bits</td></tr><tr><td style="text-align:left"><code>^</code>type</td><td style="text-align:left">A pointer to <em>type</em></td></tr><tr><td style="text-align:left"><code>?</code></td><td style="text-align:left">An unknown type (among other things, this code is used for function pointers)</td></tr></tbody></table><h3 id="对于可变字典或数组，添加信号量锁保证线程安全"><a href="#对于可变字典或数组，添加信号量锁保证线程安全" class="headerlink" title="对于可变字典或数组，添加信号量锁保证线程安全"></a>对于可变字典或数组，添加信号量锁保证线程安全</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">/// MJProperty</span><br><span class="line">_propertyKeysLock = dispatch_semaphore_create(1);</span><br><span class="line"></span><br><span class="line">- (NSArray *)propertyKeysForClass:(Class)c</span><br><span class="line">&#123;</span><br><span class="line">    NSString *key = NSStringFromClass(c);</span><br><span class="line">    if (!key) return nil;</span><br><span class="line">    </span><br><span class="line">    MJ_LOCK(self.propertyKeysLock);</span><br><span class="line">    NSArray *propertyKeys = self.propertyKeysDict[key];</span><br><span class="line">    MJ_UNLOCK(self.propertyKeysLock);</span><br><span class="line">    return propertyKeys;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="通过block实现类遍历"><a href="#通过block实现类遍历" class="headerlink" title="通过block实现类遍历"></a>通过block实现类遍历</h3><p>类似系统数组Block遍历可，可通过<code>stop</code>控制遍历结束</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> *  遍历所有类的block（父类）</span><br><span class="line"> */</span><br><span class="line">typedef void (^MJClassesEnumeration)(Class c, BOOL *stop);</span><br><span class="line"></span><br><span class="line">+ (void)mj_enumerateClasses:(MJClassesEnumeration)enumeration</span><br><span class="line">&#123;</span><br><span class="line">    // 1.没有block就直接返回</span><br><span class="line">    if (enumeration == nil) return;</span><br><span class="line">    </span><br><span class="line">    // 2.停止遍历的标记</span><br><span class="line">    BOOL stop = NO;</span><br><span class="line">    </span><br><span class="line">    // 3.当前正在遍历的类</span><br><span class="line">    Class c = self;</span><br><span class="line">    </span><br><span class="line">    // 4.开始遍历每一个类</span><br><span class="line">    while (c &amp;&amp; !stop) &#123;</span><br><span class="line">        // 4.1.执行操作</span><br><span class="line">        enumeration(c, &amp;stop);</span><br><span class="line">        </span><br><span class="line">        // 4.2.获得父类</span><br><span class="line">        c = class_getSuperclass(c);</span><br><span class="line">        </span><br><span class="line">        if ([MJFoundation isClassFromFoundation:c]) break;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="基于Runtime自动归档解档"><a href="#基于Runtime自动归档解档" class="headerlink" title="基于Runtime自动归档解档"></a>基于Runtime自动归档解档</h3><ul><li>如果模型属性很多的话，手动实现每个属性的归档解档，还是相当麻烦的，通过Runtime遍历成员变量，调用KVC，实现自动化归档解档</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">/// NSObject (MJCoding)</span><br><span class="line">@implementation NSObject (MJCoding)</span><br><span class="line"></span><br><span class="line">- (void)mj_encode:(NSCoder *)encoder</span><br><span class="line">&#123;</span><br><span class="line">    Class clazz = [self class];</span><br><span class="line">    </span><br><span class="line">    NSArray *allowedCodingPropertyNames = [clazz mj_totalAllowedCodingPropertyNames];</span><br><span class="line">    NSArray *ignoredCodingPropertyNames = [clazz mj_totalIgnoredCodingPropertyNames];</span><br><span class="line">    </span><br><span class="line">    [clazz mj_enumerateProperties:^(MJProperty *property, BOOL *stop) &#123;</span><br><span class="line">        // 检测是否被忽略</span><br><span class="line">        if (allowedCodingPropertyNames.count &amp;&amp; ![allowedCodingPropertyNames containsObject:property.name]) return;</span><br><span class="line">        if ([ignoredCodingPropertyNames containsObject:property.name]) return;</span><br><span class="line">        </span><br><span class="line">        id value = [property valueForObject:self];</span><br><span class="line">        if (value == nil) return;</span><br><span class="line">        [encoder encodeObject:value forKey:property.name];</span><br><span class="line">    &#125;];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (void)mj_decode:(NSCoder *)decoder</span><br><span class="line">&#123;</span><br><span class="line">    Class clazz = [self class];</span><br><span class="line">    </span><br><span class="line">    NSArray *allowedCodingPropertyNames = [clazz mj_totalAllowedCodingPropertyNames];</span><br><span class="line">    NSArray *ignoredCodingPropertyNames = [clazz mj_totalIgnoredCodingPropertyNames];</span><br><span class="line">    </span><br><span class="line">    [clazz mj_enumerateProperties:^(MJProperty *property, BOOL *stop) &#123;</span><br><span class="line">        // 检测是否被忽略</span><br><span class="line">        if (allowedCodingPropertyNames.count &amp;&amp; ![allowedCodingPropertyNames containsObject:property.name]) return;</span><br><span class="line">        if ([ignoredCodingPropertyNames containsObject:property.name]) return;</span><br><span class="line">        </span><br><span class="line">        id value = [decoder decodeObjectForKey:property.name];</span><br><span class="line">        if (value == nil) &#123; // 兼容以前的MJExtension版本</span><br><span class="line">            value = [decoder decodeObjectForKey:[@&quot;_&quot; stringByAppendingString:property.name]];</span><br><span class="line">        &#125;</span><br><span class="line">        if (value == nil) return;</span><br><span class="line">        [property setValue:value forObject:self];</span><br><span class="line">    &#125;];</span><br><span class="line">&#125;</span><br><span class="line">@end</span><br></pre></td></tr></table></figure><ul><li>具体使用，在.h文件遵循<code>NSCoding</code>协议，在.m添加<code>MJExtensionCodingImplementation</code>宏定义即可</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@implementation xxx</span><br><span class="line">  </span><br><span class="line">MJExtensionCodingImplementation</span><br><span class="line">  </span><br><span class="line">@end</span><br></pre></td></tr></table></figure><ul><li><code>NSCoding</code>从源码可以看出只实现了<code>NSCoding</code>编码解码，如果想使用更安全的编码解码，可以遵循<code>NSSecureCoding</code></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">// Objects which are safe to be encoded and decoded across privilege boundaries should adopt NSSecureCoding instead of NSCoding. Secure coders (those that respond YES to requiresSecureCoding) will only encode objects that adopt the NSSecureCoding protocol.</span><br><span class="line">// NOTE: NSSecureCoding guarantees only that an archive contains the classes it claims. It makes no guarantees about the suitability for consumption by the receiver of the decoded content of the archive. Archived objects which  may trigger code evaluation should be validated independently by the consumer of the objects to verify that no malicious code is executed (i.e. by checking key paths, selectors etc. specified in the archive).</span><br><span class="line"></span><br><span class="line">@protocol NSSecureCoding &lt;NSCoding&gt;</span><br><span class="line">@required</span><br><span class="line">// This property must return YES on all classes that allow secure coding. Subclasses of classes that adopt NSSecureCoding and override initWithCoder: must also override this method and return YES.</span><br><span class="line">// The Secure Coding Guide should be consulted when writing methods that decode data.</span><br><span class="line">@property (class, readonly) BOOL supportsSecureCoding;</span><br><span class="line">@end</span><br></pre></td></tr></table></figure><ul><li>在.m文件重写getter方法</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">+ (BOOL)supportsSecureCoding &#123;</span><br><span class="line">    return YES;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h2><ul><li>自定义属性别名</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> *  将属性名换为其他key去字典中取值</span><br><span class="line"> *</span><br><span class="line"> *  @return 字典中的key是属性名，value是从字典中取值用的key</span><br><span class="line"> */</span><br><span class="line">+ (NSDictionary *)mj_replacedKeyFromPropertyName;</span><br></pre></td></tr></table></figure><ul><li>模型包含数组模型</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> *  数组中需要转换的模型类</span><br><span class="line"> *</span><br><span class="line"> *  @return 字典中的key是数组属性名，value是数组中存放模型的Class（Class类型或者NSString类型）</span><br><span class="line"> */</span><br><span class="line">+ (NSDictionary *)mj_objectClassInArray;</span><br></pre></td></tr></table></figure><ul><li>字典转模型</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> *  通过字典来创建一个模型</span><br><span class="line"> *  @param keyValues 字典(可以是NSDictionary、NSData、NSString)</span><br><span class="line"> *  @return 新建的对象</span><br><span class="line"> */</span><br><span class="line">+ (instancetype)mj_objectWithKeyValues:(id)keyValues;</span><br></pre></td></tr></table></figure><ul><li>模型转字典</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> *  将模型转成字典</span><br><span class="line"> *  @return 字典</span><br><span class="line"> */</span><br><span class="line">- (NSMutableDictionary *)mj_keyValues;</span><br></pre></td></tr></table></figure><ul><li>当字典转模型完毕时调用</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">- (void)mj_didConvertToObjectWithKeyValues:(NSDictionary *)keyValues;</span><br></pre></td></tr></table></figure><ul><li>自定义转换,返回新的值</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">- (id)mj_newValueFromOldValue:(id)oldValue property:(MJProperty *)property;</span><br></pre></td></tr></table></figure><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><blockquote><p>对MJExtension源码阅读了一遍，从中还是收获颇多。作者优秀的框架设计能力，每个类都有其单一的功能，通过组合统一，实现了一套友好易于使用的API接口，上手非常方便。从中也了解了Runtime技术的强大，应用也是非常的广泛。由于自己技术水平有限，对于作者高度封装的一些方法，现在理解还是有些吃力，对于runtime技术在项目中的使用，也并不是很多。以后有时间，还会重新阅读，更新新的体会与心得。对于开源库的阅读，更多的是要理解作者的设计思想，底层实现原理，希望自己能从开源库的阅读，能够学习优秀编程思想，经验，提升自己编码水平、风格、和健壮性。最后，文章如有描述不对的地方，希望不吝批评指教。</p></blockquote><hr>]]></content>
    
    <summary type="html">
    
      编写native界面，就避免不了和JSON数据打交道，界面数据填充，我们可以通过原生的字典取值，这样做似乎不是很优雅，于是我们通过一个字典去初始化一个模型类，通过属性名取值，但这样似乎不是很自动化。于是后来就有了JSON自动转模型框架，如MJExtension、YYModel等高性能转化框架。MJExtension可以轻松实现JSON和模型互转，自定义别名，自定义转换，归档解档，总之相当的强大。
    
    </summary>
    
      <category term="iOS" scheme="http://blogwenbo.com/categories/iOS/"/>
    
    
      <category term="iOS" scheme="http://blogwenbo.com/tags/iOS/"/>
    
      <category term="JSON解析" scheme="http://blogwenbo.com/tags/JSON%E8%A7%A3%E6%9E%90/"/>
    
      <category term="MJExtension" scheme="http://blogwenbo.com/tags/MJExtension/"/>
    
      <category term="开源库" scheme="http://blogwenbo.com/tags/%E5%BC%80%E6%BA%90%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>读AFNetworking收获与心得</title>
    <link href="http://blogwenbo.com/2020/05/26/%E8%AF%BBAFNetworking%E6%94%B6%E8%8E%B7%E4%B8%8E%E5%BF%83%E5%BE%97/"/>
    <id>http://blogwenbo.com/2020/05/26/读AFNetworking收获与心得/</id>
    <published>2020-05-26T14:23:00.000Z</published>
    <updated>2020-05-28T14:52:07.108Z</updated>
    
    <content type="html"><![CDATA[<p class="description"></p><p><img src="https://" alt="" style="width:100%"></p><a id="more"></a><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><blockquote><p>开发APP，都离不开网络请求，从实习时候开始，很少用系统原生的API去请求数据，而是用iOS著名网络请求框架<a href="https://github.com/AFNetworking/AFNetworking" target="_blank" rel="noopener">AFNetworking</a>，它是对系统网络请求API的高度封装，使用起来相当的简便，接口API，相关类设计非常优秀，非常值得阅读学习。最开始自己也是只会使用，对它进行二次封装，对其源码实现不是很了解，也尝试过阅读，但水平有限，也不能理解其设计思想。最近，在自己工作业余时间，对最新4.0.1源代码进行了阅读，从中还是收获颇多，尝试做一些笔记记录，如有解读描述不对的地方法，希望能批评指正。</p></blockquote><h3 id="整体设计架构"><a href="#整体设计架构" class="headerlink" title="整体设计架构"></a>整体设计架构</h3><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gf8jl77jopj32c80u0wto.jpg" alt=""></p><h3 id="一、为分类添加属性，关联对象"><a href="#一、为分类添加属性，关联对象" class="headerlink" title="一、为分类添加属性，关联对象"></a>一、为分类添加属性，关联对象</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">@interface UIImageView (_AFNetworking)</span><br><span class="line">@property (readwrite, nonatomic, strong, setter = af_setActiveImageDownloadReceipt:) AFImageDownloadReceipt *af_activeImageDownloadReceipt;</span><br><span class="line">@end</span><br><span class="line"></span><br><span class="line">@implementation UIImageView (_AFNetworking)</span><br><span class="line"></span><br><span class="line">- (AFImageDownloadReceipt *)af_activeImageDownloadReceipt &#123;</span><br><span class="line">    return (AFImageDownloadReceipt *)objc_getAssociatedObject(self, @selector(af_activeImageDownloadReceipt));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (void)af_setActiveImageDownloadReceipt:(AFImageDownloadReceipt *)imageDownloadReceipt &#123;</span><br><span class="line">    objc_setAssociatedObject(self, @selector(af_activeImageDownloadReceipt), imageDownloadReceipt, OBJC_ASSOCIATION_RETAIN_NONATOMIC);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@end</span><br></pre></td></tr></table></figure><h3 id="二、并发队列-栅栏函数保证可变容器读写安全"><a href="#二、并发队列-栅栏函数保证可变容器读写安全" class="headerlink" title="二、并发队列+栅栏函数保证可变容器读写安全"></a>二、并发队列+栅栏函数保证可变容器读写安全</h3><ul><li>创建并发队列</li></ul><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// AFAutoPurgingImageCache</span></span><br><span class="line"><span class="built_in">NSString</span> *queueName = [<span class="built_in">NSString</span> stringWithFormat:<span class="string">@"com.alamofire.autopurgingimagecache-%@"</span>, [[<span class="built_in">NSUUID</span> UUID] UUIDString]];</span><br><span class="line">        <span class="keyword">self</span>.synchronizationQueue = dispatch_queue_create([queueName cStringUsingEncoding:<span class="built_in">NSASCIIStringEncoding</span>], DISPATCH_QUEUE_CONCURRENT);</span><br></pre></td></tr></table></figure><ul><li>dispatch_barrier_async + DISPATCH_QUEUE_CONCURRENT字典存储数据</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">/// AFAutoPurgingImageCache</span><br><span class="line">- (void)addImage:(UIImage *)image withIdentifier:(NSString *)identifier &#123;</span><br><span class="line">    dispatch_barrier_async(self.synchronizationQueue, ^&#123;</span><br><span class="line">        AFCachedImage *cacheImage = [[AFCachedImage alloc] initWithImage:image identifier:identifier];</span><br><span class="line"></span><br><span class="line">        AFCachedImage *previousCachedImage = self.cachedImages[identifier];</span><br><span class="line">        if (previousCachedImage != nil) &#123;</span><br><span class="line">            self.currentMemoryUsage -= previousCachedImage.totalBytes;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        self.cachedImages[identifier] = cacheImage;</span><br><span class="line">        self.currentMemoryUsage += cacheImage.totalBytes;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    dispatch_barrier_async(self.synchronizationQueue, ^&#123;</span><br><span class="line">        if (self.currentMemoryUsage &gt; self.memoryCapacity) &#123;</span><br><span class="line">            UInt64 bytesToPurge = self.currentMemoryUsage - self.preferredMemoryUsageAfterPurge;</span><br><span class="line">            NSMutableArray &lt;AFCachedImage*&gt; *sortedImages = [NSMutableArray arrayWithArray:self.cachedImages.allValues];</span><br><span class="line">            NSSortDescriptor *sortDescriptor = [[NSSortDescriptor alloc] initWithKey:@&quot;lastAccessDate&quot;</span><br><span class="line">                                                                           ascending:YES];</span><br><span class="line">            [sortedImages sortUsingDescriptors:@[sortDescriptor]];</span><br><span class="line"></span><br><span class="line">            UInt64 bytesPurged = 0;</span><br><span class="line"></span><br><span class="line">            for (AFCachedImage *cachedImage in sortedImages) &#123;</span><br><span class="line">                [self.cachedImages removeObjectForKey:cachedImage.identifier];</span><br><span class="line">                bytesPurged += cachedImage.totalBytes;</span><br><span class="line">                if (bytesPurged &gt;= bytesToPurge) &#123;</span><br><span class="line">                    break;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            self.currentMemoryUsage -= bytesPurged;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>dispatch_barrier_sync + DISPATCH_QUEUE_CONCURRENT字典移除数据</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">/// AFAutoPurgingImageCache</span><br><span class="line">- (BOOL)removeImageWithIdentifier:(NSString *)identifier &#123;</span><br><span class="line">    __block BOOL removed = NO;</span><br><span class="line">    dispatch_barrier_sync(self.synchronizationQueue, ^&#123;</span><br><span class="line">        AFCachedImage *cachedImage = self.cachedImages[identifier];</span><br><span class="line">        if (cachedImage != nil) &#123;</span><br><span class="line">            [self.cachedImages removeObjectForKey:identifier];</span><br><span class="line">            self.currentMemoryUsage -= cachedImage.totalBytes;</span><br><span class="line">            removed = YES;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    return removed;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="三、图片缓存淘汰算法，通过对图片缓存时间按升序排序，当缓存容量大于设定容量，对图片进行清除，规则越早缓存优先移除，代码如下："><a href="#三、图片缓存淘汰算法，通过对图片缓存时间按升序排序，当缓存容量大于设定容量，对图片进行清除，规则越早缓存优先移除，代码如下：" class="headerlink" title="三、图片缓存淘汰算法，通过对图片缓存时间按升序排序，当缓存容量大于设定容量，对图片进行清除，规则越早缓存优先移除，代码如下："></a>三、图片缓存淘汰算法，通过对图片缓存时间按升序排序，当缓存容量大于设定容量，对图片进行清除，规则越早缓存优先移除，代码如下：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">/// AFAutoPurgingImageCache</span><br><span class="line">dispatch_barrier_async(self.synchronizationQueue, ^&#123;</span><br><span class="line">        if (self.currentMemoryUsage &gt; self.memoryCapacity) &#123;</span><br><span class="line">            UInt64 bytesToPurge = self.currentMemoryUsage - self.preferredMemoryUsageAfterPurge;</span><br><span class="line">            NSMutableArray &lt;AFCachedImage*&gt; *sortedImages = [NSMutableArray arrayWithArray:self.cachedImages.allValues];</span><br><span class="line">            NSSortDescriptor *sortDescriptor = [[NSSortDescriptor alloc] initWithKey:@&quot;lastAccessDate&quot;</span><br><span class="line">                                                                           ascending:YES];</span><br><span class="line">            [sortedImages sortUsingDescriptors:@[sortDescriptor]];</span><br><span class="line"></span><br><span class="line">            UInt64 bytesPurged = 0;</span><br><span class="line"></span><br><span class="line">            for (AFCachedImage *cachedImage in sortedImages) &#123;</span><br><span class="line">                [self.cachedImages removeObjectForKey:cachedImage.identifier];</span><br><span class="line">                bytesPurged += cachedImage.totalBytes;</span><br><span class="line">                if (bytesPurged &gt;= bytesToPurge) &#123;</span><br><span class="line">                    break;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            self.currentMemoryUsage -= bytesPurged;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure><h3 id="四、对于可能出现crash的代码，加-try-catch-，平时用的很少，对保证APP运行安全还是值得使用"><a href="#四、对于可能出现crash的代码，加-try-catch-，平时用的很少，对保证APP运行安全还是值得使用" class="headerlink" title="四、对于可能出现crash的代码，加@try {} @catch {}，平时用的很少，对保证APP运行安全还是值得使用"></a>四、对于可能出现crash的代码，加@try {} @catch {}，平时用的很少，对保证APP运行安全还是值得使用</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">/// UIProgressView+AFNetworking</span><br><span class="line">- (void)observeValueForKeyPath:(NSString *)keyPath</span><br><span class="line">                      ofObject:(id)object</span><br><span class="line">                        change:(__unused NSDictionary *)change</span><br><span class="line">                       context:(void *)context</span><br><span class="line">&#123;</span><br><span class="line">    if (context == AFTaskCountOfBytesSentContext || context == AFTaskCountOfBytesReceivedContext) &#123;</span><br><span class="line">        if ([keyPath isEqualToString:NSStringFromSelector(@selector(countOfBytesSent))]) &#123;</span><br><span class="line">            if ([object countOfBytesExpectedToSend] &gt; 0) &#123;</span><br><span class="line">                dispatch_async(dispatch_get_main_queue(), ^&#123;</span><br><span class="line">                    [self setProgress:[object countOfBytesSent] / ([object countOfBytesExpectedToSend] * 1.0f) animated:self.af_uploadProgressAnimated];</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        if ([keyPath isEqualToString:NSStringFromSelector(@selector(countOfBytesReceived))]) &#123;</span><br><span class="line">            if ([object countOfBytesExpectedToReceive] &gt; 0) &#123;</span><br><span class="line">                dispatch_async(dispatch_get_main_queue(), ^&#123;</span><br><span class="line">                    [self setProgress:[object countOfBytesReceived] / ([object countOfBytesExpectedToReceive] * 1.0f) animated:self.af_downloadProgressAnimated];</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        if ([keyPath isEqualToString:NSStringFromSelector(@selector(state))]) &#123;</span><br><span class="line">            if ([(NSURLSessionTask *)object state] == NSURLSessionTaskStateCompleted) &#123;</span><br><span class="line">                @try &#123;</span><br><span class="line">                    [object removeObserver:self forKeyPath:NSStringFromSelector(@selector(state))];</span><br><span class="line"></span><br><span class="line">                    if (context == AFTaskCountOfBytesSentContext) &#123;</span><br><span class="line">                        [object removeObserver:self forKeyPath:NSStringFromSelector(@selector(countOfBytesSent))];</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    if (context == AFTaskCountOfBytesReceivedContext) &#123;</span><br><span class="line">                        [object removeObserver:self forKeyPath:NSStringFromSelector(@selector(countOfBytesReceived))];</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                @catch (NSException * __unused exception) &#123;&#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="五、对于一个属性，对外界修改关闭，内部可以修改，可以这样写"><a href="#五、对于一个属性，对外界修改关闭，内部可以修改，可以这样写" class="headerlink" title="五、对于一个属性，对外界修改关闭，内部可以修改，可以这样写"></a>五、对于一个属性，对外界修改关闭，内部可以修改，可以这样写</h3><ul><li>在.h文件</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">/// AFNetworkReachabilityManager</span><br><span class="line">/**</span><br><span class="line"> The current network reachability status.</span><br><span class="line"> */</span><br><span class="line">/// 用readonly修饰，保证外界不可修改</span><br><span class="line">@property (readonly, nonatomic, assign) AFNetworkReachabilityStatus networkReachabilityStatus;</span><br></pre></td></tr></table></figure><p>在.m文件extension中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">/// AFNetworkReachabilityManager</span><br><span class="line">/// readwrite修饰，内部可修改其值</span><br><span class="line">@property (readwrite, nonatomic, assign) AFNetworkReachabilityStatus networkReachabilityStatus;</span><br></pre></td></tr></table></figure><h3 id="六、指定方法不可用，并抛出异常"><a href="#六、指定方法不可用，并抛出异常" class="headerlink" title="六、指定方法不可用，并抛出异常"></a>六、指定方法不可用，并抛出异常</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">/// AFNetworkReachabilityManager</span><br><span class="line">/**</span><br><span class="line"> *  Unavailable initializer</span><br><span class="line"> */</span><br><span class="line">- (instancetype)init NS_UNAVAILABLE;</span><br><span class="line"></span><br><span class="line">- (instancetype)init</span><br><span class="line">&#123;</span><br><span class="line">   /// 抛出异常 </span><br><span class="line">    @throw [NSException exceptionWithName:NSGenericException</span><br><span class="line">                                   reason:@&quot;`-init` unavailable. Use `-initWithReachability:` instead&quot;</span><br><span class="line">                                 userInfo:nil];</span><br><span class="line">    return nil;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="七、函数递归调用，将数据处理成想要的结果"><a href="#七、函数递归调用，将数据处理成想要的结果" class="headerlink" title="七、函数递归调用，将数据处理成想要的结果"></a>七、函数递归调用，将数据处理成想要的结果</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">/// AFURLRequestSerialization.m</span><br><span class="line"></span><br><span class="line">#pragma mark -</span><br><span class="line"></span><br><span class="line">FOUNDATION_EXPORT NSArray * AFQueryStringPairsFromDictionary(NSDictionary *dictionary);</span><br><span class="line">FOUNDATION_EXPORT NSArray * AFQueryStringPairsFromKeyAndValue(NSString *key, id value);</span><br><span class="line"></span><br><span class="line">NSString * AFQueryStringFromParameters(NSDictionary *parameters) &#123;</span><br><span class="line">    NSMutableArray *mutablePairs = [NSMutableArray array];</span><br><span class="line">    for (AFQueryStringPair *pair in AFQueryStringPairsFromDictionary(parameters)) &#123;</span><br><span class="line">        [mutablePairs addObject:[pair URLEncodedStringValue]];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return [mutablePairs componentsJoinedByString:@&quot;&amp;&quot;];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">NSArray * AFQueryStringPairsFromDictionary(NSDictionary *dictionary) &#123;</span><br><span class="line">    return AFQueryStringPairsFromKeyAndValue(nil, dictionary);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/// 递归调用次方法，将参数处理成目标类型</span><br><span class="line">NSArray * AFQueryStringPairsFromKeyAndValue(NSString *key, id value) &#123;</span><br><span class="line">    NSMutableArray *mutableQueryStringComponents = [NSMutableArray array];</span><br><span class="line"></span><br><span class="line">    NSSortDescriptor *sortDescriptor = [NSSortDescriptor sortDescriptorWithKey:@&quot;description&quot; ascending:YES selector:@selector(compare:)];</span><br><span class="line"></span><br><span class="line">    if ([value isKindOfClass:[NSDictionary class]]) &#123;</span><br><span class="line">        NSDictionary *dictionary = value;</span><br><span class="line">        // Sort dictionary keys to ensure consistent ordering in query string, which is important when deserializing potentially ambiguous sequences, such as an array of dictionaries</span><br><span class="line">        for (id nestedKey in [dictionary.allKeys sortedArrayUsingDescriptors:@[ sortDescriptor ]]) &#123;</span><br><span class="line">            id nestedValue = dictionary[nestedKey];</span><br><span class="line">            if (nestedValue) &#123;</span><br><span class="line">                [mutableQueryStringComponents addObjectsFromArray:AFQueryStringPairsFromKeyAndValue((key ? [NSString stringWithFormat:@&quot;%@[%@]&quot;, key, nestedKey] : nestedKey), nestedValue)];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; else if ([value isKindOfClass:[NSArray class]]) &#123;</span><br><span class="line">        NSArray *array = value;</span><br><span class="line">        for (id nestedValue in array) &#123;</span><br><span class="line">            [mutableQueryStringComponents addObjectsFromArray:AFQueryStringPairsFromKeyAndValue([NSString stringWithFormat:@&quot;%@[]&quot;, key], nestedValue)];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; else if ([value isKindOfClass:[NSSet class]]) &#123;</span><br><span class="line">        NSSet *set = value;</span><br><span class="line">        for (id obj in [set sortedArrayUsingDescriptors:@[ sortDescriptor ]]) &#123;</span><br><span class="line">            [mutableQueryStringComponents addObjectsFromArray:AFQueryStringPairsFromKeyAndValue(key, obj)];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        [mutableQueryStringComponents addObject:[[AFQueryStringPair alloc] initWithField:key value:value]];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return mutableQueryStringComponents;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="八、手动触发KVO"><a href="#八、手动触发KVO" class="headerlink" title="八、手动触发KVO"></a>八、手动触发KVO</h3><ul><li>对于要手动触发的属性，进行特殊处理</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">+ (BOOL)automaticallyNotifiesObserversForKey:(NSString *)key &#123;</span><br><span class="line">    if ([AFHTTPRequestSerializerObservedKeyPaths() containsObject:key]) &#123;</span><br><span class="line">        return NO;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return [super automaticallyNotifiesObserversForKey:key];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>手动触发KVO</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">- (void)setAllowsCellularAccess:(BOOL)allowsCellularAccess &#123;</span><br><span class="line">    [self willChangeValueForKey:NSStringFromSelector(@selector(allowsCellularAccess))];</span><br><span class="line">    _allowsCellularAccess = allowsCellularAccess;</span><br><span class="line">    [self didChangeValueForKey:NSStringFromSelector(@selector(allowsCellularAccess))];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (void)setCachePolicy:(NSURLRequestCachePolicy)cachePolicy &#123;</span><br><span class="line">    [self willChangeValueForKey:NSStringFromSelector(@selector(cachePolicy))];</span><br><span class="line">    _cachePolicy = cachePolicy;</span><br><span class="line">    [self didChangeValueForKey:NSStringFromSelector(@selector(cachePolicy))];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (void)setHTTPShouldHandleCookies:(BOOL)HTTPShouldHandleCookies &#123;</span><br><span class="line">    [self willChangeValueForKey:NSStringFromSelector(@selector(HTTPShouldHandleCookies))];</span><br><span class="line">    _HTTPShouldHandleCookies = HTTPShouldHandleCookies;</span><br><span class="line">    [self didChangeValueForKey:NSStringFromSelector(@selector(HTTPShouldHandleCookies))];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (void)setHTTPShouldUsePipelining:(BOOL)HTTPShouldUsePipelining &#123;</span><br><span class="line">    [self willChangeValueForKey:NSStringFromSelector(@selector(HTTPShouldUsePipelining))];</span><br><span class="line">    _HTTPShouldUsePipelining = HTTPShouldUsePipelining;</span><br><span class="line">    [self didChangeValueForKey:NSStringFromSelector(@selector(HTTPShouldUsePipelining))];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (void)setNetworkServiceType:(NSURLRequestNetworkServiceType)networkServiceType &#123;</span><br><span class="line">    [self willChangeValueForKey:NSStringFromSelector(@selector(networkServiceType))];</span><br><span class="line">    _networkServiceType = networkServiceType;</span><br><span class="line">    [self didChangeValueForKey:NSStringFromSelector(@selector(networkServiceType))];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (void)setTimeoutInterval:(NSTimeInterval)timeoutInterval &#123;</span><br><span class="line">    [self willChangeValueForKey:NSStringFromSelector(@selector(timeoutInterval))];</span><br><span class="line">    _timeoutInterval = timeoutInterval;</span><br><span class="line">    [self didChangeValueForKey:NSStringFromSelector(@selector(timeoutInterval))];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="九、实现NSCopying协议"><a href="#九、实现NSCopying协议" class="headerlink" title="九、实现NSCopying协议"></a>九、实现NSCopying协议</h3><ul><li>遵循NSCopying协议</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">/// AFURLRequestSerialization</span><br><span class="line">@protocol AFURLRequestSerialization &lt;NSObject, NSSecureCoding, NSCopying&gt;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> Returns a request with the specified parameters encoded into a copy of the original request.</span><br><span class="line"></span><br><span class="line"> @param request The original request.</span><br><span class="line"> @param parameters The parameters to be encoded.</span><br><span class="line"> @param error The error that occurred while attempting to encode the request parameters.</span><br><span class="line"></span><br><span class="line"> @return A serialized request.</span><br><span class="line"> */</span><br><span class="line">- (nullable NSURLRequest *)requestBySerializingRequest:(NSURLRequest *)request</span><br><span class="line">                               withParameters:(nullable id)parameters</span><br><span class="line">                                        error:(NSError * _Nullable __autoreleasing *)error NS_SWIFT_NOTHROW;</span><br><span class="line"></span><br><span class="line">@end</span><br></pre></td></tr></table></figure><ul><li><p>实现<code>- (instancetype)copyWithZone:(NSZone *)zone</code>方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">/// AFURLRequestSerialization.m</span><br><span class="line">- (instancetype)copyWithZone:(NSZone *)zone &#123;</span><br><span class="line">    AFHTTPRequestSerializer *serializer = [[[self class] allocWithZone:zone] init];</span><br><span class="line">    dispatch_sync(self.requestHeaderModificationQueue, ^&#123;</span><br><span class="line">        serializer.mutableHTTPRequestHeaders = [self.mutableHTTPRequestHeaders mutableCopyWithZone:zone];</span><br><span class="line">    &#125;);</span><br><span class="line">    serializer.queryStringSerializationStyle = self.queryStringSerializationStyle;</span><br><span class="line">    serializer.queryStringSerialization = self.queryStringSerialization;</span><br><span class="line"></span><br><span class="line">    return serializer;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="十、NSSecureCoding协议"><a href="#十、NSSecureCoding协议" class="headerlink" title="十、NSSecureCoding协议"></a>十、NSSecureCoding协议</h3><ul><li>遵循NSSecureCoding协议</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/// AFSecurityPolicy</span><br><span class="line">@interface AFSecurityPolicy : NSObject &lt;NSSecureCoding, NSCopying&gt;</span><br></pre></td></tr></table></figure><ul><li>实现</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">/// AFSecurityPolicy</span><br><span class="line">#pragma mark - NSSecureCoding</span><br><span class="line"></span><br><span class="line">+ (BOOL)supportsSecureCoding &#123;</span><br><span class="line">    return YES;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/// decode</span><br><span class="line">- (instancetype)initWithCoder:(NSCoder *)decoder &#123;</span><br><span class="line"></span><br><span class="line">    self = [self init];</span><br><span class="line">    if (!self) &#123;</span><br><span class="line">        return nil;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    self.SSLPinningMode = [[decoder decodeObjectOfClass:[NSNumber class] forKey:NSStringFromSelector(@selector(SSLPinningMode))] unsignedIntegerValue];</span><br><span class="line">    self.allowInvalidCertificates = [decoder decodeBoolForKey:NSStringFromSelector(@selector(allowInvalidCertificates))];</span><br><span class="line">    self.validatesDomainName = [decoder decodeBoolForKey:NSStringFromSelector(@selector(validatesDomainName))];</span><br><span class="line">    self.pinnedCertificates = [decoder decodeObjectOfClass:[NSSet class] forKey:NSStringFromSelector(@selector(pinnedCertificates))];</span><br><span class="line"></span><br><span class="line">    return self;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/// encode</span><br><span class="line">- (void)encodeWithCoder:(NSCoder *)coder &#123;</span><br><span class="line">    [coder encodeObject:[NSNumber numberWithUnsignedInteger:self.SSLPinningMode] forKey:NSStringFromSelector(@selector(SSLPinningMode))];</span><br><span class="line">    [coder encodeBool:self.allowInvalidCertificates forKey:NSStringFromSelector(@selector(allowInvalidCertificates))];</span><br><span class="line">    [coder encodeBool:self.validatesDomainName forKey:NSStringFromSelector(@selector(validatesDomainName))];</span><br><span class="line">    [coder encodeObject:self.pinnedCertificates forKey:NSStringFromSelector(@selector(pinnedCertificates))];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h3><blockquote><p>这也是自己第一次阅读源码写的记录博客，当自己对作者源码思想有所理解时候，内心也是非常开心与满足，阅读优秀开源库源码，对自己编程的架构思想，代码设计能力还是非常有帮助的。由于自己水平有限，有解读不对地方，还请不吝指正，我会立即做出修改，后续有新的体会与收获，也会在这篇博客中更新。</p></blockquote><hr>]]></content>
    
    <summary type="html">
    
      开发APP，都离不开网络请求，从实习时候开始，很少用系统原生的API去请求数据，而是用iOS著名网络请求框架[AFNetworking](https://github.com/AFNetworking/AFNetworking)，它是对系统网络请求API的高度封装，使用起来相当的简便，接口API，相关类设计非常优秀，非常值得阅读学习。最开始自己也是只会使用，对它进行二次封装，对其源码实现不是很了解，也尝试过阅读，但水平有限，也不能理解其设计思想。最近，在自己工作业余时间，对最新4.0.1源代码进行了阅读，从中还是收获颇多，尝试做一些笔记记录，如有解读描述不对的地方法，希望能批评指正。
    
    </summary>
    
      <category term="iOS" scheme="http://blogwenbo.com/categories/iOS/"/>
    
    
      <category term="iOS" scheme="http://blogwenbo.com/tags/iOS/"/>
    
      <category term="GitHub" scheme="http://blogwenbo.com/tags/GitHub/"/>
    
      <category term="AFNetworking" scheme="http://blogwenbo.com/tags/AFNetworking/"/>
    
  </entry>
  
  <entry>
    <title>iOS应用审核被拒整理&amp;解决方案</title>
    <link href="http://blogwenbo.com/2020/05/26/iOS%E5%BA%94%E7%94%A8%E5%AE%A1%E6%A0%B8%E8%A2%AB%E6%8B%92%E6%95%B4%E7%90%86-%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
    <id>http://blogwenbo.com/2020/05/26/iOS应用审核被拒整理-解决方案/</id>
    <published>2020-05-26T14:12:08.000Z</published>
    <updated>2020-05-28T03:39:46.697Z</updated>
    
    <content type="html"><![CDATA[<p class="description"></p><p><img src="https://" alt="" style="width:100%"></p><a id="more"></a><h3 id="IPV6"><a href="#IPV6" class="headerlink" title="IPV6"></a>IPV6</h3><ul><li>服务器最好兼容ipv6协议</li><li>尝试多次提交，运气好就pass了</li><li>录视频上传到<a href="http://www.baidu.com/link?url=7udouveXh7f6Kot3AusUycrbkNmdyxC73y2_xugK_hZNpuWToPzRxlTwZsKmllag" target="_blank" rel="noopener"><em>You</em>Tube</a>，给审核团队证明，能在ipv6网络下访问</li></ul><p>可参考这篇博客<a href="https://github.com/wg689/Solve-App-Store-Review-Problem" target="_blank" rel="noopener">Solve-App-Store-Review-Problem</a>，处理方案很全。</p><hr><h3 id="包含三方未授权内容"><a href="#包含三方未授权内容" class="headerlink" title="包含三方未授权内容"></a>包含三方未授权内容</h3><ul><li>提供相关授权证明</li><li>删除相关内容</li></ul><h3 id="权限申请被拒"><a href="#权限申请被拒" class="headerlink" title="权限申请被拒"></a>权限申请被拒</h3><ul><li>info.plist里的权限描述要能准确，表明用途</li></ul>]]></content>
    
    <summary type="html">
    
      iOS被拒记录，哪些与苹果审核团队的唇枪舌战的日子。
    
    </summary>
    
      <category term="审核" scheme="http://blogwenbo.com/categories/%E5%AE%A1%E6%A0%B8/"/>
    
    
      <category term="iOS" scheme="http://blogwenbo.com/tags/iOS/"/>
    
      <category term="IPV6" scheme="http://blogwenbo.com/tags/IPV6/"/>
    
      <category term="审核" scheme="http://blogwenbo.com/tags/%E5%AE%A1%E6%A0%B8/"/>
    
  </entry>
  
  <entry>
    <title>iOS 13适配小记</title>
    <link href="http://blogwenbo.com/2019/09/29/iOS-13%E9%80%82%E9%85%8D%E5%B0%8F%E8%AE%B0/"/>
    <id>http://blogwenbo.com/2019/09/29/iOS-13适配小记/</id>
    <published>2019-09-29T15:23:47.000Z</published>
    <updated>2020-03-30T14:09:57.145Z</updated>
    
    <content type="html"><![CDATA[<p class="description"></p><p><img src="https://" alt="" style="width:100%"></p><a id="more"></a><h3 id="一、模态跳转适配"><a href="#一、模态跳转适配" class="headerlink" title="一、模态跳转适配"></a>一、模态跳转适配</h3><h3 id="二、暗黑模式适配"><a href="#二、暗黑模式适配" class="headerlink" title="二、暗黑模式适配"></a>二、暗黑模式适配</h3><h3 id="三、UITabbar选中颜色调整"><a href="#三、UITabbar选中颜色调整" class="headerlink" title="三、UITabbar选中颜色调整"></a>三、UITabbar选中颜色调整</h3><h3 id="四、KVC设置私有属性适配"><a href="#四、KVC设置私有属性适配" class="headerlink" title="四、KVC设置私有属性适配"></a>四、KVC设置私有属性适配</h3><h3 id="五、DeviceToken获取方式适配"><a href="#五、DeviceToken获取方式适配" class="headerlink" title="五、DeviceToken获取方式适配"></a>五、DeviceToken获取方式适配</h3><h3 id="六、状态栏适配"><a href="#六、状态栏适配" class="headerlink" title="六、状态栏适配"></a>六、状态栏适配</h3><hr>]]></content>
    
    <summary type="html">
    
      Xcode自动更新到11了，用新版Xcode跑一下工程，发现出现各种奇怪的问题，无奈之下，只有做iOS 13适配工作了，文章里也是我负责项目遇到的一些问题，修改的同时做下记录。
    
    </summary>
    
      <category term="iOS" scheme="http://blogwenbo.com/categories/iOS/"/>
    
    
      <category term="iOS 13" scheme="http://blogwenbo.com/tags/iOS-13/"/>
    
      <category term="Xcode" scheme="http://blogwenbo.com/tags/Xcode/"/>
    
  </entry>
  
  <entry>
    <title>iOS优秀Swift开源库整理，了解一下</title>
    <link href="http://blogwenbo.com/2019/09/03/iOS%E4%BC%98%E7%A7%80Swift%E5%BC%80%E6%BA%90%E5%BA%93%E6%95%B4%E7%90%86%EF%BC%8C%E4%BA%86%E8%A7%A3%E4%B8%80%E4%B8%8B/"/>
    <id>http://blogwenbo.com/2019/09/03/iOS优秀Swift开源库整理，了解一下/</id>
    <published>2019-09-03T15:07:10.000Z</published>
    <updated>2020-05-26T14:06:09.522Z</updated>
    
    <content type="html"><![CDATA[<p class="description"></p><a id="more"></a><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><blockquote><p>自己从事iOS开发工作接近两年左右的时间了，在自己工作之余，收集整理了一些优秀的三方开源框架，自己整理的这些三方开源库涵盖了iOS开发面很多方面的知识。非常感谢这些开源库的作者们，正是因为这些库，提高了我们的开发效率，同样也是我们学习进步的源泉。现将这个整理工程文件分享出来，希望能给需要的朋友一些帮助，同时也自己也做下收集记录。</p></blockquote><p><strong>Github：</strong><br><a href="https://github.com/wenmobo/WBCollectSwfitThirdLib" target="_blank" rel="noopener">WBCollectSwfitThirdLib</a></p><h3 id="Swift三方开源库"><a href="#Swift三方开源库" class="headerlink" title="Swift三方开源库"></a>Swift三方开源库</h3><h4 id="动画"><a href="#动画" class="headerlink" title="动画"></a>动画</h4><table><thead><tr><th>开源库名</th><th>简介</th><th>推荐指数</th></tr></thead><tbody><tr><td><a href="https://github.com/ninjaprox/NVActivityIndicatorView" target="_blank" rel="noopener">NVActivityIndicatorView</a></td><td>精美加载loading动画</td><td>⭐️⭐️⭐️⭐️</td></tr><tr><td>lottie-<a href="https://github.com/airbnb/lottie-ios" target="_blank" rel="noopener">ios</a></td><td>An iOS library to natively render After Effects vector animations</td><td>⭐️⭐️⭐️⭐️⭐️</td></tr></tbody></table><h4 id="网络请求"><a href="#网络请求" class="headerlink" title="网络请求"></a>网络请求</h4><table><thead><tr><th>开源库名</th><th>简介</th><th>推荐指数</th></tr></thead><tbody><tr><td><a href="https://github.com/Alamofire/Alamofire" target="_blank" rel="noopener">Alamofire</a></td><td>优雅的网络请求库</td><td>⭐️⭐️⭐️⭐️⭐️</td></tr></tbody></table><h4 id="占位图"><a href="#占位图" class="headerlink" title="占位图"></a>占位图</h4><table><thead><tr><th>开源库名</th><th>简介</th><th>推荐指数</th></tr></thead><tbody><tr><td><a href="https://github.com/Juanpe/SkeletonView" target="_blank" rel="noopener">SkeletonView</a></td><td>数据加载等待占位图</td><td>⭐️⭐️⭐️⭐️</td></tr></tbody></table><h4 id="二维码扫描"><a href="#二维码扫描" class="headerlink" title="二维码扫描"></a>二维码扫描</h4><table><thead><tr><th>开源库名</th><th>简介</th><th>推荐指数</th></tr></thead><tbody><tr><td><a href="https://github.com/EyreFree/EFQRCode" target="_blank" rel="noopener">EFQRCode</a></td><td>二维码扫描</td><td>⭐️⭐️⭐️⭐️</td></tr></tbody></table><h4 id="布局框架"><a href="#布局框架" class="headerlink" title="布局框架"></a>布局框架</h4><table><thead><tr><th>开源库名</th><th>简介</th><th>推荐指数</th></tr></thead><tbody><tr><td><a href="https://github.com/SnapKit/SnapKit" target="_blank" rel="noopener">SnapKit</a></td><td>苹果原生布局AutoLayout封装，类似Masonry</td><td>⭐️⭐️⭐️⭐️⭐️</td></tr><tr><td><a href="https://github.com/youngsoft/TangramKit" target="_blank" rel="noopener">TangramKit</a></td><td>TangramKit的内核是基于对UIView的layoutSubviews方法的重载以及对子视图的bounds和center属性的设置而实现的。</td><td>⭐️⭐️⭐️⭐️</td></tr></tbody></table><h4 id="图表绘制"><a href="#图表绘制" class="headerlink" title="图表绘制"></a>图表绘制</h4><table><thead><tr><th>开源库名</th><th>简介</th><th>推荐指数</th></tr></thead><tbody><tr><td><a href="https://github.com/danielgindi/Charts" target="_blank" rel="noopener">Charts</a></td><td>图标配置</td><td>⭐️⭐️⭐️⭐️⭐️</td></tr></tbody></table><h4 id="截屏"><a href="#截屏" class="headerlink" title="截屏"></a>截屏</h4><table><thead><tr><th>开源库名</th><th>简介</th><th>推荐指数</th></tr></thead><tbody><tr><td><a href="https://github.com/startry/SwViewCapture" target="_blank" rel="noopener">SwViewCapture</a></td><td>UIView，UIScrollView截屏</td><td>⭐️⭐️⭐️</td></tr></tbody></table><h4 id="提示框架"><a href="#提示框架" class="headerlink" title="提示框架"></a>提示框架</h4><table><thead><tr><th>开源库名</th><th>简介</th><th>推荐指数</th></tr></thead><tbody><tr><td><a href="https://github.com/hyperoslo/Whisper" target="_blank" rel="noopener">Whisper</a></td><td>Whisper is a component that will make the task of display messages and in-app notifications simple</td><td>⭐️⭐️⭐️⭐️</td></tr></tbody></table><h4 id="图片加载"><a href="#图片加载" class="headerlink" title="图片加载"></a>图片加载</h4><table><thead><tr><th>开源库名</th><th>简介</th><th>推荐指数</th></tr></thead><tbody><tr><td><a href="https://github.com/onevcat/Kingfisher" target="_blank" rel="noopener">Kingfisher</a></td><td>onevcat大神写的一个图片下载与缓存框架</td><td>⭐️⭐️⭐️⭐️⭐️</td></tr><tr><td><a href="https://github.com/Silence-GitHub/BBWebImage" target="_blank" rel="noopener">BBWebImage</a></td><td>高性能图片加载框架</td><td>⭐️⭐️⭐️⭐️</td></tr></tbody></table><h4 id="转场动画"><a href="#转场动画" class="headerlink" title="转场动画"></a>转场动画</h4><table><thead><tr><th>开源库名</th><th>简介</th><th>推荐指数</th></tr></thead><tbody><tr><td><a href="https://github.com/HeroTransitions/Hero" target="_blank" rel="noopener">Hero</a></td><td>控制器转场动画</td><td>⭐️⭐️⭐️⭐️⭐️</td></tr></tbody></table><h4 id="JSON解析"><a href="#JSON解析" class="headerlink" title="JSON解析"></a>JSON解析</h4><table><thead><tr><th>开源库名</th><th>简介</th><th>推荐指数</th></tr></thead><tbody><tr><td><a href="https://github.com/tristanhimmelman/AlamofireObjectMapper" target="_blank" rel="noopener">AlamofireObjectMapper</a></td><td>JSON转模型</td><td>⭐️⭐️⭐️⭐️</td></tr><tr><td><a href="https://github.com/alibaba/HandyJSON" target="_blank" rel="noopener">HandyJSON</a></td><td>阿里巴巴开源的一个JSON转模型框架，使用相当简便</td><td>⭐️⭐️⭐️⭐️</td></tr><tr><td><a href="https://github.com/tristanhimmelman/ObjectMapper" target="_blank" rel="noopener">ObjectMapper</a></td><td>JSON转模型</td><td>⭐️⭐️⭐️⭐️</td></tr><tr><td><a href="https://github.com/SwiftyJSON/SwiftyJSON" target="_blank" rel="noopener">SwiftyJSON</a></td><td>The better way to deal with JSON data in Swift</td><td>⭐️⭐️⭐️⭐️⭐️</td></tr><tr><td><a href="https://github.com/kakaopensource/KakaJSON" target="_blank" rel="noopener">KakaJSON</a></td><td>MJ大神最近开源的一款JSON与model快速转换框架</td><td>⭐️⭐️⭐️⭐️</td></tr></tbody></table><h4 id="Log工具"><a href="#Log工具" class="headerlink" title="Log工具"></a>Log工具</h4><table><thead><tr><th>开源库名</th><th>简介</th><th>推荐指数</th></tr></thead><tbody><tr><td><a href="https://github.com/CocoaLumberjack/CocoaLumberjack" target="_blank" rel="noopener">CocoaLumberjack</a></td><td>控制台输出log框架</td><td>⭐️⭐️⭐️⭐️⭐️</td></tr></tbody></table><h4 id="分页控件"><a href="#分页控件" class="headerlink" title="分页控件"></a>分页控件</h4><table><thead><tr><th>开源库名</th><th>简介</th><th>推荐指数</th></tr></thead><tbody><tr><td><a href="https://github.com/ChiliLabs/CHIPageControl" target="_blank" rel="noopener">CHIPageControl</a></td><td>A set of cool animated page controls written in Swift to replace boring UIPageControl.</td><td>⭐️⭐️⭐️</td></tr><tr><td><a href="https://github.com/popwarsweet/PageControls" target="_blank" rel="noopener">PageControls</a></td><td>This is a selection of custom page controls to replace UIPageControl</td><td>⭐️⭐️⭐️</td></tr><tr><td><a href="https://github.com/TBXark/TKRubberIndicator" target="_blank" rel="noopener">TKRubberIndicator</a></td><td>A rubber animation pagecontrol</td><td>⭐️⭐️⭐️⭐️</td></tr></tbody></table><h4 id="FRP框架"><a href="#FRP框架" class="headerlink" title="FRP框架"></a>FRP框架</h4><table><thead><tr><th>开源库名</th><th>简介</th><th>推荐指数</th></tr></thead><tbody><tr><td><a href="https://github.com/ReactiveX/RxSwift" target="_blank" rel="noopener">RxSwift</a></td><td>Reactive Programming in Swift</td><td>⭐️⭐️⭐️⭐️⭐️</td></tr><tr><td><a href="https://github.com/ReactiveCocoa/ReactiveCocoa" target="_blank" rel="noopener">ReactiveCocoa</a></td><td>Reactive extensions to Cocoa frameworks, built on top of ReactiveSwift</td><td>⭐️⭐️⭐️⭐️⭐️</td></tr></tbody></table><h4 id="Socket"><a href="#Socket" class="headerlink" title="Socket"></a>Socket</h4><table><thead><tr><th>开源库名</th><th>简介</th><th>推荐指数</th></tr></thead><tbody><tr><td><a href="https://github.com/socketio/socket.io-client-swift" target="_blank" rel="noopener">socket.io-client-swift</a></td><td>Websockets in swift for iOS and OSX</td><td>⭐️⭐️⭐️⭐️</td></tr></tbody></table><h4 id="分段控件"><a href="#分段控件" class="headerlink" title="分段控件"></a>分段控件</h4><table><thead><tr><th>开源库名</th><th>简介</th><th>推荐指数</th></tr></thead><tbody><tr><td><a href="https://github.com/xmartlabs/XLPagerTabStrip" target="_blank" rel="noopener">XLPagerTabStrip</a></td><td>Android PagerTabStrip for iOS.</td><td>⭐️⭐️⭐️⭐️</td></tr></tbody></table><h4 id="异步编程"><a href="#异步编程" class="headerlink" title="异步编程"></a>异步编程</h4><table><thead><tr><th>开源库名</th><th>简介</th><th>推荐指数</th></tr></thead><tbody><tr><td><a href="https://github.com/mxcl/PromiseKit" target="_blank" rel="noopener">PromiseKit</a></td><td>Promises simplify asynchronous programming, freeing you up to focus on the more important things.</td><td>⭐️⭐️⭐️⭐️⭐️</td></tr></tbody></table><h4 id="协程编程"><a href="#协程编程" class="headerlink" title="协程编程"></a>协程编程</h4><table><thead><tr><th>开源库名</th><th>简介</th><th>推荐指数</th></tr></thead><tbody><tr><td><a href="https://github.com/belozierov/SwiftCoroutine" target="_blank" rel="noopener">SwiftCoroutine</a></td><td>Swift coroutines for iOS, macOS and Linux.</td><td>⭐️⭐️⭐️⭐️</td></tr></tbody></table><h4 id="暗黑适配"><a href="#暗黑适配" class="headerlink" title="暗黑适配"></a>暗黑适配</h4><table><thead><tr><th>开源库名</th><th>简介</th><th>推荐指数</th></tr></thead><tbody><tr><td><a href="https://github.com/microsoft/FluentDarkModeKit" target="_blank" rel="noopener">FluentDarkModeKit</a></td><td></td><td>⭐️⭐️⭐️⭐️</td></tr></tbody></table><h4 id="流式布局"><a href="#流式布局" class="headerlink" title="流式布局"></a>流式布局</h4><table><thead><tr><th>开源库名</th><th>简介</th><th>推荐指数</th></tr></thead><tbody><tr><td><a href="https://github.com/amirdew/CollectionViewPagingLayout" target="_blank" rel="noopener">CollectionViewPagingLayout</a></td><td>a simple but highly customizable paging layout for UICollectionView.</td><td>⭐️⭐️⭐️⭐️</td></tr></tbody></table><h3 id="三、结语"><a href="#三、结语" class="headerlink" title="三、结语"></a>三、结语</h3><blockquote><p>上面这些三方开源库按照自己的理解分类整理了一遍，这些库也是自己现在所了解到的，当然还有很多优秀的三方库自己也未发现和接触，我以后会不断在这篇博客中更新优秀的三方开源库。</p></blockquote><hr>]]></content>
    
    <summary type="html">
    
      自己从事iOS开发工作接近两年左右的时间了，在自己工作之余，收集整理了一些优秀的三方开源框架，自己整理的这些三方开源库涵盖了iOS开发面很多方面的知识。非常感谢这些开源库的作者们，正是因为这些库，提高了我们的开发效率，同样也是我们学习进步的源泉。现将这个整理工程文件分享出来，希望能给需要的朋友一些帮助，同时也自己也做下收集记录。
    
    </summary>
    
      <category term="iOS" scheme="http://blogwenbo.com/categories/iOS/"/>
    
    
      <category term="iOS" scheme="http://blogwenbo.com/tags/iOS/"/>
    
      <category term="GitHub" scheme="http://blogwenbo.com/tags/GitHub/"/>
    
      <category term="Swift" scheme="http://blogwenbo.com/tags/Swift/"/>
    
      <category term="RxSwift" scheme="http://blogwenbo.com/tags/RxSwift/"/>
    
      <category term="Alamofire" scheme="http://blogwenbo.com/tags/Alamofire/"/>
    
  </entry>
  
  <entry>
    <title>MAC切换host</title>
    <link href="http://blogwenbo.com/2019/06/03/MAC%E5%88%87%E6%8D%A2host/"/>
    <id>http://blogwenbo.com/2019/06/03/MAC切换host/</id>
    <published>2019-06-03T13:19:12.000Z</published>
    <updated>2020-03-30T14:09:57.143Z</updated>
    
    <content type="html"><![CDATA[<p class="description"></p><p>在日常开发中，有时我们需要切换不同的开发环境测试，切换多个hosts，下面介绍MAC电脑如何切换hosts。</p><a id="more"></a><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>在最初接触到iOS开发，切换正式与测试网络环境是通过切换网络地址域名的方式，本地定义一个宏定义实现域名的切换，这种方式确实比较的方便。后来自己又了解了另外一种切换网络环境的方式，就是切换host，在工程代码里面不需要做额外的配置。最开始一直使用同事配置好的环境，但后来发现有时还是不太方便，于是在自己的电脑也倒腾了一下，最后也能成功在真机上切换到正式测试环境，期间也遇到许多坑，下面介绍一下如何配置。</p><h3 id="SwitchHosts介绍与安装"><a href="#SwitchHosts介绍与安装" class="headerlink" title="SwitchHosts介绍与安装"></a>SwitchHosts介绍与安装</h3><h4 id="官方网址"><a href="#官方网址" class="headerlink" title="官方网址"></a><a href="https://oldj.github.io/SwitchHosts/#cn" target="_blank" rel="noopener">官方网址</a></h4><h4 id="GitHub"><a href="#GitHub" class="headerlink" title="GitHub"></a><a href="https://github.com/oldj/SwitchHosts/" target="_blank" rel="noopener">GitHub</a></h4><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><ul><li><p>通过终端命令安装</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew cask install switchhosts</span><br></pre></td></tr></table></figure></li><li><p>安装成功之后</p><p><img src="https://ww3.sinaimg.cn/large/006tNc79ly1g3obhfr0klj318i0rk41r.jpg" alt=""></p></li><li><p>将需要添加的host粘贴到指定的host名下即可，打开开关即可切换(<strong>注意：这里电脑的host是可以切换成功，当你用真机连上电脑共享出的wifi，发现还是没有切换，这时需要用到Dnsmasq工具</strong>)</p></li></ul><h3 id="Dnsmasq安装与配置"><a href="#Dnsmasq安装与配置" class="headerlink" title="Dnsmasq安装与配置"></a>Dnsmasq安装与配置</h3><blockquote><p>DNSmasq是一个小巧且方便地用于配置<a href="https://baike.baidu.com/item/DNS/427444" target="_blank" rel="noopener">DNS</a>和<a href="https://baike.baidu.com/item/DHCP" target="_blank" rel="noopener">DHCP</a>的工具，适用于小型<a href="https://baike.baidu.com/item/网络/143243" target="_blank" rel="noopener">网络</a>，它提供了DNS功能和可选择的DHCP功能。它服务那些只在本地适用的域名，这些域名是不会在全球的DNS服务器中出现的。DHCP服务器和DNS服务器结合，并且允许DHCP分配的地址能在DNS中正常解析，而这些DHCP分配的地址和相关命令可以配置到每台<a href="https://baike.baidu.com/item/主机/455151" target="_blank" rel="noopener">主机</a>中，也可以配置到一台核心设备中（比如路由器），DNSmasq支持静态和动态两种DHCP配置方式。</p><p>​                                                                                                                                                        —百度百科</p></blockquote><h4 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew link dnsmasq</span><br></pre></td></tr></table></figure><h4 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">resolv-file=/usr/local/etc/resolv.dnsmasq.conf</span><br><span class="line">strict-order</span><br><span class="line">listen-address=127.0.0.1</span><br><span class="line">addn-hosts=/usr/local/etc/dnsmasq.hosts</span><br><span class="line">conf-dir=/usr/local/etc/dnsmasq.d</span><br><span class="line">cache-size=10000</span><br></pre></td></tr></table></figure><p>名词解释：</p><ul><li><code>resolv-file</code>     上游DNS服务配置</li><li><code>strict-order</code>    严格按照上述文件中的配置顺序执行</li><li><code>listen-address</code> 监听请求的地址（127.0.0.1：仅本机，0.0.0.0：任何人）</li><li><code>addn-hosts</code>      一些你需要的解析结果</li><li><code>conf-dir</code>        其他配置路径</li><li><code>cache-size</code>      缓存大小</li></ul><h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">//停止服务</span><br><span class="line">sudo brew services stop dnsmasq</span><br><span class="line">//重启服务</span><br><span class="line">sudo brew services restart dnsmasq</span><br><span class="line">//刷新DNS缓存</span><br><span class="line">sudo killall -HUP mDNSResponder</span><br></pre></td></tr></table></figure><p><strong>注意：点击SwitchHosts切换后，如果发现未切换到想要的环境可按顺序执行以上命令</strong></p><h4 id="手机配置"><a href="#手机配置" class="headerlink" title="手机配置"></a>手机配置</h4><p>删除默认DNS，添加电脑的IP地址，如下图所示：</p><p><img src="https://ww4.sinaimg.cn/large/006tNc79ly1g3oboijx8cj30u01hc0ve.jpg" alt=""></p><p>最后打开手机访问发现已经连上测试环境了，超开心吧O(∩_∩)O~~。</p>]]></content>
    
    <summary type="html">
    
      在日常开发中，有时我们需要切换不同的开发环境测试，切换多个hosts，下面介绍MAC电脑如何切换hosts。
    
    </summary>
    
      <category term="MAC" scheme="http://blogwenbo.com/categories/MAC/"/>
    
    
      <category term="iOS" scheme="http://blogwenbo.com/tags/iOS/"/>
    
      <category term="MAC" scheme="http://blogwenbo.com/tags/MAC/"/>
    
  </entry>
  
  <entry>
    <title>iOS持续集成与自动打包</title>
    <link href="http://blogwenbo.com/2018/12/23/iOS%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90%E4%B8%8E%E8%87%AA%E5%8A%A8%E6%89%93%E5%8C%85/"/>
    <id>http://blogwenbo.com/2018/12/23/iOS持续集成与自动打包/</id>
    <published>2018-12-23T15:36:03.000Z</published>
    <updated>2020-03-30T14:09:57.148Z</updated>
    
    <content type="html"><![CDATA[<p class="description"></p><a id="more"></a><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote><p>从事iOS开发也有一段时间了，实习的时候自己就了解了iOS打包分发的一些方式，自己也写了一篇博客<a href="https://www.jianshu.com/p/fc6721cf5c7f" target="_blank" rel="noopener">iOS打测试包与分发测试</a>,介绍了如何打测试包以及上传相关的分发平台，也提到了脚本自动打包。现在自己负责几个项目的维护与开发工作，发现打一个包出来到上传到iTunes Connect上实在是太慢了，步骤也多，比较的耗时间，也不够自动化。后面自己了解了Jenkins持续构建工具，和fastlane自动打包工具，能够提高打包效率，下面开始介绍如何使用这些工具吧。</p></blockquote><h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><ul><li><h2 id="fastlane"><a href="#fastlane" class="headerlink" title="fastlane"></a>fastlane</h2></li><li><h2 id="Jenkins"><a href="#Jenkins" class="headerlink" title="Jenkins"></a>Jenkins</h2></li></ul><h1 id="fastlane-1"><a href="#fastlane-1" class="headerlink" title="fastlane"></a>fastlane</h1><p><img src="https://ws1.sinaimg.cn/large/006tNbRwly1fygs2adp2jj31ub0u0k95.jpg" alt=""></p><p>The easiest way to build and release mobile apps.fastlane* handles tedious tasks so you don’t have to.</p><p>一种快捷的方式去构建和发布手机APP，它可以帮我们处理冗长无味的工作。<br>最新公司项目打包频率增加，每次打包上传到三方分发平台或testflight上，都要耽搁好长的时间，我就在想有没有一种好的方式，帮我省去打包繁琐的过程，而是通过脚本自动打包上产到相应的平台，于是我就研究了一下fastlane工具，这篇博客主要是做相关记录，方便自己以后查阅，同时也希望能给需要的朋友一些参考帮助。</p><h3 id="相关地址"><a href="#相关地址" class="headerlink" title="相关地址"></a>相关地址</h3><ul><li>GitHub地址：<a href="https://github.com/fastlane/fastlane" target="_blank" rel="noopener">fastlane</a></li><li>官方地址：<a href="https://fastlane.tools/" target="_blank" rel="noopener">fastlane.tools</a></li><li>文档地址：<a href="https://docs.fastlane.tools/" target="_blank" rel="noopener">官方文档</a></li></ul><h3 id="安装fastlane"><a href="#安装fastlane" class="headerlink" title="安装fastlane"></a>安装fastlane</h3><ul><li><p>安装command line tools</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xcode-select --install</span><br></pre></td></tr></table></figure></li><li><p>Install fastlane</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew cask install fastlane</span><br></pre></td></tr></table></figure></li><li><p>切换到工程目录，初始化fastlane</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd [工程目录]</span><br><span class="line"></span><br><span class="line">fastlane init</span><br></pre></td></tr></table></figure></li></ul><p>初始化完成之后，工程目录大概是这个样子：</p><p><img src="https://ws2.sinaimg.cn/large/006tNbRwly1fygra84uobj30oa0jmacm.jpg" alt=""></p><h3 id="配置相关打包脚本"><a href="#配置相关打包脚本" class="headerlink" title="配置相关打包脚本"></a>配置相关打包脚本</h3><p>自己也是最近才熟悉了解fastlane相关命令的使用，我现在配置了打包到上传App Store和上传到Testflight上的脚本。我们可以通过不同的脚本配置，打出不同环境的ipa包，也可以直接通过fastlane配置上传APP相关信息到iTunes Connect上，比如应用截图，APP提交审核时一些信息等，自己暂时还没配置上传信息这些，下面只介绍我用到的吧。</p><ul><li><p>上传App Store</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">default_platform(<span class="symbol">:ios</span>)</span><br><span class="line"></span><br><span class="line">platform <span class="symbol">:ios</span> <span class="keyword">do</span></span><br><span class="line">desc <span class="string">"upload appstore lane"</span></span><br><span class="line">  lane <span class="symbol">:release</span> <span class="keyword">do</span></span><br><span class="line">    <span class="comment"># add actions here: https://docs.fastlane.tools/actions</span></span><br><span class="line">    <span class="comment">#pod资源更新</span></span><br><span class="line">    cocoapods</span><br><span class="line"></span><br><span class="line">    <span class="comment">#增加build版本号,需要先配置build setting</span></span><br><span class="line">    <span class="comment">#increment_build_number</span></span><br><span class="line">    <span class="comment">#自动增加build号</span></span><br><span class="line">    increment_build_number_in_plist</span><br><span class="line"></span><br><span class="line">    <span class="comment">#scheme_name</span></span><br><span class="line">    scheme_name = <span class="string">"xxxx"</span></span><br><span class="line">    <span class="comment">#workspace_name</span></span><br><span class="line">    workspace_name  = <span class="string">"xxxx.xcworkspace"</span></span><br><span class="line">    <span class="comment">#导出ipa路径</span></span><br><span class="line">    output_directory = <span class="string">"fastlanebuild_ipa"</span></span><br><span class="line">    <span class="comment">#导出名称 </span></span><br><span class="line">    output_name = <span class="string">"<span class="subst">#&#123;scheme_name&#125;</span>_<span class="subst">#&#123;Time.now.strftime(<span class="string">'%Y%m%d%H%M%S'</span>)&#125;</span>.ipa"</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">#打包,别名build_app</span></span><br><span class="line">    gym(</span><br><span class="line">         <span class="comment">#代码签名方式,"app-store", "ad-hoc", "package", "enterprise", "development", "developer-id"]</span></span><br><span class="line">        <span class="symbol">export_method:</span> <span class="string">"app-store"</span>,</span><br><span class="line">        <span class="symbol">export_xcargs:</span> <span class="string">"-allowProvisioningUpdates"</span>,</span><br><span class="line">        <span class="symbol">scheme:</span> scheme_name,</span><br><span class="line">        <span class="symbol">workspace:</span> workspace_name,</span><br><span class="line">        <span class="comment">#build之前先clean，减小包体积</span></span><br><span class="line">        <span class="symbol">clean:</span> <span class="literal">true</span>,</span><br><span class="line">        <span class="symbol">output_directory:</span> output_directory,</span><br><span class="line">        <span class="symbol">output_name:</span> output_name,</span><br><span class="line">        <span class="symbol">include_bitcode:</span> <span class="literal">false</span></span><br><span class="line">        )</span><br><span class="line">    <span class="comment">#发布到AppStore</span></span><br><span class="line">    upload_to_app_store(<span class="symbol">skip_metadata:</span> <span class="literal">true</span>,</span><br><span class="line">                        <span class="comment">#忽略上传截图</span></span><br><span class="line">                        <span class="symbol">skip_screenshots:</span> <span class="literal">true</span>,</span><br><span class="line">                        <span class="symbol">force:</span> <span class="literal">true</span>)</span><br><span class="line">  <span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>上传到App Store主要用到了gym，upload_to_app_store命令（他们都有别名，官方文档有描述），他们的配置参数都可以在fastlane官方文档里查到，通过简单的几行的脚本配置，就能打包上传App Store啦，是不是很方便easy！</p><ul><li><p>上传Testflight</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">default_platform(<span class="symbol">:ios</span>)</span><br><span class="line"></span><br><span class="line">platform <span class="symbol">:ios</span> <span class="keyword">do</span></span><br><span class="line">desc <span class="string">"upload to testflight lane"</span></span><br><span class="line">  lane <span class="symbol">:beta</span> <span class="keyword">do</span></span><br><span class="line">    <span class="comment">#保证推送证书可用</span></span><br><span class="line">    get_push_certificate</span><br><span class="line">    <span class="comment">#pod资源更新</span></span><br><span class="line">    cocoapods</span><br><span class="line">    <span class="comment">#代码签名方式,"app-store", "ad-hoc", "package", "enterprise", "development", "developer-id"]</span></span><br><span class="line">    <span class="comment">#sync_code_signing(type: "appstore")</span></span><br><span class="line">    <span class="comment">#自动增加build号</span></span><br><span class="line">    increment_build_number_in_plist</span><br><span class="line">    <span class="comment">#scheme_name</span></span><br><span class="line">    scheme_name = <span class="string">"xxxx"</span></span><br><span class="line">    <span class="comment">#workspace_name</span></span><br><span class="line">    workspace_name  = <span class="string">"xxx.xcworkspace"</span></span><br><span class="line">    <span class="comment">#导出ipa路径</span></span><br><span class="line">    output_directory = <span class="string">"fastlanebuild_ipa"</span></span><br><span class="line">    <span class="comment">#building app</span></span><br><span class="line">    build_app(<span class="symbol">scheme:</span> scheme_name,</span><br><span class="line">              <span class="symbol">workspace:</span> workspace_name,</span><br><span class="line">              <span class="symbol">include_bitcode:</span> <span class="literal">false</span>,</span><br><span class="line">              <span class="symbol">clean:</span> <span class="literal">true</span>,</span><br><span class="line">              <span class="symbol">output_name:</span> <span class="string">"<span class="subst">#&#123;scheme_name&#125;</span>_<span class="subst">#&#123;Time.now.strftime(<span class="string">'%Y%m%d%H%M%S'</span>)&#125;</span>.ipa"</span>,</span><br><span class="line">              <span class="symbol">output_directory:</span> output_directory,</span><br><span class="line">              <span class="symbol">export_method:</span> <span class="string">"app-store"</span>)</span><br><span class="line">    <span class="comment">#上传到Testflight</span></span><br><span class="line">    upload_to_testflight(<span class="symbol">skip_waiting_for_build_processing:</span> <span class="literal">true</span>)</span><br><span class="line">    <span class="comment">#slack(message: "Successfully distributed a new beta build")</span></span><br><span class="line">  <span class="keyword">end</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><p>脚本配置和上传App Store差不太多，唯一不同是用到了upload_to_testflight命令。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><blockquote><p>自己能使用fastlane正常打出ipa包来，倒腾了一两天，网上介绍fastlane使用资料也是一搜一大堆，但大部分介绍都不是很全，最全的资料还是官方文档，这次的折腾也给了我很多启示，要学会看官方文档资料，现在也只用到了fastlane提供的部分功能，遇到的坑不是很多，等以后有更深入的使用，在更新博客与大家分享。</p></blockquote><h1 id="Jenkins-1"><a href="#Jenkins-1" class="headerlink" title="Jenkins"></a>Jenkins</h1><p><img src="https://ws2.sinaimg.cn/large/006tNbRwly1fygs1hjn5vj31x00myq9g.jpg" alt=""></p><blockquote><p>Jenkins is a self-contained, open source automation server which can be used to automate all sorts of tasks related to building, testing, and delivering or deploying software.</p><p>Jenkins can be installed through native system packages, Docker, or even run standalone by any machine with a Java Runtime Environment (JRE) installed.</p></blockquote><p>怎么说呢，我也不太清楚自己是怎么接触到Jenkins持续集成工具的，当我有最初由持续集成概念的时候应该是我学习cocoapods制作私有共有库的时候，有一个GitHub的徽标是表示项目持续集成状态，叫<a href="https://travis-ci.org/" target="_blank" rel="noopener">Travis CI</a>，貌似是开源项目免费，私有项目需要收费。自己那时候发布的pod库Travis CI没有通过，自己倒腾好久了才让这个徽标变为绿色。好了，不闲聊了，关于Jenkins介绍，我这里也不做介绍了，网上资料也是一搜一大堆，我只介绍集成和使用关键的几个步骤吧！</p><h3 id="相关地址-1"><a href="#相关地址-1" class="headerlink" title="相关地址"></a>相关地址</h3><ul><li>GitHub：<a href="https://github.com/jenkinsci/jenkins" target="_blank" rel="noopener">jenkins</a></li><li>官方网址：<a href="https://jenkins.io/" target="_blank" rel="noopener">https://jenkins.io/</a></li></ul><h3 id="安装Java环境（MAC）"><a href="#安装Java环境（MAC）" class="headerlink" title="安装Java环境（MAC）"></a>安装Java环境（MAC）</h3><ul><li>因为Jenkins是基于Java语言开发的，首先要检查自己的电脑是否安装Java。没有安装会报以下错误</li></ul><p><img src="https://ws3.sinaimg.cn/large/006tNbRwly1fygsr4wnd8j30vc090taq.jpg" alt=""></p><p>错误已经给出提示了，按照提示安装java8吧：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew cask install homebrew/cask-versions/java8</span><br></pre></td></tr></table></figure><p>通过命令<code>java -version</code>查看是否安装成功。</p><ul><li>安装成功之后配置一下环境变量：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">#查看java home 目录</span><br><span class="line">/usr/libexec/java_home</span><br><span class="line">输出是</span><br><span class="line">/Library/Java/JavaVirtualMachines/jdk1.8.0_192.jdk/Contents/Home</span><br><span class="line"></span><br><span class="line">#之后编辑bash_profile</span><br><span class="line">vi .bash_profile</span><br><span class="line"></span><br><span class="line">#编辑以下内容</span><br><span class="line">export JAVA_HOME=/Library/Java/JavaVirtualMachines/jdk1.8.0_192.jdk/Contents/Home</span><br><span class="line">export PATH=$JAVA_HOME/bin:$PATH  </span><br><span class="line">export CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar</span><br><span class="line"></span><br><span class="line">:wq</span><br><span class="line">保存即可</span><br></pre></td></tr></table></figure><h3 id="安装Jenkin"><a href="#安装Jenkin" class="headerlink" title="安装Jenkin"></a>安装Jenkin</h3><ul><li>Jenkins安装方式有很多，可以在官方下载安装包安装，也可以通过brew安装，但我个人更推荐通过brew：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install jenkins</span><br></pre></td></tr></table></figure><p>安装成功之后，会默认打开网址<a href="http://localhost:8080，如果没有打开我们在终端手动启动Jenkins" target="_blank" rel="noopener">http://localhost:8080，如果没有打开我们在终端手动启动Jenkins</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jenkins</span><br></pre></td></tr></table></figure><p>第一次登录需要用初始化密码，将初始化密码拷贝进去就可以登录了，之后需要安装一些默认的插件，等待安装完成就可以进入主界面啦。</p><h3 id="项目创建"><a href="#项目创建" class="headerlink" title="项目创建"></a>项目创建</h3><ul><li><p>创建项目（Create New Job）</p><p><img src="https://ws3.sinaimg.cn/large/006tNbRwly1fyh1dmhh2nj31xs0pgtdp.jpg" alt=""></p><p><img src="https://ws2.sinaimg.cn/large/006tNbRwly1fyh1e6hitnj31q20u046x.jpg" alt=""></p></li></ul><h3 id="常规设置（general）"><a href="#常规设置（general）" class="headerlink" title="常规设置（general）"></a>常规设置（general）</h3><ul><li>丢弃旧的构建</li></ul><p><img src="https://ws1.sinaimg.cn/large/006tNbRwly1fyh1wi0sxfj31qp0u0456.jpg" alt=""></p><ul><li><p>参数化构建过程</p><p>如果我们项目用的git托管，这时候可能会有多个分支，在构建的时候我们需要选择一个分支。这功能我们需要装一个插件<strong><a href="https://wiki.jenkins-ci.org/display/JENKINS/Git+Parameter+Plugin" target="_blank" rel="noopener">Git Parameter</a></strong>，然后做以下配置：</p><p><img src="https://ws4.sinaimg.cn/large/006tNbRwly1fyh27arftqj31dz0u0dkr.jpg" alt=""></p></li></ul><h3 id="源代码管理（Source-Code-Management）"><a href="#源代码管理（Source-Code-Management）" class="headerlink" title="源代码管理（Source Code Management）"></a>源代码管理（Source Code Management）</h3><ul><li>因为我的项目是用git托管的，这里源代码管理我选的git</li></ul><p><img src="https://ws1.sinaimg.cn/large/006tNbRwly1fyh2d6gsq6j31dx0u07an.jpg" alt=""></p><ul><li><p>Build Trigger</p><p>这里是指怎么触发构建操作，一搬选择定时构建和轮询构建，看情况而定，这里我暂时都没有勾选，需要注意的是时间书写的格式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#每天下午18：00构建一次</span><br><span class="line">H 18 * * *</span><br><span class="line"></span><br><span class="line">#每5分钟构建一次</span><br><span class="line">H/5 * * * *</span><br></pre></td></tr></table></figure><p><img src="https://ws4.sinaimg.cn/large/006tNbRwly1fyh2kfsk7dj31b60u0jwq.jpg" alt=""></p></li></ul><h3 id="构建环境（Build-Environment）"><a href="#构建环境（Build-Environment）" class="headerlink" title="构建环境（Build Environment）"></a>构建环境（Build Environment）</h3><p>暂时没有用到，不做介绍啦。</p><h3 id="构建（Build）"><a href="#构建（Build）" class="headerlink" title="构建（Build）"></a>构建（Build）</h3><p>构建完成之后执行的操作，有如下选项</p><p><img src="https://ws4.sinaimg.cn/large/006tNbRwly1fyh2nuyi25j31g80hejt9.jpg" alt=""></p><p>这里我认为是比较重要的地方啦，build成功之后，这里我们可已选择执行shell打包脚本，根据脚本配置导出ipa包，也可以执行fastlane命令上传App Store，也可以上传蒲公英或fir.im三方分发平台。</p><ul><li><p>shell打包脚本</p><p>用苹果提供的原生打包命令编写shell，这里我没有采用这种方式啦，网上也可以搜到相关的脚本，就不做介绍了。</p></li><li><p>执行fastlane命令上传App Store</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fastlane release</span><br></pre></td></tr></table></figure><p><strong>release</strong>是之前介绍fastlane的时候编写的一个上传App Store的脚本，这里我们也可以上传Testflight。</p></li><li><p>上传蒲公英或fir.im三方分发平台</p><p>这里我做了上传蒲公英平台的操作，蒲公英文档也有介绍相关的命令<a href="https://www.pgyer.com/doc/view/jenkins_plugin，我也是通过插件的方式，也可以通过命令。" target="_blank" rel="noopener">https://www.pgyer.com/doc/view/jenkins_plugin，我也是通过插件的方式，也可以通过命令。</a></p><p><img src="https://ws4.sinaimg.cn/large/006tNbRwly1fyh307sh6fj31gi0hg40l.jpg" alt=""></p><ul><li>参数配置，配置好如下两个参数就可以自动帮我们上传到蒲公英平台啦，是不是很方便</li></ul></li></ul><p><img src="https://ws2.sinaimg.cn/large/006tNbRwly1fyh33asqc7j31f80gq425.jpg" alt=""></p><h3 id="Post-build-Actions"><a href="#Post-build-Actions" class="headerlink" title="Post-build Actions"></a>Post-build Actions</h3><p>构建完成之后的操作，实用的就是发邮件通知构建结果，暂时不做介绍，有兴趣的朋友可以自行研究。</p><h3 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h3><blockquote><p>总算介绍完成了，从零开始倒腾公司的项目，到支持Jenkins持续集成以及后续的操作，中间过程还是经历了很多的坑，但最后的结果还是令自己满意的，自己从中也学到了许多新知识，还是自己太“懒”吧，不然怎么会不折不休倒腾那么久，哈哈。现在打包还是比之前方便了许多，也省去了许多重复乏味的工作。如果文章中有描述不对的地方，还请大家不吝批评指正，自己也是最近才实践自动打包相关的工具，希望能和大家多多学习交流。</p></blockquote><h1 id="问题解决"><a href="#问题解决" class="headerlink" title="问题解决"></a>问题解决</h1><ul><li><p>自己设置账号密码无法登陆</p><p>去.jenkins目录下，修改config.xml参数，改为false就好了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;useSecurity&gt;false&lt;/useSecurity&gt;</span><br></pre></td></tr></table></figure></li></ul><h1 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h1><ul><li><a href="https://www.jianshu.com/p/d5bfa5c4d86a" target="_blank" rel="noopener">Max OS上Java环境变量配置</a></li><li><a href="https://www.pgyer.com/doc/view/jenkins_plugin" target="_blank" rel="noopener">使用 Jenkins 插件上传应用到蒲公英</a></li><li><a href="https://blog.csdn.net/u012076316/article/details/52056107" target="_blank" rel="noopener">jenkins构建时支持git选择分支</a></li><li><p><a href="https://juejin.im/post/5a7b10bb6fb9a0636263bfd5" target="_blank" rel="noopener">iOS 持续交付之 Fastlane</a></p></li><li><p><a href="https://www.jianshu.com/p/41ecb06ae95f" target="_blank" rel="noopener">手把手教你利用Jenkins持续集成iOS项目</a></p></li></ul>]]></content>
    
    <summary type="html">
    
      从事iOS开发也有一段时间了，实习的时候自己就了解了iOS打包分发的一些方式，自己也写了一篇博客[iOS打测试包与分发测试](https://www.jianshu.com/p/fc6721cf5c7f),介绍了如何打测试包以及上传相关的分发平台，也提到了脚本自动打包。现在自己负责几个项目的维护与开发工作，发现打一个包出来到上传到iTunes Connect上实在是太慢了，步骤也多，比较的耗时间，也不够自动化。后面自己了解了Jenkins持续构建工具，和fastlane自动打包工具，能够提高打包效率，下面开始介绍如何使用这些工具吧。
    
    </summary>
    
      <category term="iOS" scheme="http://blogwenbo.com/categories/iOS/"/>
    
    
      <category term="iOS" scheme="http://blogwenbo.com/tags/iOS/"/>
    
      <category term="fastlane" scheme="http://blogwenbo.com/tags/fastlane/"/>
    
      <category term="Jenkins" scheme="http://blogwenbo.com/tags/Jenkins/"/>
    
      <category term="fir.im" scheme="http://blogwenbo.com/tags/fir-im/"/>
    
      <category term="蒲公英" scheme="http://blogwenbo.com/tags/%E8%92%B2%E5%85%AC%E8%8B%B1/"/>
    
  </entry>
  
  <entry>
    <title>iOS 文件获取与选择</title>
    <link href="http://blogwenbo.com/2018/11/06/iOS-%E6%96%87%E4%BB%B6%E8%8E%B7%E5%8F%96%E4%B8%8E%E9%80%89%E6%8B%A9/"/>
    <id>http://blogwenbo.com/2018/11/06/iOS-文件获取与选择/</id>
    <published>2018-11-06T14:26:54.000Z</published>
    <updated>2020-03-30T14:09:57.147Z</updated>
    
    <content type="html"><![CDATA[<p class="description"></p><a id="more"></a><h3 id="一、需求分析"><a href="#一、需求分析" class="headerlink" title="一、需求分析"></a>一、需求分析</h3><blockquote><p>最近开发遇到一个需求，就是要从手机客户端通过云信IM发送文件，最开始想到的是通过云信发送文件是没有问题的，但似乎获取从手机获取文件没那么方便，安卓手机是可以轻松去选取系统文件，iOS相对没那么开放，但这也是iOS相比安卓安全的原因之一。除了系统开发的图片文件和视频文件，就不能获取其他格式文件吗？答案是否定的，自己留意了微信，发现有发送文件功能，微信点击发送文件，就会跳转到一个系统提供的文件拾取界面。自己从前也没有接触过，查阅了相关资料，自己也做下记录，下面开始介绍iOS获取文件的几种方式吧！</p></blockquote><h3 id="二、通过WBUIDocumentPickerController拾取"><a href="#二、通过WBUIDocumentPickerController拾取" class="headerlink" title="二、通过WBUIDocumentPickerController拾取"></a>二、通过<strong>WBUIDocumentPickerController</strong>拾取</h3><ul><li>iOS 新增的文件拾取类，API也比较的简单，通过简单的几句代码就可以实现文件拾取功能</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">UIDocumentPickerViewController *documentPickerViewController = [[UIDocumentPickerViewController alloc]initWithDocumentTypes:self.documentTypes</span><br><span class="line">                                                                                                                         inMode:UIDocumentPickerModeOpen];</span><br><span class="line">    documentPickerViewController.delegate = self;</span><br><span class="line">    [self presentViewController:documentPickerViewController</span><br><span class="line">                       animated:YES</span><br><span class="line">                     completion:nil];</span><br></pre></td></tr></table></figure><ul><li>创建的时候需传入类型，更多UTI类型可到苹果官网查看：<a href="https://developer.apple.com/library/archive/documentation/Miscellaneous/Reference/UTIRef/Articles/System-DeclaredUniformTypeIdentifiers.html#//apple_ref/doc/uid/TP40009259-SW1" target="_blank" rel="noopener">https://developer.apple.com/library/archive/documentation/Miscellaneous/Reference/UTIRef/Articles/System-DeclaredUniformTypeIdentifiers.html#//apple_ref/doc/uid/TP40009259-SW1</a></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">- (NSArray *)documentTypes &#123;</span><br><span class="line">    if (!_documentTypes) &#123;</span><br><span class="line">        _documentTypes = @[@&quot;public.content&quot;,</span><br><span class="line">                           @&quot;public.text&quot;,</span><br><span class="line">                           @&quot;public.source-code&quot;,</span><br><span class="line">                           @&quot;public.image&quot;,</span><br><span class="line">                           @&quot;public.audiovisual-content&quot;,</span><br><span class="line">                           @&quot;com.adobe.pdf&quot;,</span><br><span class="line">                           @&quot;com.apple.keynote.key&quot;,</span><br><span class="line">                           @&quot;com.microsoft.word.doc&quot;,</span><br><span class="line">                           @&quot;com.microsoft.excel.xls&quot;,</span><br><span class="line">                           @&quot;com.microsoft.powerpoint.ppt&quot;,</span><br><span class="line">                           @&quot;public.rtf&quot;,</span><br><span class="line">                           @&quot;public.html&quot;,</span><br><span class="line">                           @&quot;&quot;];</span><br><span class="line">    &#125;</span><br><span class="line">    return _documentTypes;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>代理方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">// MARK:UIDocumentPickerDelegate</span><br><span class="line">/*  &lt; iOS 11 API &gt; */</span><br><span class="line">- (void)documentPicker:(UIDocumentPickerViewController *)controller didPickDocumentsAtURLs:(NSArray&lt;NSURL *&gt; *)urls &#123;</span><br><span class="line">    NSLog(@&quot;%s&quot;,__func__);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/*  &lt; iOS 8 API &gt; */</span><br><span class="line">- (void)documentPicker:(UIDocumentPickerViewController *)controller didPickDocumentAtURL:(NSURL *)url &#123;</span><br><span class="line">    NSLog(@&quot;%s&quot;,__func__);</span><br><span class="line">    </span><br><span class="line">    NSArray *array = [[url absoluteString] componentsSeparatedByString:@&quot;/&quot;];</span><br><span class="line">    NSString *fileName = [array lastObject];</span><br><span class="line">    fileName = [fileName stringByRemovingPercentEncoding];</span><br><span class="line">    </span><br><span class="line">    if ([WBiCloudManager iCloudEnable]) &#123;</span><br><span class="line">        [WBiCloudManager wb_downloadWithDocumentURL:url</span><br><span class="line">                                     completedBlock:^(id obj) &#123;</span><br><span class="line">                                         NSData *data = obj;</span><br><span class="line">                                         NSString *path = [NSHomeDirectory() stringByAppendingString:[NSString stringWithFormat:@&quot;/Documents/%@&quot;,fileName]];</span><br><span class="line">                                         /*  &lt; 写入沙盒 &gt; */</span><br><span class="line">                                         [data writeToFile:path</span><br><span class="line">                                                atomically:YES];</span><br><span class="line">                                     &#125;];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (void)documentPickerWasCancelled:(UIDocumentPickerViewController *)controller &#123;</span><br><span class="line">    NSLog(@&quot;%s&quot;,__func__);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意</strong>：我们从文件拾取器选择了一个文件，有可能这个文件还没有从iCloud同步到本地，这时我们需要子类化一个<strong>UIDocument</strong>对象，去做文件相关的操作，在使用前还需判断是否开启iCloud服务：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">//如果url不为空，说明可以使用iCloud相关功能api</span><br><span class="line">+ (NSURL *)iCloudURLForIdentifier:(NSString *)identifier &#123;</span><br><span class="line">    NSURL *url = nil;</span><br><span class="line">    NSFileManager *fileManager = [NSFileManager defaultManager];</span><br><span class="line">    url = [fileManager URLForUbiquityContainerIdentifier:identifier];</span><br><span class="line">    return url;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>关于<strong>WBUIDocumentPickerController</strong>的使用，我写了一个详细的demo，在文章末尾我也为贴出GitHub地址。</p><h3 id="三、UIDocumentBrowserViewController"><a href="#三、UIDocumentBrowserViewController" class="headerlink" title="三、UIDocumentBrowserViewController"></a>三、UIDocumentBrowserViewController</h3><blockquote><p>Important</p><p>Always assign the document browser as your app’s root view controller. Don’t place the document browser in a navigation controller, tab bar, or split view, and don’t present the document browser modally.</p><p>If you want to present a document browser from another location in your view hierarchy, use a <a href="https://developer.apple.com/documentation/uikit/uidocumentpickerviewcontroller?language=objc" target="_blank" rel="noopener"><code>UIDocumentPickerViewController</code></a> instead.</p></blockquote><p>iOS 11新出的API，用来浏览本地系统文件，iCloud文件。一般的项目可能用不到这个类，使用的时候注意遵循官方文档说明，将UIDocumentPickerViewController设置为窗口根控制器。这里也不做过多说明了，自己也写了个小demo，感兴趣的朋友可下载demo查看。</p><h3 id="四、通过三方APP拷贝文件到自己的项目"><a href="#四、通过三方APP拷贝文件到自己的项目" class="headerlink" title="四、通过三方APP拷贝文件到自己的项目"></a>四、通过三方APP拷贝文件到自己的项目</h3><p>通过这种方式获取文件，之前自己已经接触过了，比如像QQ，微信打开一个文件选择用自己的APP打开，自己APP先要在 <strong>info.plist</strong>中配置支持文件类型，然后就能将文件拷贝到自己的项目，主要用到的方法是<strong>AppDelegate</strong>中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">- (BOOL)application:(UIApplication *)app openURL:(NSURL *)url options:(NSDictionary&lt;UIApplicationOpenURLOptionsKey,id&gt; *)options &#123;</span><br><span class="line">    NSLog(@&quot;url  %@&quot;,[url absoluteString]);</span><br><span class="line">    </span><br><span class="line">    /*  &lt; 三方App拷贝到自己App处理 &gt; */</span><br><span class="line">    if ([[url absoluteString] containsString:@&quot;file&quot;]) &#123;</span><br><span class="line">        NSArray *array = [[url absoluteString] componentsSeparatedByString:@&quot;/&quot;];</span><br><span class="line">        NSString *fileName = [array lastObject];</span><br><span class="line">        fileName = [fileName stringByRemovingPercentEncoding];</span><br><span class="line">        </span><br><span class="line">        NSString *path = [NSHomeDirectory() stringByAppendingString:[NSString stringWithFormat:@&quot;/Documents/Inbox/%@&quot;,fileName]];</span><br><span class="line">        </span><br><span class="line">        NSData *data = [NSData dataWithContentsOfFile:path];</span><br><span class="line">    &#125;</span><br><span class="line">    return YES;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="五、结语"><a href="#五、结语" class="headerlink" title="五、结语"></a>五、结语</h3><blockquote><p>自己暂时了解到的文件获取方式就这些了，以后有新的方式再做补充吧，文章如果有描述不对的地方还请批评指正，如果你有更多更好的方式，欢迎一起交流学习。既然有发送文件，就会有预览文件，接下来我也会写一篇文件预览的文章。好了，最后贴出demo地址吧！</p></blockquote><h3 id="六、Demo"><a href="#六、Demo" class="headerlink" title="六、Demo"></a>六、Demo</h3><p><a href="https://github.com/wenmobo/WBDocumentBrowserDemo" target="_blank" rel="noopener">WBDocumentBrowserDemo</a></p><h3 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h3><p>1、<a href="https://developer.apple.com/documentation/uikit/view_controllers/adding_a_document_browser_to_your_app?language=objc" target="_blank" rel="noopener">https://developer.apple.com/documentation/uikit/view_controllers/adding_a_document_browser_to_your_app?language=objc</a></p><p>2、<a href="https://developer.apple.com/documentation/uikit/view_controllers/building_a_document_browser-based_app?language=objc" target="_blank" rel="noopener">https://developer.apple.com/documentation/uikit/view_controllers/building_a_document_browser-based_app?language=objc</a></p><p>3、<a href="https://www.jianshu.com/p/1d07fab48e67" target="_blank" rel="noopener">iOS - 从iCloud，QQ，微信获取文件</a></p>]]></content>
    
    <summary type="html">
    
      最近开发遇到一个需求，就是要从手机客户端通过云信IM发送文件，最开始想到的是通过云信发送文件是没有问题的，但似乎获取从手机获取文件没那么方便，安卓手机是可以轻松去选取系统文件，iOS相对没那么开放，但这也是iOS相比安卓安全的原因之一。除了系统开发的图片文件和视频文件，就不能获取其他格式文件吗？答案是否定的，自己留意了微信，发现有发送文件功能，微信点击发送文件，就会跳转到一个系统提供的文件拾取界面。自己从前也没有接触过，查阅了相关资料，自己也做下记录，下面开始介绍iOS获取文件的几种方式吧！
    
    </summary>
    
      <category term="iOS" scheme="http://blogwenbo.com/categories/iOS/"/>
    
    
      <category term="iOS" scheme="http://blogwenbo.com/tags/iOS/"/>
    
      <category term="GitHub" scheme="http://blogwenbo.com/tags/GitHub/"/>
    
      <category term="iCloud" scheme="http://blogwenbo.com/tags/iCloud/"/>
    
  </entry>
  
  <entry>
    <title>iOS APP瘦身实践</title>
    <link href="http://blogwenbo.com/2018/11/04/iOS-APP%E7%98%A6%E8%BA%AB%E5%AE%9E%E8%B7%B5/"/>
    <id>http://blogwenbo.com/2018/11/04/iOS-APP瘦身实践/</id>
    <published>2018-11-04T09:51:54.000Z</published>
    <updated>2020-03-30T14:09:57.146Z</updated>
    
    <content type="html"><![CDATA[<p class="description"></p><a id="more"></a><h3 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h3><blockquote><p>好久没有更新博客了，自己也一直想写一些性能优化，APP瘦身的文章，现在就做下记录与分享，方便以后查阅。公司这段新需求不算太多，自己就抽时间，对APP安装包大小做了一些优化，优化后的成果还是很明显的，从之前的90M左右缩减到了40几M。网上还是很容易找到相关的文章，下面我总结下可以从哪几方面去做优化工作吧！</p></blockquote><h3 id="二、图片资源优化"><a href="#二、图片资源优化" class="headerlink" title="二、图片资源优化"></a>二、图片资源优化</h3><ul><li><p>不看不知道，一看吓一跳，项目中的图片资源原来是如此占用大小，动不动一张图片就是好几兆，并且有很多还是没有用到的。找出项目中未用到的图片资源我们可以借助这款软件：</p><p> <a href="https://github.com/tinymind/LSUnusedResources/raw/master/Release/LSUnusedResources.app.zip" target="_blank" rel="noopener">LSUnusedResources</a></p><p>借助着款开源软件我们可以找出项目中没有用到的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[imageset, jpg, png, gif]</span><br></pre></td></tr></table></figure><p>当然，搜索出来的结果不一定是百分百准确的，还是要结合实际情况。</p></li><li><p>除了删除没有用到的图片资源，对于用到的大图片资源，我们还需要对大图进行压缩，压缩的同时还需要保证图片的显示效果，推荐一个非常棒的图片压缩网站吧：</p><p><a href="https://tinypng.com/" target="_blank" rel="noopener">tinypng</a></p><p>当然还有其他的压缩工具网站，可以自己去搜索探寻吧。</p></li></ul><h3 id="三、删除项目没有使用到的类"><a href="#三、删除项目没有使用到的类" class="headerlink" title="三、删除项目没有使用到的类"></a>三、删除项目没有使用到的类</h3><ul><li>删除项目中未用到的类，就需要看经验了，没有用到的类，一般没有初始化相关的代码<code>alloc init</code>或<code>new</code>，这样就可以删除项目中未使用的类。这个工作最好是定期进行一次吧，如果等到很久来处理，那工作量真的就太大了，如果是需求变更频繁的话，肯定会产生很多未用到的类。所以还是定期做一次排查吧，以免留下沉重的历史包袱。</li><li>除了手工排查，还可以借助命令行工具 <code>find</code>命令，之前看到过一篇博客介绍，一时想不起来，等想起来在做补充吧。</li></ul><h3 id="四、LinkMap文件分析"><a href="#四、LinkMap文件分析" class="headerlink" title="四、LinkMap文件分析"></a>四、LinkMap文件分析</h3><ul><li><p>关于LinkMap的介绍，网上一搜一大堆，这里就不做详细介绍了，说下怎么配置Xcode获得LinkMap文件和借助工具分析文件大小吧。</p></li><li><p>XCode -&gt; Project -&gt; Build Settings -&gt; 搜map -&gt; 把Write Link Map File选项设为YES，并指定好linkMap的存储位置</p></li><li><p>编译后，到编译目录里找到该txt文件，目录如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">~/Library/Developer/Xcode/DerivedData/XXX-XXXXXXXXXXXX/Build/Intermediates/XXX.build/Debug-iphoneos/XXX.build/</span><br></pre></td></tr></table></figure></li><li><p>之后借助GitHub上<a href="https://github.com/huanxsd/LinkMap" target="_blank" rel="noopener">LinkMap</a>工具或<a href="https://gist.github.com/bang590/8f3e9704f1c2661836cd" target="_blank" rel="noopener">linkmap.js</a>，分析工程可执行文件大小。</p></li></ul><h3 id="五、移除模拟器支持文件"><a href="#五、移除模拟器支持文件" class="headerlink" title="五、移除模拟器支持文件"></a>五、移除模拟器支持文件</h3><ul><li><p>我们在集成一些三方库的时候，这些三方库可能包含模拟器指令集。比如说环信IMSDK，打包上传App Store需移除模拟器支持指令集。</p></li><li><p>查看静态库支持的指令集</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lipo -info libname.a(或者libname.framework/libname)</span><br></pre></td></tr></table></figure></li><li><p>合并静态库</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">lipo -create 静态库存放路径1  静态库存放路径2 ...  -output 整合后存放的路径</span><br><span class="line">lipo  -create  libname-armv7.a   libname-armv7s.a   libname-i386.a  -output  libname.a</span><br></pre></td></tr></table></figure></li><li><p>静态库拆分</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lipo 静态库源文件路径 -thin CPU架构名称 -output 拆分后文件存放路径</span><br></pre></td></tr></table></figure></li></ul><h3 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h3><ul><li><a href="https://www.jianshu.com/p/c94dedef90b7" target="_blank" rel="noopener">iOS APP安装包瘦身实践</a></li><li><a href="https://www.jianshu.com/p/4bd6d1315104" target="_blank" rel="noopener">LinkMap文件分析</a></li><li><a href="https://www.jianshu.com/p/2d0ba1bc2a50" target="_blank" rel="noopener">APP瘦身 - 之framework</a></li></ul>]]></content>
    
    <summary type="html">
    
      好久没有更新博客了，自己也一直想写一些性能优化，APP瘦身的文章，现在就做下记录与分享，方便以后查阅。公司这段新需求不算太多，自己就抽时间，对APP安装包大小做了一些优化，优化后的成果还是很明显的，从之前的90M左右缩减到了40几M。网上还是很容易找到相关的文章，下面我总结下可以从哪几方面去做优化工作吧！
    
    </summary>
    
      <category term="iOS" scheme="http://blogwenbo.com/categories/iOS/"/>
    
    
      <category term="iOS" scheme="http://blogwenbo.com/tags/iOS/"/>
    
      <category term="性能优化" scheme="http://blogwenbo.com/tags/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>iOS UI设计规范</title>
    <link href="http://blogwenbo.com/2018/09/14/iOS-UI%E8%AE%BE%E8%AE%A1%E8%A7%84%E8%8C%83/"/>
    <id>http://blogwenbo.com/2018/09/14/iOS-UI设计规范/</id>
    <published>2018-09-13T16:15:15.000Z</published>
    <updated>2020-03-30T14:09:57.146Z</updated>
    
    <content type="html"><![CDATA[<p class="description"></p><a id="more"></a><blockquote><p>这篇文章收录了最新iPhone设备尺寸，主要是为了自己方便自己查阅苹果设备尺寸，图标尺寸等，苹果官方有Human Interface Guidelines文档，感兴趣的朋友可以自行查阅。</p></blockquote><h3 id="官方文档地址"><a href="#官方文档地址" class="headerlink" title="官方文档地址"></a>官方文档地址</h3><p><a href="https://developer.apple.com/design/human-interface-guidelines/" target="_blank" rel="noopener">Human Interface Guidelines</a></p><h3 id="设备尺寸"><a href="#设备尺寸" class="headerlink" title="设备尺寸"></a>设备尺寸</h3><p><img src="https://ws1.sinaimg.cn/large/0069RVTdly1fv8b4605d6j313w0ey755.jpg" alt=""></p><table><thead><tr><th style="text-align:left">Device</th><th style="text-align:left">Portrait dimensions</th><th style="text-align:left">Landscape dimensions</th></tr></thead><tbody><tr><td style="text-align:left">12.9” iPad Pro</td><td style="text-align:left">2048px × 2732px</td><td style="text-align:left">2732px × 2048px</td></tr><tr><td style="text-align:left">10.5” iPad Pro</td><td style="text-align:left">1668px × 2224px</td><td style="text-align:left">2224px × 1668px</td></tr><tr><td style="text-align:left">9.7” iPad</td><td style="text-align:left">1536px × 2048px</td><td style="text-align:left">2048px × 1536px</td></tr><tr><td style="text-align:left">7.9” iPad mini 4</td><td style="text-align:left">1536px × 2048px</td><td style="text-align:left">2048px × 1536px</td></tr><tr><td style="text-align:left">iPhone XS Max</td><td style="text-align:left">1242px × 2688px</td><td style="text-align:left">2688px × 1242px</td></tr><tr><td style="text-align:left">iPhone XS</td><td style="text-align:left">1125px × 2436px</td><td style="text-align:left">2436px × 1125px</td></tr><tr><td style="text-align:left">iPhone XR</td><td style="text-align:left">828px × 1792px</td><td style="text-align:left">1792px × 828px</td></tr><tr><td style="text-align:left">iPhone X</td><td style="text-align:left">1125px × 2436px</td><td style="text-align:left">2436px × 1125px</td></tr><tr><td style="text-align:left">iPhone 8 Plus</td><td style="text-align:left">1242px × 2208px</td><td style="text-align:left">2208px × 1242px</td></tr><tr><td style="text-align:left">iPhone 8</td><td style="text-align:left">750px × 1334px</td><td style="text-align:left">1334px × 750px</td></tr><tr><td style="text-align:left">iPhone 7 Plus</td><td style="text-align:left">1242px × 2208px</td><td style="text-align:left">2208px × 1242px</td></tr><tr><td style="text-align:left">iPhone 7</td><td style="text-align:left">750px × 1334px</td><td style="text-align:left">1334px × 750px</td></tr><tr><td style="text-align:left">iPhone 6s Plus</td><td style="text-align:left">1242px × 2208px</td><td style="text-align:left">2208px × 1242px</td></tr><tr><td style="text-align:left">iPhone 6s</td><td style="text-align:left">750px × 1334px</td><td style="text-align:left">1334px × 750px</td></tr><tr><td style="text-align:left">iPhone SE</td><td style="text-align:left">640px × 1136px</td><td style="text-align:left">1136px × 640px</td></tr></tbody></table><h3 id="图像大小与分辨率"><a href="#图像大小与分辨率" class="headerlink" title="图像大小与分辨率"></a>图像大小与分辨率</h3><table><thead><tr><th style="text-align:left">Device</th><th style="text-align:left">Scale Factor</th></tr></thead><tbody><tr><td style="text-align:left">12.9” iPad Pro</td><td style="text-align:left">@2x</td></tr><tr><td style="text-align:left">10.5” iPad Pro</td><td style="text-align:left">@2x</td></tr><tr><td style="text-align:left">9.7” iPad</td><td style="text-align:left">@2x</td></tr><tr><td style="text-align:left">7.9” iPad mini 4</td><td style="text-align:left">@2x</td></tr><tr><td style="text-align:left">iPhone XS Max</td><td style="text-align:left">@3x</td></tr><tr><td style="text-align:left">iPhone XS</td><td style="text-align:left">@3x</td></tr><tr><td style="text-align:left">iPhone XR</td><td style="text-align:left">@2x</td></tr><tr><td style="text-align:left">iPhone X</td><td style="text-align:left">@3x</td></tr><tr><td style="text-align:left">iPhone 8 Plus</td><td style="text-align:left">@3x</td></tr><tr><td style="text-align:left">iPhone 8</td><td style="text-align:left">@2x</td></tr><tr><td style="text-align:left">iPhone 7s Plus</td><td style="text-align:left">@3x</td></tr><tr><td style="text-align:left">iPhone 7s</td><td style="text-align:left">@2x</td></tr><tr><td style="text-align:left">iPhone 7</td><td style="text-align:left">@2x</td></tr><tr><td style="text-align:left">iPhone 6s Plus</td><td style="text-align:left">@3x</td></tr><tr><td style="text-align:left">iPhone 6s</td><td style="text-align:left">@2x</td></tr><tr><td style="text-align:left">iPhone SE</td><td style="text-align:left">@2x</td></tr></tbody></table><h3 id="App-Icon-Sizes"><a href="#App-Icon-Sizes" class="headerlink" title="App Icon Sizes"></a>App Icon Sizes</h3><table><thead><tr><th style="text-align:left">Device or context</th><th style="text-align:left">Icon size</th></tr></thead><tbody><tr><td style="text-align:left">iPhone</td><td style="text-align:left">180px × 180px (60pt × 60pt @3x)</td></tr><tr><td style="text-align:left"></td><td style="text-align:left">120px × 120px (60pt × 60pt @2x)</td></tr><tr><td style="text-align:left">iPad Pro</td><td style="text-align:left">167px × 167px (83.5pt × 83.5pt @2x)</td></tr><tr><td style="text-align:left">iPad, iPad mini</td><td style="text-align:left">152px × 152px (76pt × 76pt @2x)</td></tr><tr><td style="text-align:left">App Store</td><td style="text-align:left">1024px × 1024px (1024pt × 1024pt @1x)</td></tr></tbody></table><ul><li><p>Spotlight<br>|Device|Spotlight icon size|<br>|:—|:—|<br>|iPhone|120px × 120px (40pt × 40pt @3x)|<br>||80px × 80px (40pt × 40pt @2x)|<br>|iPad Pro, iPad, iPad mini|    80px × 80px (40pt × 40pt @2x)|</p></li><li><p>Settings<br>|Device|Settings icon size|<br>|:—|:—|<br>|iPhone|    87px × 87px (29pt × 29pt @3x)|<br>||58px × 58px (29pt × 29pt @2x)|<br>|iPad Pro, iPad, iPad mini|    58px × 58px (29pt × 29pt @2x)|</p></li><li><p>Notification<br>|Device|Notification icon size|<br>|:—|:—|<br>|iPhone|    60px × 60px (20pt × 20pt @3x)|<br>||40px × 40px (20pt × 20pt @2x)|<br>|iPad Pro, iPad, iPad mini|40px × 40px (20pt × 20pt @2x)|</p></li></ul><h3 id="Launch-Screen"><a href="#Launch-Screen" class="headerlink" title="Launch Screen"></a>Launch Screen</h3><table><thead><tr><th style="text-align:left">Device</th><th style="text-align:left">Portrait size</th><th style="text-align:left">Landscape size</th></tr></thead><tbody><tr><td style="text-align:left">12.9” iPad Pro</td><td style="text-align:left">2048px × 2732px</td><td style="text-align:left">2732px × 2048px</td></tr><tr><td style="text-align:left">10.5” iPad Pro</td><td style="text-align:left">1668px × 2224px</td><td style="text-align:left">2224px × 1668px</td></tr><tr><td style="text-align:left">9.7” iPad</td><td style="text-align:left">1536px × 2048px</td><td style="text-align:left">2048px × 1536px</td></tr><tr><td style="text-align:left">7.9” iPad mini 4</td><td style="text-align:left">1536px × 2048px</td><td style="text-align:left">2048px × 1536px</td></tr><tr><td style="text-align:left">iPhone XS Max</td><td style="text-align:left">1242px × 2688px</td><td style="text-align:left">2688px × 1242px</td></tr><tr><td style="text-align:left">iPhone XS</td><td style="text-align:left">1125px × 2436px</td><td style="text-align:left">2436px × 1125px</td></tr><tr><td style="text-align:left">iPhone XR</td><td style="text-align:left">828px × 1792px</td><td style="text-align:left">1792px × 828px</td></tr><tr><td style="text-align:left">iPhone X</td><td style="text-align:left">1125px × 2436px</td><td style="text-align:left">2436px × 1125px</td></tr><tr><td style="text-align:left">iPhone 8 Plus</td><td style="text-align:left">1242px × 2208px</td><td style="text-align:left">2208px × 1242px</td></tr><tr><td style="text-align:left">iPhone 8</td><td style="text-align:left">750px × 1334px</td><td style="text-align:left">1334px × 750px</td></tr><tr><td style="text-align:left">iPhone 7 Plus</td><td style="text-align:left">1242px × 2208px</td><td style="text-align:left">2208px × 1242px</td></tr><tr><td style="text-align:left">iPhone 7</td><td style="text-align:left">750px × 1334px</td><td style="text-align:left">1334px × 750px</td></tr><tr><td style="text-align:left">iPhone 6s Plus</td><td style="text-align:left">1242px × 2208px</td><td style="text-align:left">2208px × 1242px</td></tr><tr><td style="text-align:left">iPhone 6s</td><td style="text-align:left">750px × 1334px</td><td style="text-align:left">1334px × 750px</td></tr><tr><td style="text-align:left">iPhone SE</td><td style="text-align:left">640px × 1136px</td><td style="text-align:left">1136px × 640px</td></tr></tbody></table><h3 id="Navigation-Bar-and-Toolbar-Icon-Size（导航栏与工具条）"><a href="#Navigation-Bar-and-Toolbar-Icon-Size（导航栏与工具条）" class="headerlink" title="Navigation Bar and Toolbar Icon Size（导航栏与工具条）"></a>Navigation Bar and Toolbar Icon Size（导航栏与工具条）</h3><table><thead><tr><th style="text-align:left">Target sizes（标准大小）</th><th style="text-align:left">Maximum sizes（最大尺寸）</th></tr></thead><tbody><tr><td style="text-align:left">72px × 72px (24pt × 24pt @3x)</td><td style="text-align:left">84px × 84px (28pt × 28pt @3x)</td></tr><tr><td style="text-align:left">48px × 48px (24pt × 24pt @2x)</td><td style="text-align:left">56px × 56px (28pt × 28pt @2x)</td></tr></tbody></table><h3 id="Tab-Bar-Icon-Size（标签栏图标大小）"><a href="#Tab-Bar-Icon-Size（标签栏图标大小）" class="headerlink" title="Tab Bar Icon Size（标签栏图标大小）"></a>Tab Bar Icon Size（标签栏图标大小）</h3><p><img src="https://ws3.sinaimg.cn/large/0069RVTdly1fv8cfny8vnj30nq0763ys.jpg" alt=""><br>|Attribute（属性）|Regular tab bars（常规标签栏）|Compact tab bars（紧凑标签栏）|<br>|:—|:—|:—|<br>|Target width and height (circular glyphs)|75px × 75px (25pt × 25pt @3x)|    54px × 54px (18pt × 18pt @3x)|<br>||    50px × 50px (25pt × 25pt @2x)|36px × 36px (18pt × 18pt @2x)|<br>|Target width and height (square glyphs)|69px × 69px (23pt × 23pt @3x)|    51px × 51px (17pt × 17pt @3x)|<br>||46px × 46px (23pt × 23pt @2x)|34px × 34px (17pt × 17pt @2x)|<br>|Target width (wide glyphs)|93px (31pt @3x)|69px (23pt @3x)|<br>||62px (31pt @2x)|    46px (23pt @2x)|<br>|Target height (tall glyphs)|    84px (28pt @3x)|60px (20pt @3x)|<br>||56px (28pt @2x)|40px (20pt @2x)|</p><h3 id="工具推荐"><a href="#工具推荐" class="headerlink" title="工具推荐"></a>工具推荐</h3><p>这篇文章主要记录了自己平时用的比较多的一些设计尺寸参考，设计细节上的东西还是要去查看官方文档，最后也为推荐一款<strong>App Icon</strong>自动生成工具吧，只需要一张1024*1024的原图，就可以生成不同设备及尺寸的图标，同时也完全符合苹果设计规范（超👍哦），下面贴出网站地址：<br><a href="https://icon.wuruihong.com/" target="_blank" rel="noopener">图标工厂</a></p>]]></content>
    
    <summary type="html">
    
      这篇文章收录了最新iPhone设备尺寸，主要是为了自己方便自己查阅苹果设备尺寸，图标尺寸等，苹果官方有Human Interface Guidelines文档，感兴趣的朋友可以自行查阅。
    
    </summary>
    
      <category term="UI设计" scheme="http://blogwenbo.com/categories/UI%E8%AE%BE%E8%AE%A1/"/>
    
    
      <category term="iOS" scheme="http://blogwenbo.com/tags/iOS/"/>
    
      <category term="UI设计" scheme="http://blogwenbo.com/tags/UI%E8%AE%BE%E8%AE%A1/"/>
    
  </entry>
  
  <entry>
    <title>WBLoadingIndicatorView（加载等待动画）</title>
    <link href="http://blogwenbo.com/2018/09/11/WBLoadingIndicatorView%EF%BC%88%E5%8A%A0%E8%BD%BD%E7%AD%89%E5%BE%85%E5%8A%A8%E7%94%BB%EF%BC%89/"/>
    <id>http://blogwenbo.com/2018/09/11/WBLoadingIndicatorView（加载等待动画）/</id>
    <published>2018-09-11T14:27:00.000Z</published>
    <updated>2020-03-30T14:09:57.144Z</updated>
    
    <content type="html"><![CDATA[<p class="description"></p><a id="more"></a><h3 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h3><blockquote><p>关于加载提示框架，比较成熟的有<a href="https://github.com/jdg/MBProgressHUD" target="_blank" rel="noopener">MBProgressHUD</a>，<a href="https://github.com/SVProgressHUD/SVProgressHUD" target="_blank" rel="noopener">SVProgressHUD</a>等著名框架，如果没有太多的自定义要求，这些框架提供的API其实已经够用了，基于提供的API，我们也可以自定义一些UI效果。最近项目也不是很忙，于是自己就尝试封装一个加载等待动画组件，封装思想主要参考了MBProgressHUD，在实现过程中，布局采用的是苹果原生Autolayout，没有用Masonry，所以写起来比较的恶心，约束写的老长老长了。其实封装的这个组件功能也不算太多，现在主要实现了五六个加载动画效果，也提供了一些属性设置自定义效果，如果有时间我会优化添加更多动画效果。</p></blockquote><h3 id="二、介绍与使用"><a href="#二、介绍与使用" class="headerlink" title="二、介绍与使用"></a>二、介绍与使用</h3><ul><li><p>一些属性API。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">// MARK:Property</span><br><span class="line">/*  &lt; 动画容器视图 &gt; */</span><br><span class="line">@property (nonatomic, strong) WBLoadingBackgroundView *bezelView;</span><br><span class="line">/*  &lt; 背景视图 &gt; */</span><br><span class="line">@property (nonatomic, strong) WBLoadingBackgroundView *backgroundView;</span><br><span class="line">/** &lt; Loading text. &gt; */</span><br><span class="line">@property (nonatomic, strong) UILabel *label;</span><br><span class="line"></span><br><span class="line">@property (nonatomic, strong) UIColor *contentColor UI_APPEARANCE_SELECTOR;</span><br><span class="line">/*  &lt; 加载动画颜色 &gt; */</span><br><span class="line">@property (nonatomic, strong) UIColor *indicatorColor UI_APPEARANCE_SELECTOR;</span><br><span class="line">/*  &lt; bezelView中心点偏移 &gt; */</span><br><span class="line">@property (nonatomic, assign) CGPoint offset UI_APPEARANCE_SELECTOR;</span><br><span class="line">/*  &lt; 边距 默认：20 &gt; */</span><br><span class="line">@property (nonatomic, assign) CGFloat margin UI_APPEARANCE_SELECTOR;</span><br><span class="line">/*  &lt; bezelView最小size &gt; */</span><br><span class="line">@property (nonatomic, assign) CGSize minSize UI_APPEARANCE_SELECTOR;</span><br><span class="line">/** &lt; 加载动画size 默认：35 &gt; */</span><br><span class="line">@property (nonatomic, assign) CGSize indicatorSize UI_APPEARANCE_SELECTOR;</span><br><span class="line">/** &lt; 是否方形 &gt; */</span><br><span class="line">@property (nonatomic, assign) BOOL square UI_APPEARANCE_SELECTOR;</span><br><span class="line">/** &lt; 隐藏时从父视图移除 默认：YES &gt; */</span><br><span class="line">@property (nonatomic, assign) BOOL removeFromSuperViewOnHide;</span><br><span class="line">/*  &lt; 动画类型 &gt; */</span><br><span class="line">@property (nonatomic, assign) WBLoadingAnimationType type;</span><br><span class="line"></span><br><span class="line">// MARK:Class Methods</span><br><span class="line">/**</span><br><span class="line"> 获取视图中的WBLoadingIndicatorView</span><br><span class="line"></span><br><span class="line"> @param view 遍历的父视图</span><br><span class="line"> @return WBLoadingIndicatorView</span><br><span class="line"> */</span><br><span class="line">+ (nullable WBLoadingIndicatorView *)wb_indicatorForView:(UIView *)view;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> 创建并显示加载视图</span><br><span class="line"></span><br><span class="line"> @param view 要显示的view</span><br><span class="line"> @return MBProgressHUD</span><br><span class="line"> */</span><br><span class="line">+ (instancetype)wb_showIndicatorAddTo:(UIView *)view;</span><br><span class="line"></span><br><span class="line">// MARK:Instance Class Method</span><br><span class="line">- (instancetype)initWithView:(UIView *)view;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> 显示加载视图</span><br><span class="line"> */</span><br><span class="line">- (void)wb_showLoadingView:(BOOL)animated;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> 隐藏加载视图</span><br><span class="line"></span><br><span class="line"> @param animated 是否动画</span><br><span class="line"> */</span><br><span class="line">- (void)wb_hideLoadingView:(BOOL)animated;</span><br></pre></td></tr></table></figure></li><li><p>部分效果<br><img src="https://ws2.sinaimg.cn/large/0069RVTdly1fv5vfzum5xg308p0i2aak.gif" alt=""><br><img src="https://ws4.sinaimg.cn/large/0069RVTdly1fv5vhwysnfg308p0i2dgd.gif" alt=""><br><img src="https://ws4.sinaimg.cn/large/0069RVTdly1fv5vw05y8cg308p0i2wf5.gif" alt=""><br><img src="https://ws1.sinaimg.cn/large/0069RVTdly1fv5vwliqtyg308p0i276d.gif" alt=""></p></li><li>使用示例<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">WBLoadingIndicatorView *indicatorView = [self createIndicatorViewWithType:WBWBLoadingAnimationBallTrianglePathType</span><br><span class="line">                                                                        indicatorSize:CGSizeMake(50, 50)</span><br><span class="line">                                                                               toView:self.view];</span><br><span class="line">            indicatorView.type = WBLoadingAnimationcircleStrokeSpinType;</span><br><span class="line">            indicatorView.backgroundView.backgroundColor = [UIColor colorWithWhite:0.f alpha:0.3];</span><br><span class="line">            indicatorView.contentColor = [UIColor whiteColor];</span><br><span class="line">            indicatorView.bezelView.backgroundColor = [UIColor colorWithWhite:0.f alpha:0.7f];</span><br></pre></td></tr></table></figure></li></ul><p>关于使用，建议还是二次封装吧，每次调用都写这么多代码，还是有点长。关于更多还是查看我的GitHub，下面也贴出GitHub地址。</p><h3 id="三、GitHub地址"><a href="#三、GitHub地址" class="headerlink" title="三、GitHub地址"></a>三、GitHub地址</h3><p>如果觉得可以，请star鼓励一下哦，如果有任何建议或问题，欢迎指出，我也会第一时间修改。<br><a href="https://github.com/wenmobo/WBLoadingIndicatorView" target="_blank" rel="noopener">WBLoadingIndicatorView</a></p>]]></content>
    
    <summary type="html">
    
      关于加载提示框架，比较成熟的有[MBProgressHUD](https://github.com/jdg/MBProgressHUD)，[SVProgressHUD](https://github.com/SVProgressHUD/SVProgressHUD)等著名框架，如果没有太多的自定义要求，这些框架提供的API其实已经够用了，基于提供的API，我们也可以自定义一些UI效果。最近项目也不是很忙，于是自己就尝试封装一个加载等待动画组件，封装思想主要参考了MBProgressHUD，在实现过程中，布局采用的是苹果原生Autolayout，没有用Masonry，所以写起来比较的恶心，约束写的老长老长了。其实封装的这个组件功能也不算太多，现在主要实现了五六个加载动画效果，也提供了一些属性设置自定义效果，如果有时间我会优化添加更多动画效果。
    
    </summary>
    
      <category term="iOS" scheme="http://blogwenbo.com/categories/iOS/"/>
    
    
      <category term="iOS" scheme="http://blogwenbo.com/tags/iOS/"/>
    
      <category term="CocoaPods" scheme="http://blogwenbo.com/tags/CocoaPods/"/>
    
      <category term="GitHub" scheme="http://blogwenbo.com/tags/GitHub/"/>
    
      <category term="Animation" scheme="http://blogwenbo.com/tags/Animation/"/>
    
  </entry>
  
  <entry>
    <title>CocoaPods进阶：制作公有库</title>
    <link href="http://blogwenbo.com/2018/09/03/CocoaPods%E8%BF%9B%E9%98%B6%EF%BC%9A%E5%88%B6%E4%BD%9C%E5%85%AC%E6%9C%89%E5%BA%93/"/>
    <id>http://blogwenbo.com/2018/09/03/CocoaPods进阶：制作公有库/</id>
    <published>2018-09-03T13:35:29.000Z</published>
    <updated>2020-03-30T14:09:57.142Z</updated>
    
    <content type="html"><![CDATA[<p class="description"></p><a id="more"></a><h3 id="一、-前言"><a href="#一、-前言" class="headerlink" title="一、 前言"></a>一、 前言</h3><p>在<a href="http://blogwenbo.com/2018/08/13/CocoaPods%E8%BF%9B%E9%98%B6%EF%BC%9A%E8%AF%A6%E8%A7%A3%E7%A7%81%E6%9C%89%E5%BA%93%E5%88%B6%E4%BD%9C/">CocoaPods进阶：详解私有库制作</a>这篇博客中，讲解记录了cocoapods使用<code>pod lib create [projectname]</code>命令模板化创建pod私有库，这篇博客主要讲解cocoapods制作共有库的过程。这里，我不在使用模板化方式创建，而是用原来在GitHub上已经提交过的项目（如果你舍不得获得的star，最好采用这种方式啦，😆）。自己也是参照博客资料，本来以为自己有了制作私有库的基础，制作共有库会没那么多的坑，但自己还是折腾了一晚上，好了，不多说了，开始讲解共有库的制作吧！</p><h3 id="二、目录"><a href="#二、目录" class="headerlink" title="二、目录"></a>二、目录</h3><blockquote><p>1、创建spec文件</p><p>2、编辑podspec文件</p><p>3、本地库验证</p><p>4、推送打标签</p><p>5、验证podspec文件</p><p>6、注册，推送podspec到cocoapods，搜索验证</p></blockquote><h3 id="三、具体步骤"><a href="#三、具体步骤" class="headerlink" title="三、具体步骤"></a>三、具体步骤</h3><p><strong>1、创建spec文件</strong><br>在<code>xxxx.xcodeproj</code>同级目录下，创建podspec文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pod spec create WBHUDManager</span><br></pre></td></tr></table></figure><p>创建成功之后如下：</p><p><img src="https://ws1.sinaimg.cn/large/0069RVTdly1fuwp01rvz4j30ei0e8q59.jpg" alt=""></p><p><strong>注意</strong>：</p><p>这里新创建的<strong>podspec</strong>最好要和<strong>LICENSE</strong>、<strong>README.md</strong>在同级目录，自己在这里也折腾了许久，头一次用非模板方式，也踩了不少的坑。这里一定要注意哦。</p><p><strong>2、编辑podspec文件**</strong></p><p>用终端或者记事本编辑podspec文件，下面是我配置<strong>WBHUDManager.podspec</strong>，这里我也不做详细的介绍了，在我讲解的私有库制作博客，有对每个属性的详细描述，在网上也能轻易的查阅到相关的资料。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">Pod::Spec.new <span class="keyword">do</span> <span class="params">|s|</span></span><br><span class="line">  s.name             = <span class="string">'WBHUDManager'</span></span><br><span class="line">  s.version          = <span class="string">'1.0.0'</span></span><br><span class="line">  s.summary          = <span class="string">'iOS 基于SVProgressHUD、MBProgressHUD提示框封装'</span></span><br><span class="line">  s.homepage         = <span class="string">'https://github.com/wenmobo/WBHUDManager'</span></span><br><span class="line">  s.license          = &#123; <span class="symbol">:type</span> =&gt; <span class="string">'MIT'</span>, <span class="symbol">:file</span> =&gt; <span class="string">'LICENSE'</span> &#125;</span><br><span class="line">  s.author           = &#123; <span class="string">'wenmobo'</span> =&gt; <span class="string">'wenmobo2018@gmail.com'</span> &#125;</span><br><span class="line">  s.source           = &#123; <span class="symbol">:git</span> =&gt; <span class="string">'https://github.com/wenmobo/WBHUDManager.git'</span>, <span class="symbol">:tag</span> =&gt; s.version.to_s &#125;</span><br><span class="line">  s.ios.deployment_target = <span class="string">'8.0'</span></span><br><span class="line">  s.requires_arc = <span class="literal">true</span></span><br><span class="line">  s.source_files =  <span class="string">'WBHUDManager/WBHUDManager.h'</span></span><br><span class="line">  s.frameworks = <span class="string">'UIKit'</span></span><br><span class="line">  </span><br><span class="line">  s.subspec <span class="string">'SVProgressHUDWBAddtional'</span> <span class="keyword">do</span> <span class="params">|ss|</span></span><br><span class="line">      ss.source_files = <span class="string">'WBHUDManager/SVProgressHUDWBAddtional/*.&#123;h,m&#125;'</span></span><br><span class="line">      ss.dependency <span class="string">'SVProgressHUD'</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  </span><br><span class="line">  s.subspec <span class="string">'MBProgressHUDWBAddtional'</span> <span class="keyword">do</span> <span class="params">|ss|</span></span><br><span class="line">      ss.source_files = <span class="string">'WBHUDManager/MBProgressHUDWBAddtional/*.&#123;h,m&#125;'</span></span><br><span class="line">      ss.resource = <span class="string">'WBHUDManager/MBProgressHUDWBAddtional/MBProgressHUD.bundle'</span></span><br><span class="line">      ss.dependency <span class="string">'MBProgressHUD'</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p><strong>3、本地库验证</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pod lib lint WBHUDManager.podspec</span><br></pre></td></tr></table></figure><p>如果有警告，需要根据提示内容解决警告，忽略警告</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pod lib lint WBHUDManager.podspec --allow-warnings</span><br></pre></td></tr></table></figure><p><strong>4、推送打标签</strong></p><p>由于这里我之前已经推送到远程了，所以只需要打标签就可了，注意要和WBHUDManager.podspec中version保持一致：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git tag -m &apos;release version 1.0.0&apos; 1.0.0</span><br><span class="line"></span><br><span class="line">git push origin 1.0.0 </span><br><span class="line">或者</span><br><span class="line">git push --tags</span><br></pre></td></tr></table></figure><p><strong>5、验证podspec文件</strong></p><p>推送标签之后，需对WBHUDManager.podspec进行验证</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pod spec lint WBHUDManager.podspec</span><br></pre></td></tr></table></figure><p><strong>6、注册，推送podspec到cocoapods，验证</strong></p><p>验证通过之后，需要使用邮箱注册cocoapods，终端输入：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">pod trunk register [email] ‘用户名’ --description=&apos;MacBook Pro&apos;</span><br><span class="line"></span><br><span class="line">example</span><br><span class="line">pod trunk register 123@qq.com &apos;wenbo&apos; --description=&apos;MacBook Pro&apos;</span><br></pre></td></tr></table></figure><p>之后会给你发送一条邮箱，进行确认，这里的-<strong>-description=’MacBook Pro’</strong>可以省略</p><p>查看个人信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pod trunk me</span><br></pre></td></tr></table></figure><p><img src="https://ws3.sinaimg.cn/large/0069RVTdly1fuwpleoxwyj30vk074wfw.jpg" alt=""></p><p>推送podspec到<strong>cocoapods</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pod trunk push WBHUDManager.podspec</span><br></pre></td></tr></table></figure><p>推送成功之后，终端输出如下</p><p><img src="https://ws1.sinaimg.cn/large/0069RVTdly1fuwpojsca1j30v60mcq70.jpg" alt=""></p><p>之后我们可以搜索验证</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pod search WBHUDManager</span><br></pre></td></tr></table></figure><p><img src="https://ws1.sinaimg.cn/large/0069RVTdly1fuwpq0w8uvj30vq0awtau.jpg" alt=""></p><p>哈哈，已经发布成功啦，是不是很开心啦☺️。</p><h3 id="四、问题解决"><a href="#四、问题解决" class="headerlink" title="四、问题解决"></a>四、问题解决</h3><ul><li><p>发布成功之后搜索不到</p></li><li><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">//删除本地索引</span><br><span class="line">rm ~/Library/Caches/CocoaPods/search_index.json</span><br><span class="line"></span><br><span class="line">//搜索</span><br><span class="line">pod search [库名]</span><br><span class="line"></span><br><span class="line">//更新索引</span><br><span class="line">pod repo update</span><br></pre></td></tr></table></figure></li></ul><h3 id="五、打广告"><a href="#五、打广告" class="headerlink" title="五、打广告"></a>五、打广告</h3><blockquote><p>哈哈，最后也为自己打波广告吧，这篇博客使用的例子是自己基于<a href="https://github.com/jdg/MBProgressHUD" target="_blank" rel="noopener">MBProgressHUD</a>、<a href="https://github.com/SVProgressHUD/SVProgressHUD" target="_blank" rel="noopener">SVProgressHUD</a>封装的一个提示框架，支持超多自定义属性设置，HUD的状态切换，显示完成回调，这也是我发布的第一个公有库，如果有写的不好的地方，请多多包涵。喜欢的朋友记得<strong>star</strong>鼓励下哟，最后贴出GitHub地址吧：</p></blockquote><p><a href="https://github.com/wenmobo/WBHUDManager" target="_blank" rel="noopener">WBHUDManager</a></p>]]></content>
    
    <summary type="html">
    
      在CocoaPods进阶：详解私有库制作这篇博客中，讲解记录了cocoapods使用pod lib create [projectname]命令模板化创建pod私有库，这篇博客主要讲解cocoapods制作共有库的过程。这里，我不在使用模板化方式创建，而是用原来在GitHub上已经提交过的项目（如果你舍不得获得的star，最好采用这种方式啦，😆）。自己也是参照博客资料，本来以为自己有了制作私有库的基础，制作共有库会没那么多的坑，但自己还是折腾了一晚上，好了，不多说了，开始讲解共有库的制作吧！
    
    </summary>
    
      <category term="iOS" scheme="http://blogwenbo.com/categories/iOS/"/>
    
    
      <category term="iOS" scheme="http://blogwenbo.com/tags/iOS/"/>
    
      <category term="CocoaPods" scheme="http://blogwenbo.com/tags/CocoaPods/"/>
    
      <category term="GitHub" scheme="http://blogwenbo.com/tags/GitHub/"/>
    
      <category term="MBProgressHUD" scheme="http://blogwenbo.com/tags/MBProgressHUD/"/>
    
      <category term="SVProgressHUD" scheme="http://blogwenbo.com/tags/SVProgressHUD/"/>
    
  </entry>
  
  <entry>
    <title>WKWebView高度自适应三种方式</title>
    <link href="http://blogwenbo.com/2018/08/27/WKWebView%E9%AB%98%E5%BA%A6%E8%87%AA%E9%80%82%E5%BA%94%E4%B8%89%E7%A7%8D%E6%96%B9%E5%BC%8F/"/>
    <id>http://blogwenbo.com/2018/08/27/WKWebView高度自适应三种方式/</id>
    <published>2018-08-27T14:27:00.000Z</published>
    <updated>2020-03-30T14:09:57.144Z</updated>
    
    <content type="html"><![CDATA[<p class="description"></p><a id="more"></a><h3 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h3><blockquote><p>Important<br>Starting in iOS 8.0 and OS X 10.10, use WKWebView to add web content to your app. Do not use UIWebView or WebView.</p></blockquote><p><strong>WKWebVIew</strong>是iOS8新出的API，旨在替代原有的<strong>UIWebView</strong>，相对于<strong>UIWebView</strong>，<strong>WKWebView</strong>有着更为强大性能和丰富的API。在项目开发过程中，我也更倾向于用<strong>WKWebView</strong>,但在使用过程中也遇到许多的问题。</p><p>最近接触使用网页视图比较多，自己在tableView和scrollView中嵌套网页视图，在获取网页视图高度遇到过不少的坑，例如高度不准确、底部留白断层，滚动一直获取高度问题。现在项目中使用的网页视图基本都替换成了<strong>WKWebView</strong>，关于<strong>WKWebView</strong>使用的一些坑，我强烈推荐一篇博客<a href="https://mp.weixin.qq.com/s/rhYKLIbXOsUJC_n6dt9UfA" target="_blank" rel="noopener">WKWebView 那些坑</a>，希望使用<strong>WKWebView</strong>能少走一些弯路，少踩一些坑。好了，话不多说了，我将项目中获取网页视图高度实际经验分享给大家，希望对你有所帮助，下面开始介绍吧！</p><h3 id="二、目录"><a href="#二、目录" class="headerlink" title="二、目录"></a>二、目录</h3><ul><li>通过KVO的方式</li><li>通过代理的方式</li><li>通过注入JS的方式，添加网页加载完成回调获取</li></ul><h4 id="通过KVO的方式"><a href="#通过KVO的方式" class="headerlink" title="通过KVO的方式"></a>通过KVO的方式</h4><p>这种方式获取的高度较为准确，但要注意表格中多次回调高度的问题。</p><ul><li><p>添加监听者</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#pragma mark ------ &lt; Private Method &gt; ------</span><br><span class="line">#pragma mark</span><br><span class="line">- (void)addWebViewObserver &#123;</span><br><span class="line">    [self.wkWebView.scrollView addObserver:self forKeyPath:@&quot;contentSize&quot; options:NSKeyValueObservingOptionNew context:nil];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>监听高度变化</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">#pragma mark ------ &lt; KVO &gt; ------</span><br><span class="line">- (void)observeValueForKeyPath:(NSString *)keyPath ofObject:(id)object change:(NSDictionary&lt;NSKeyValueChangeKey,id&gt; *)change context:(void *)context &#123;</span><br><span class="line">    /**  &lt; 法2 &gt;  */</span><br><span class="line">    /**  &lt; loading：防止滚动一直刷新，出现闪屏 &gt;  */</span><br><span class="line">    if ([keyPath isEqualToString:@&quot;contentSize&quot;]) &#123;</span><br><span class="line">        CGRect webFrame = self.wkWebView.frame;</span><br><span class="line">        webFrame.size.height = self.wkWebView.scrollView.contentSize.height;</span><br><span class="line">        self.wkWebView.frame = webFrame;</span><br><span class="line">        [self.tableView reloadRowsAtIndexPaths:[NSArray arrayWithObjects:[NSIndexPath indexPathForRow:3 inSection:0], nil] withRowAnimation:UITableViewRowAnimationNone];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>移除观察者</p></li><li><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">- (void)removeWebViewObserver &#123;</span><br><span class="line">    [self.wkWebView.scrollView removeObserver:self forKeyPath:@&quot;contentSize&quot;];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="通过代理的方式"><a href="#通过代理的方式" class="headerlink" title="通过代理的方式"></a>通过代理的方式</h4><p>这种方法通过<strong>WKNavigationDelegate</strong>代理方法<code>- (void)webView:(WKWebView *)webView didFinishNavigation:(WKNavigation *)navigation</code>，网页加载完成通过JS获取网页内容高度，但这种方式不一定就是最真实的高度，这时候可能网页内容还未加载完成，但以实际情况为准。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">/**  &lt; 法2 &gt;  */</span><br><span class="line">- (void)webView:(WKWebView *)webView didFinishNavigation:(WKNavigation *)navigation &#123;</span><br><span class="line">    //document.body.offsetHeight</span><br><span class="line">    //document.body.scrollHeight</span><br><span class="line">    //document.body.clientHeight</span><br><span class="line">    [webView evaluateJavaScript:@&quot;document.body.offsetHeight&quot; completionHandler:^(id _Nullable result, NSError * _Nullable error) &#123;</span><br><span class="line">       CGFloat documentHeight = [result doubleValue];</span><br><span class="line">        CGRect webFrame = webView.frame;</span><br><span class="line">        webFrame.size.height = documentHeight;</span><br><span class="line">        webView.frame = webFrame;</span><br><span class="line">        [self.tableView reloadRowsAtIndexPaths:[NSArray arrayWithObjects:[NSIndexPath indexPathForRow:3 inSection:0], nil] withRowAnimation:UITableViewRowAnimationNone];</span><br><span class="line">    &#125;];</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">//    CGRect webFrame = self.wkWebView.frame;</span><br><span class="line">//    CGFloat contentHeight = webView.scrollView.contentSize.height;</span><br><span class="line">//    webFrame.size.height = contentHeight;</span><br><span class="line">//    webView.frame = webFrame;</span><br><span class="line">//    [self.tableView reloadRowsAtIndexPaths:[NSArray arrayWithObjects:[NSIndexPath indexPathForRow:3 inSection:0], nil] withRowAnimation:UITableViewRowAnimationNone];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="通过注入JS的方式，添加网页加载完成回调获取"><a href="#通过注入JS的方式，添加网页加载完成回调获取" class="headerlink" title="通过注入JS的方式，添加网页加载完成回调获取"></a>通过注入JS的方式，添加网页加载完成回调获取</h4><p>第三种通常是接口返回<strong>HTMLString</strong>，然后自己在APP客户端成网页html、head、body这些标签，在合适的位置加入以下js代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=\<span class="string">"text/javascript\"&gt;\</span></span><br><span class="line"><span class="string">        window.onload = function() &#123;\</span></span><br><span class="line"><span class="string">        window.location.href = \"ready://\" + document.body.scrollHeight;\</span></span><br><span class="line"><span class="string">        &#125;\</span></span><br><span class="line"><span class="string"> &lt;/script&gt;</span></span><br></pre></td></tr></table></figure><p>然后借助WKWebView代理方法，就能准确获得网页高度：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">- (void)webView:(WKWebView *)webView decidePolicyForNavigationAction:(WKNavigationAction *)navigationAction decisionHandler:(void (^)(WKNavigationActionPolicy))decisionHandler &#123;</span><br><span class="line">    if (navigationAction.navigationType == WKNavigationTypeOther) &#123;</span><br><span class="line">        if ([[[navigationAction.request URL] scheme] isEqualToString:@&quot;ready&quot;]) &#123;</span><br><span class="line">            float contentHeight = [[[navigationAction.request URL] host] floatValue];</span><br><span class="line">            CGRect webFrame = self.wkWebView.frame;</span><br><span class="line">            webFrame.size.height = contentHeight;</span><br><span class="line">            webView.frame = webFrame;</span><br><span class="line">            </span><br><span class="line">            NSLog(@&quot;onload = %f&quot;,contentHeight);</span><br><span class="line">            </span><br><span class="line">            [self.tableView reloadRowsAtIndexPaths:[NSArray arrayWithObjects:[NSIndexPath indexPathForRow:3 inSection:0], nil] withRowAnimation:UITableViewRowAnimationNone];</span><br><span class="line">            </span><br><span class="line">            decisionHandler(WKNavigationActionPolicyCancel);</span><br><span class="line">            return;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    decisionHandler(WKNavigationActionPolicyAllow);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第三种方法在我写的demo中是看不到效果的，有兴趣的朋友可以自己拼接网页HTMLString测试效果。我也贴一个我在项目中添加以上代码片段的位置吧：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">\</span>"<span class="attr">utf-8</span>\"&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">\</span>"<span class="attr">viewport</span>\"<span class="attr">content</span>=<span class="string">\</span>"<span class="attr">width</span>=<span class="string">device-width,</span> <span class="attr">initial-scale</span>=<span class="string">1.0,</span> <span class="attr">minimum-scale</span>=<span class="string">1.0,</span> <span class="attr">maximum-scale</span>=<span class="string">1.0,</span> <span class="attr">user-scalable</span>=<span class="string">no\</span>"&gt;</span>\</span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">\</span>"<span class="attr">text</span>/<span class="attr">javascript</span>\"&gt;</span><span class="undefined">\</span></span><br><span class="line"><span class="javascript">     <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;\</span></span><br><span class="line"><span class="javascript">     <span class="built_in">window</span>.location.href = \<span class="string">"ready://\" + document.body.scrollHeight;\</span></span></span><br><span class="line"><span class="undefined">     &#125;\</span></span><br><span class="line"><span class="undefined">     </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">//接口返回网页内容，拼接在这里</span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="三、问题解决"><a href="#三、问题解决" class="headerlink" title="三、问题解决"></a>三、问题解决</h3><ul><li><p>解决web断层问题：<a href="https://www.jianshu.com/p/1d739e2e7ed2" target="_blank" rel="noopener">WKWebView刷新机制小探</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#pragma mark ------ &lt; UIScrollViewDeltegate &gt; ------</span><br><span class="line">- (void)scrollViewDidScroll:(UIScrollView *)scrollView &#123;</span><br><span class="line">    /**  &lt; 解决web白屏问题 &gt;  */</span><br><span class="line">    /**  &lt; 需要调用私有API：_updateVisibleContentRects &gt;  */</span><br><span class="line">    [self.wkWebView setNeedsLayout];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="四、demo"><a href="#四、demo" class="headerlink" title="四、demo"></a>四、demo</h3><p>最新demo请戳：<a href="https://github.com/wenmobo/WKWebViewAutoHeight" target="_blank" rel="noopener">WKWebViewAutoHeight</a></p><h3 id="五、参考资料"><a href="#五、参考资料" class="headerlink" title="五、参考资料"></a>五、参考资料</h3><ul><li><a href="http://www.skyfox.org/ios-webview-autofit-content-height.html" target="_blank" rel="noopener">ios webview自适应实际内容高度5种方法</a>     </li><li><a href="https://juejin.im/post/5a38c9055188254b8b3546bf" target="_blank" rel="noopener">iOS中webView嵌套tableView中动态高度问题</a></li><li><a href="https://www.jianshu.com/p/1d739e2e7ed2" target="_blank" rel="noopener">WKWebView刷新机制小探</a></li></ul>]]></content>
    
    <summary type="html">
    
      WKWebVIew是iOS8新出的API，旨在替代原有的UIWebView，相对于UIWebView，WKWebView有着更为强大性能和丰富的API。在项目开发过程中，我也更倾向于用WKWebView,但在使用过程中也遇到许多的问题。
    
    </summary>
    
      <category term="iOS" scheme="http://blogwenbo.com/categories/iOS/"/>
    
    
      <category term="iOS" scheme="http://blogwenbo.com/tags/iOS/"/>
    
      <category term="HTML" scheme="http://blogwenbo.com/tags/HTML/"/>
    
      <category term="JavaScript" scheme="http://blogwenbo.com/tags/JavaScript/"/>
    
      <category term="WKWebView" scheme="http://blogwenbo.com/tags/WKWebView/"/>
    
  </entry>
  
  <entry>
    <title>CocoaPods进阶：详解私有库制作</title>
    <link href="http://blogwenbo.com/2018/08/13/CocoaPods%E8%BF%9B%E9%98%B6%EF%BC%9A%E8%AF%A6%E8%A7%A3%E7%A7%81%E6%9C%89%E5%BA%93%E5%88%B6%E4%BD%9C/"/>
    <id>http://blogwenbo.com/2018/08/13/CocoaPods进阶：详解私有库制作/</id>
    <published>2018-08-13T13:58:51.000Z</published>
    <updated>2020-03-30T15:32:28.041Z</updated>
    
    <content type="html"><![CDATA[<p class="description"></p><a id="more"></a><h2 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h2><blockquote><p>自己一直想用CocoaPods制作pod库，在自己面试过程中也被面试官问到过组件化开发的概念，然尔自己那时也不是很了解，CocoaPods与组件化也息息相关，利用CocoaPods也便于维护pod组件，于是自己就决定学习用CocoaPods制作pod库，下面就开始讲解私有库的制作过程吧。</p></blockquote><h2 id="二、目录"><a href="#二、目录" class="headerlink" title="二、目录"></a>二、目录</h2><ul><li>安装CocoaPods</li><li>创建远程内部私有Spec Repo仓库</li><li>模板创建pod库</li><li>编辑***.podspec文件</li><li>验证本地是否通过</li><li>关联本地仓库，并推送到远程仓库，打标签</li><li>推送***.podspec到远程spec仓库</li><li>验证远程是否通过</li><li>验证私有仓库是否可用，pod集成私有库</li></ul><h3 id="安装CocoaPods"><a href="#安装CocoaPods" class="headerlink" title="安装CocoaPods"></a>安装CocoaPods</h3><p>首先要安装CocoaPods，没有安装可以参考我的博客<a href="https://www.jianshu.com/p/f218fe3baff8" target="_blank" rel="noopener">CocoaPods安装与使用</a>。</p><h4 id="创建远程内部私有Spec-Repo仓库"><a href="#创建远程内部私有Spec-Repo仓库" class="headerlink" title="创建远程内部私有Spec Repo仓库"></a>创建远程内部私有Spec Repo仓库</h4><p>这步自己采坑不少，一开始自己并不理解，不知到代码仓库和Spec Repo是需要分开存储的。好了，不说自己经历的曲折了，如果你还没有创建远程内部私有Spec Repo仓库, 需要到<a href="https://github.com/" target="_blank" rel="noopener">Github</a>,<a href="http://git.oschina.net/" target="_blank" rel="noopener">码云</a>或其他代码托管平台创建远程仓库, 之后将远程仓库克隆到本地，终端执行如下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//这里可以用https或ssh地址方式克隆</span><br><span class="line">pod repo add WBSpecs git@github.com:wenmobo/WBSpecs.git</span><br></pre></td></tr></table></figure><p>克隆之后，本地cocoapods目录如下：</p><p><img src="https://ws4.sinaimg.cn/large/0069RVTdly1fuaqlqavaij31js054dhh.jpg" alt=""></p><h4 id="模板创建pod库"><a href="#模板创建pod库" class="headerlink" title="模板创建pod库"></a>模板创建pod库</h4><ul><li><p><strong>第二步</strong>：在本地任意一个文件夹下创建pod库：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pod lib create WBAvoidCrash</span><br></pre></td></tr></table></figure><p>之后控制台输出</p><p><img src="https://ws2.sinaimg.cn/large/006tNbRwly1fu8fsp6s32j30vo05kmya.jpg" alt=""></p><p>接着会需要回答一些问题：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 你想使用哪个平台？</span></span><br><span class="line"><span class="number">1</span>、What platform <span class="keyword">do</span> you want to use?? [ iOS / macOS ]</span><br><span class="line">iOS</span><br><span class="line"><span class="comment"># 库语言选择？</span></span><br><span class="line"><span class="number">2</span>、What language <span class="keyword">do</span> you want to use?? [ Swift / ObjC ]</span><br><span class="line">ObjC</span><br><span class="line"><span class="comment"># 你要使用哪个测试框架？</span></span><br><span class="line"><span class="number">3</span>、Which testing frameworks will you use? [ Specta / Kiwi / None ]</span><br><span class="line">None</span><br><span class="line"><span class="comment"># 是否要UI测试？</span></span><br><span class="line"><span class="number">4</span>、Would you like to <span class="keyword">do</span> view based testing? [ Yes / No ]</span><br><span class="line">NO</span><br><span class="line"><span class="comment"># 类名前缀？</span></span><br><span class="line"><span class="number">5</span>、What is your <span class="class"><span class="keyword">class</span> <span class="title">prefix?</span></span></span><br><span class="line">WB</span><br></pre></td></tr></table></figure><p>成功之后，目录如下：</p><p><img src="https://ws3.sinaimg.cn/large/006tNbRwly1fu8g2rfjkhj30m00cm768.jpg" alt=""></p><p>工程目录如下：</p><p><img src="https://ws3.sinaimg.cn/large/006tNbRwly1fu8g5h5i4ej31js13c4gs.jpg" alt=""></p></li><li><p>在工程<strong>WBAvoidCrash</strong>目录添加我们的代码文件：</p><p><img src="https://ws4.sinaimg.cn/large/006tNbRwly1fu8gebt4mpj30f00bgwg2.jpg" alt=""></p><p>添加完成之后如下：</p><p><img src="https://ws1.sinaimg.cn/large/006tNbRwly1fu8ghg3iwbj30eg0v0100.jpg" alt=""></p><p><strong>注意</strong>：代码文件需要添加到<strong>WBAvoidCrash/Classes</strong>目录下。</p></li></ul><h4 id="编辑-podspec文件"><a href="#编辑-podspec文件" class="headerlink" title="编辑***.podspec文件"></a>编辑***.podspec文件</h4><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line">Pod::Spec.new <span class="keyword">do</span> <span class="params">|s|</span></span><br><span class="line">  <span class="comment">#库名称</span></span><br><span class="line">  s.name             = <span class="string">'WBAvoidCrash'</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">#指定支持的平台和版本，不写则默认支持所有的平台，如果支持多个平台，则使用下面的deployment_target定义</span></span><br><span class="line">  spec.platform = <span class="symbol">:ios</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">#版本号</span></span><br><span class="line">  s.version          = <span class="string">'1.0.0'</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">#库简短介绍</span></span><br><span class="line">  s.summary          = <span class="string">'iOS 防Crash库'</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">#开源库描述 </span></span><br><span class="line">  s.description      = <span class="string">""</span></span><br><span class="line">                       </span><br><span class="line">  <span class="comment"># 开源库地址，或者是博客、社交地址等</span></span><br><span class="line">  s.homepage         = <span class="string">'https://github.com/wenmobo/WBAvoidCrash'</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment"># 开源协议</span></span><br><span class="line">  s.license          = &#123; <span class="symbol">:type</span> =&gt; <span class="string">'MIT'</span>, <span class="symbol">:file</span> =&gt; <span class="string">'LICENSE'</span> &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment"># 开源库作者</span></span><br><span class="line">  s.author           = &#123; <span class="string">'wenmobo'</span> =&gt; <span class="string">'wenmobo2018@gmail.com'</span> &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment"># 开源库GitHub的路径与tag值，GitHub路径后必须有.git,tag实际就是上面的版本</span></span><br><span class="line">  s.source           = &#123; <span class="symbol">:git</span> =&gt; <span class="string">'https://github.com/wenmobo/WBAvoidCrash.git'</span>, <span class="symbol">:tag</span> =&gt; s.version &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment"># 社交网址</span></span><br><span class="line">  s.social_media_url = <span class="string">'http://blogwenbo.com/'</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment"># 开源库最低支持</span></span><br><span class="line">  s.ios.deployment_target = <span class="string">'8.0'</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment"># 源库资源文件</span></span><br><span class="line">  s.source_files = <span class="string">'WBAvoidCrash/Classes/**/*'</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment"># 是否支持arc</span></span><br><span class="line">  s.requires_arc = <span class="literal">true</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment"># ---------------- Dependency --------------</span></span><br><span class="line">  <span class="comment">#开源库依赖库</span></span><br><span class="line">  s.dependency <span class="string">"Masonry"</span></span><br><span class="line">  <span class="comment"># 指定版本</span></span><br><span class="line">  s.dependency <span class="string">"Masonry"</span>, <span class="string">"~&gt; 1.0"</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment"># ---------------- Project Linking ----------------</span></span><br><span class="line">  <span class="comment"># 添加系统依赖静态库</span></span><br><span class="line">  s.library = <span class="string">'sqlite3'</span>, <span class="string">'xml2'</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">#依赖系统库</span></span><br><span class="line">  s.frameworks = <span class="string">'Foundation'</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">#添加依赖第三方的framework</span></span><br><span class="line">  s.vendored_frameworks = <span class="string">'XXXX/XXXX/**/*.framework'</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">#静态库.a</span></span><br><span class="line">  s.vendored_library = <span class="string">'XXXX/XXX/XXX.a'</span>, <span class="string">'YYY/YYY/Y.a'</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment"># ---------------- Resource ------------------</span></span><br><span class="line">  s.resource  = <span class="string">"icon.png"</span></span><br><span class="line">  s.resources = <span class="string">"Resources/*.png"</span></span><br><span class="line">  s.resource_bundles = &#123;</span><br><span class="line">   <span class="string">'ATCategory'</span> =&gt; [<span class="string">'ATCategory/Images/*.png'</span>]</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">#添加资源文件</span></span><br><span class="line">  s.resource = <span class="string">'XXX/XXXX/**/*.bundle'</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment"># ---------------- Project Setting ----------------</span></span><br><span class="line">  s.xcconfig = &#123; <span class="string">"HEADER_SEARCH_PATHS"</span> =&gt; <span class="string">"$(SDKROOT)/usr/include/libxml2"</span> &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment"># pod工程配置，指模拟器指令集配置</span></span><br><span class="line">  ss.pod_target_xcconfig = &#123;</span><br><span class="line">    <span class="string">'ARCHS[sdk=iphonesimulator*]'</span> =&gt; <span class="string">'$(ARCHS_STANDARD_64_BIT)'</span></span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment"># 在 podspec 文件中添加 s.static_framework = true，CocoaPods 就会把这个库配置成static framework。同时支持 Swift 和 Objective-C</span></span><br><span class="line">  s.static_framework = <span class="literal">true</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment"># ---------------- Subspec ----------------</span></span><br><span class="line">  s.subspec <span class="string">'sub'</span> <span class="keyword">do</span> <span class="params">|ss|</span></span><br><span class="line">    ss.source_files = <span class="string">'WBAvoidCrash/Classes/**/*'</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  </span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><ul><li><strong>关于s.source_files写法</strong></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">//表示匹配WBAvoidCrash/Classes下所有文件(主目录和子目录，其中**相当于省略中间层级)</span><br><span class="line">&apos;WBAvoidCrash/Classes/**/*&apos;</span><br><span class="line">//表示匹配Classes所有以.h和.m结尾的文件</span><br><span class="line">&apos;WBAvoidCrash/Classes/*.&#123;h,m&#125;&apos;</span><br><span class="line">//表示匹配所有WBAvoidCrash目录下文件，不包含子目录</span><br><span class="line">&apos;WBAvoidCrash/*&apos;</span><br></pre></td></tr></table></figure><p>更多关于资源目录层级写法可以参考GitHub一些著名框架，<a href="https://github.com/AFNetworking/AFNetworking/blob/master/AFNetworking.podspec" target="_blank" rel="noopener">AFNetworking.podspec</a>、<a href="https://github.com/renzifeng/ZFPlayer/blob/master/ZFPlayer.podspec" target="_blank" rel="noopener">ZFPlayer.podspec</a>等。</p><ul><li><p><strong>s.dependency关于依赖三库，依赖多个三方库如下：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">s.dependency &apos;Masonry&apos;</span><br><span class="line">s.dependency &apos;MJRefresh&apos;</span><br><span class="line">s.dependency &apos;Masonry&apos; &apos;YYModel&apos;</span><br></pre></td></tr></table></figure></li></ul><h4 id="验证本地是否通过"><a href="#验证本地是否通过" class="headerlink" title="验证本地是否通过"></a>验证本地是否通过</h4><ul><li>配置好podspec之后，验证本地库是否通过验证，终端输入如下命令：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pod lib lint</span><br></pre></td></tr></table></figure><p>通过验证，终端输出如下：</p><p><img src="https://ws2.sinaimg.cn/large/0069RVTdly1fuarsoxm53j30vi05ijso.jpg" alt=""></p><ul><li>报如下错误</li></ul><p><img src="https://upload-images.jianshu.io/upload_images/3072214-258e21287c18f67b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="屏幕快照 2018-08-14 上午12.21.07.png"></p><p>需在Xcode中配置：</p><p><img src="https://upload-images.jianshu.io/upload_images/3072214-416eef1ea9e99431.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="屏幕快照 2018-08-14 上午12.34.17.png"></p><ul><li>如果pod库存在警告是不能通过验证的，如果要暂时忽略警告通过验证（如码云创建的私有库<strong>s.homepage</strong>地址不可达警告），可使用如下命令：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pod lib lint --allow-warnings</span><br></pre></td></tr></table></figure><ul><li><p>你制作的pod库依赖三方库，而三方库包含静态库（如：<strong>xxxx.a</strong>），在验证的时候，不能验证通过，可使用如下命令：</p></li><li><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">pod lib lint --use-libraries</span><br><span class="line"></span><br><span class="line">//同时忽略警告</span><br><span class="line">pod lib lint --use-libraries --allow-warnings</span><br></pre></td></tr></table></figure></li></ul><p>不管怎样都要解决pod库存在的警告，并通过验证。</p><h4 id="关联本地仓库，并推送到远程仓库，打标签"><a href="#关联本地仓库，并推送到远程仓库，打标签" class="headerlink" title="关联本地仓库，并推送到远程仓库，打标签"></a>关联本地仓库，并推送到远程仓库，打标签</h4><ul><li>如果你还未创建远程仓库，你需要创建与之对应的远程仓库，我是在GitHub创建的仓库，这里也不再赘述创建方法。创建之后须与本地仓库关联，在终端执行如下命令：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#提交代码到暂存区</span><br><span class="line">git add .</span><br><span class="line">#提交到本地仓库</span><br><span class="line">git commit -m &quot;create WBAvoidCrash Library&quot;</span><br><span class="line">#添加到远程仓库</span><br><span class="line">git remote add origin git@github.com:wenmobo/WBAvoidCrash.git</span><br><span class="line">#推送到远程仓库</span><br><span class="line">git push origin master</span><br></pre></td></tr></table></figure><ul><li><p>最近在用码云制作私有库的时候按照上面git命令，在执行<code>git push origin master</code>会报错，需要执行以下命令或者按终端提示的信息操作，第一次才能成功推送到远程仓库：</p></li><li><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git pull --rebase origin master</span><br></pre></td></tr></table></figure></li><li><p>提交完成之后进行打标签操作：</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#打标签</span><br><span class="line">git tag -a 1.0.0 -m &apos;release version 1.0.0&apos;</span><br><span class="line">#推送标签到远程</span><br><span class="line">git push origin 1.0.0</span><br></pre></td></tr></table></figure><p><strong>友情提示</strong></p><p>关于git打标签操作，你可以借助<a href="https://www.sourcetreeapp.com/" target="_blank" rel="noopener"><em>Sourcetree</em></a>或者终端命令，可以查看我的博客<a href="https://www.jianshu.com/p/3e85e15c5e43" target="_blank" rel="noopener">MAC上Git打标签</a>。</p><h4 id="推送-podspec到远程"><a href="#推送-podspec到远程" class="headerlink" title="推送***.podspec到远程"></a>推送***.podspec到远程</h4><p>首先将本地WBAvoidCrash.podspec推送到远程私有repo spec仓库和本地repo spec仓库，终端执行如下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd [WBAvoidCrash库路径]</span><br><span class="line">pod repo push WBSpecs WBAvoidCrash.podspec</span><br></pre></td></tr></table></figure><p><img src="https://ws4.sinaimg.cn/large/0069RVTdly1fuat1gb99mj30y00eijth.jpg" alt=""></p><h4 id="验证远程是否通过"><a href="#验证远程是否通过" class="headerlink" title="验证远程是否通过"></a>验证远程是否通过</h4><p>推送成功之后，终端输入如下命令进行验证：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pod spec lint WBAvoidCrash.podspec</span><br></pre></td></tr></table></figure><p>验证通过终端输出如下：</p><p><img src="https://ws3.sinaimg.cn/large/0069RVTdly1fuat21dm07j30ye08e3zt.jpg" alt=""></p><ul><li><p>同样这里如果还存在着警告或者错误，同样不能验证通过，同样可以用以下命令忽略警告通过验证：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pod spec lint WBAvoidCrash.podspec --allow-warnings</span><br><span class="line">pod spec lint WBAvoidCrash.podspec --use-libraries</span><br><span class="line">pod spec lint WBAvoidCrash.podspec --allow-warnings --use-libraries</span><br></pre></td></tr></table></figure></li></ul><h4 id="验证私有仓库是否可用，pod集成私有库"><a href="#验证私有仓库是否可用，pod集成私有库" class="headerlink" title="验证私有仓库是否可用，pod集成私有库"></a>验证私有仓库是否可用，pod集成私有库</h4><p>验证通过之后，下面进行测试，看是否能通过cocoapods集成到我们的项目，首先用pod命令进行搜索，看能否搜索到：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pod search WBAvoidCrash</span><br></pre></td></tr></table></figure><p>这时可能会报如下错误</p><p><img src="https://ws3.sinaimg.cn/large/0069RVTdly1fuat8rv62bj30xw04s3zw.jpg" alt=""></p><p>不要慌，在终端执行如下命令，然后重新search：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rm ~/Library/Caches/CocoaPods/search_index.json</span><br></pre></td></tr></table></figure><p>耐心等待之后，发现能搜到自己创建的私有库了：</p><p><img src="https://ws1.sinaimg.cn/large/0069RVTdly1fuatj9r8cwj30xu07agmu.jpg" alt=""></p><p>新建一个测试工程测试，用CocoaPods初始化项目，编辑<strong>podfile</strong>文件：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span>CocoaPods官方spec仓库</span><br><span class="line">source 'https://github.com/CocoaPods/Specs.git'</span><br><span class="line"><span class="meta">#</span>自己私有spec仓库</span><br><span class="line">source 'https://github.com/wenmobo/WBSpecs.git'</span><br><span class="line"></span><br><span class="line">platform :ios, '8.0'</span><br><span class="line"></span><br><span class="line">target 'Test' do</span><br><span class="line"><span class="meta">  #</span>防Crash库</span><br><span class="line">  pod 'WBAvoidCrash'</span><br><span class="line"></span><br><span class="line"><span class="meta">  #</span> Pods for Test</span><br><span class="line"></span><br><span class="line">  target 'TestTests' do</span><br><span class="line">    inherit! :search_paths</span><br><span class="line">    # Pods for testing</span><br><span class="line">  end</span><br><span class="line"></span><br><span class="line">  target 'TestUITests' do</span><br><span class="line">    inherit! :search_paths</span><br><span class="line">    # Pods for testing</span><br><span class="line">  end</span><br><span class="line"></span><br><span class="line">end</span><br></pre></td></tr></table></figure><p>编辑好<strong>podfile</strong>文件之后，终端执行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pod install</span><br><span class="line">或</span><br><span class="line">pod install --no-repo-update</span><br></pre></td></tr></table></figure><p>耐心等待一会儿，你会发现私有库已经集成到测试项目中了：</p><p><img src="https://ws3.sinaimg.cn/large/006tNbRwly1fung83adapj31jy0t8k1k.jpg" alt=""></p><p>到这里，cocoapods私有库制作已讲解完成。也为自己制作的第一个私有库打波广告吧☺️☺️，<a href="https://github.com/wenmobo/WBAvoidCrash" target="_blank" rel="noopener">WBAvoidCrash</a>一个防Crash库，现在支持9种防崩溃类型，集成方便，使用无需导入相关的头文件，这个库之前没这么完善，后来参考借鉴了一些大神开源的库。下面👇贴出私有库地址吧：</p><p><a href="https://github.com/wenmobo/WBAvoidCrash" target="_blank" rel="noopener">WBAvoidCrash</a></p><h2 id="三、相关命令"><a href="#三、相关命令" class="headerlink" title="三、相关命令"></a>三、相关命令</h2><h4 id="cocoapods"><a href="#cocoapods" class="headerlink" title="cocoapods"></a>cocoapods</h4><ul><li><p>查看所有repo</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pod repo list</span><br></pre></td></tr></table></figure></li><li><p>移除某个repo</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pod repo remove [spec]</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>更新repo</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 更新所有repo</span></span><br><span class="line">pod repo update</span><br><span class="line"><span class="comment"># 更新指定</span></span><br><span class="line">pod repo update [spec库名]</span><br></pre></td></tr></table></figure></li><li><p>验证可选参数</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">--quick                                Lint skips checks that would <span class="keyword">require</span></span><br><span class="line">                                           to download <span class="keyword">and</span> build the spec</span><br><span class="line">--allow-warnings                       Lint validates even <span class="keyword">if</span> warnings are</span><br><span class="line">                                     present</span><br><span class="line">--subspec=NAME                         Lint validates only the given subspec</span><br><span class="line">--no-subspecs                          Lint skips validation of subspecs</span><br><span class="line">--no-clean                             Lint leaves the build directory</span><br><span class="line">                                     intact <span class="keyword">for</span> inspection</span><br><span class="line">--fail-fast                            Lint stops on the first failing</span><br><span class="line">                                     platform <span class="keyword">or</span> subspec</span><br><span class="line">--use-libraries                        Lint uses static libraries to install</span><br><span class="line">                                     the spec</span><br><span class="line">--use-modular-headers                  Lint uses modular headers during</span><br><span class="line">                                     installation</span><br><span class="line">--sources=<span class="symbol">https:</span>/<span class="regexp">/cdn.cocoapods.org/</span>   The sources from which to pull</span><br><span class="line">                                     dependent pods (defaults to</span><br><span class="line">                                     <span class="symbol">https:</span>/<span class="regexp">/cdn.cocoapods.org/</span>). Multiple</span><br><span class="line">                                     sources must be comma-delimited</span><br><span class="line">--platforms=ios,macos                  Lint against specific platforms</span><br><span class="line">                                     (defaults to all platforms supported</span><br><span class="line">                                     by the podspec). Multiple platforms</span><br><span class="line">                                     must be comma-delimited</span><br><span class="line">--private                              Lint skips checks that apply only to</span><br><span class="line">                                     public specs</span><br><span class="line">--swift-version=VERSION                The <span class="string">`SWIFT_VERSION`</span> that should be</span><br><span class="line">                                     used to lint the spec. This takes</span><br><span class="line">                                     precedence over the Swift versions</span><br><span class="line">                                     specified by the spec <span class="keyword">or</span> a</span><br><span class="line">                                     <span class="string">`.swift-version`</span> file</span><br><span class="line">--<span class="keyword">include</span>-podspecs=**<span class="regexp">/*.podspec        Additional ancillary podspecs which</span></span><br><span class="line"><span class="regexp">                                     are used for linting via :path</span></span><br><span class="line"><span class="regexp">--external-podspecs=**/</span>*.podspec       Additional ancillary podspecs which</span><br><span class="line">                                     are used <span class="keyword">for</span> linting via <span class="symbol">:podspec</span>. If</span><br><span class="line">                                     there are --<span class="keyword">include</span>-podspecs, <span class="keyword">then</span></span><br><span class="line">                                     these are removed from them</span><br><span class="line">--skip-import-validation               Lint skips validating that the pod</span><br><span class="line">                                     can be imported</span><br><span class="line">--skip-tests                           Lint skips building <span class="keyword">and</span> running tests</span><br><span class="line">                                     during validation</span><br><span class="line">--analyze                              Validate with the Xcode Static</span><br><span class="line">                                     Analysis tool</span><br><span class="line">--silent                               Show nothing</span><br><span class="line">--verbose                              Show more debugging information</span><br><span class="line">--no-ansi                              Show output without ANSI codes</span><br><span class="line">--help                                 Show help banner of specified command</span><br></pre></td></tr></table></figure><p>可通过如下命令查看可选参数</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pod lib lint --help</span><br></pre></td></tr></table></figure></li><li><p>验证本地pod库</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 验证本地pod库</span></span><br><span class="line">pod lib lint</span><br><span class="line"><span class="comment"># 本地验证忽略警告</span></span><br><span class="line">pod lib lint --allow-warnings</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>验证远程</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#验证远程</span><br><span class="line">pod spec lint [name].podspec</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>搜索pod库</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pod search [库名]</span><br></pre></td></tr></table></figure></li></ul><h2 id="四、问题解决"><a href="#四、问题解决" class="headerlink" title="四、问题解决"></a>四、问题解决</h2><h3 id="4-1、JPush制作私有库lint时报错-symbol-s-not-found-for-architecture-i386"><a href="#4-1、JPush制作私有库lint时报错-symbol-s-not-found-for-architecture-i386" class="headerlink" title="4.1、JPush制作私有库lint时报错 symbol(s) not found for architecture i386"></a>4.1、JPush制作私有库lint时报错 symbol(s) not found for architecture i386</h3><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">valid_archs = [<span class="string">'armv7s'</span>,<span class="string">'arm64'</span>,]</span><br><span class="line">s.xcconfig = &#123;</span><br><span class="line">  <span class="string">'VALID_ARCHS'</span> =&gt;  valid_archs.join(<span class="string">' '</span>),</span><br><span class="line">&#125;</span><br><span class="line">s.pod_target_xcconfig = &#123;</span><br><span class="line">    <span class="string">'ARCHS[sdk=iphonesimulator*]'</span> =&gt; <span class="string">'$(ARCHS_STANDARD_64_BIT)'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-2、私有库依赖私有库验证不通过"><a href="#4-2、私有库依赖私有库验证不通过" class="headerlink" title="4.2、私有库依赖私有库验证不通过"></a>4.2、私有库依赖私有库验证不通过</h3><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">--sources=[private spec],[cocoapods spec]</span><br><span class="line"><span class="comment"># 如下写法</span></span><br><span class="line">pod lib lint --no-clean --sources=<span class="symbol">https:</span>/<span class="regexp">/xxx.git,https:/</span><span class="regexp">/github.com/</span>CocoaPods/Specs.git --allow-warnings --use-libraries --use-modular-headers --verbose</span><br></pre></td></tr></table></figure><h2 id="五、结语"><a href="#五、结语" class="headerlink" title="五、结语"></a>五、结语</h2><blockquote><p>终于完成这篇博客了，从自己比较熟悉GitHub之后，也想过自己能够开源一款三方库，然而自己水平有限，现在还没有拿的出来好的封装库或一些好的封装思想。但自己还是要学会制作pod库，在写博客之前，自己在谷歌浏览器查了许多的资料，资料也是比较的凌乱，自己在制作过程中也踩了许多的坑，最后自己也成功制作了一个私有库<a href="https://github.com/wenmobo/WBAvoidCrash" target="_blank" rel="noopener">WBAvoidCrash</a>，过程虽然有些坎坷，但自己还是很有成就感。自己也是第一次制作，如果有描述不对的地方，希望大家能够批评指正，我也会第一时间修改，同时也希望这篇博客对需要的朋友一些帮助，接下来我也会写一篇记录公开库制作过程的博客。</p></blockquote><h2 id="六、参考文章"><a href="#六、参考文章" class="headerlink" title="六、参考文章"></a>六、参考文章</h2><p>1、<a href="https://segmentfault.com/a/1190000007947371" target="_blank" rel="noopener"> CocoaPods创建公有和私有Pod库方法总结</a><br>2、<a href="https://blog.csdn.net/conglin1991/article/details/55096422" target="_blank" rel="noopener">出现Unable to find a pod with name, author, summary, or description matching解决方法</a><br>3、<a href="https://www.jianshu.com/p/d2d81b58d716" target="_blank" rel="noopener">如何发布自己的开源框架到CocoaPods</a><br>4、<a href="https://www.jianshu.com/p/d2d81b58d716" target="_blank" rel="noopener">使用CocoaPods管理iOS库—制作pod篇</a><br>5、<a href="https://www.jianshu.com/p/ddc2490bff9f" target="_blank" rel="noopener">如何创建私有 CocoaPods 仓库</a><br>6、<a href="https://guides.cocoapods.org/making/making-a-cocoapod.html" target="_blank" rel="noopener">Making a CocoaPod</a><br>7、<a href="https://medium.com/@shahabejaz/create-and-distribute-private-libraries-with-cocoapods-5b6507b57a03" target="_blank" rel="noopener">Create and Distribute Private Libraries with Cocoapods</a><br>8、<a href="https://www.jianshu.com/p/7d0ad4cde012" target="_blank" rel="noopener">CocoaPods使用总结</a></p>]]></content>
    
    <summary type="html">
    
      自己一直想用CocoaPods制作pod库，在自己面试过程中也被面试官问到过组件化开发的概念，然尔自己那时也不是很了解，CocoaPods与组件化也息息相关，利用CocoaPods也便于维护pod组件，于是自己就决定学习用CocoaPods制作pod库，下面就开始讲解私有库的制作过程吧。
    
    </summary>
    
      <category term="iOS" scheme="http://blogwenbo.com/categories/iOS/"/>
    
    
      <category term="iOS" scheme="http://blogwenbo.com/tags/iOS/"/>
    
      <category term="CocoaPods" scheme="http://blogwenbo.com/tags/CocoaPods/"/>
    
      <category term="GitHub" scheme="http://blogwenbo.com/tags/GitHub/"/>
    
      <category term="Git" scheme="http://blogwenbo.com/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>CocoaPods安装与使用</title>
    <link href="http://blogwenbo.com/2018/08/01/CocoaPods%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/"/>
    <id>http://blogwenbo.com/2018/08/01/CocoaPods安装与使用/</id>
    <published>2018-08-01T13:30:38.000Z</published>
    <updated>2020-03-30T14:09:57.142Z</updated>
    
    <content type="html"><![CDATA[<p class="description"></p><a id="more"></a><h3 id="更新日志"><a href="#更新日志" class="headerlink" title="更新日志"></a>更新日志</h3><p>2018-08-01：整理文章目录结构，添加忽略CocoaPods警告方法，解决出现OTHER_LDFLAGS方法。</p><p><strong>介绍内容目录</strong></p><ul><li>一、安装RVM</li><li>二、配置RubyGems</li><li>三、CocoaPods安装</li><li>四、CocoaPods使用</li><li>五、卸载CocoaPods</li><li>六、问题解决<h3 id="一、安装RVM"><a href="#一、安装RVM" class="headerlink" title="一、安装RVM"></a>一、安装<a href="https://rvm.io/" target="_blank" rel="noopener">RVM</a></h3></li><li><p>安装RVM命令如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -L get.rvm.io | bash -s stable</span><br></pre></td></tr></table></figure></li><li><p>查看rvm版本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rvm -v</span><br></pre></td></tr></table></figure></li><li><p>更新RVM</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rvm get stable</span><br></pre></td></tr></table></figure></li><li><p>查看可下载的ruby版本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rvm list known</span><br></pre></td></tr></table></figure></li></ul><p>输出结果为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"># MRI Rubies</span><br><span class="line">[ruby-]1.8.6[-p420]</span><br><span class="line">[ruby-]1.8.7[-head] # security released on head</span><br><span class="line">[ruby-]1.9.1[-p431]</span><br><span class="line">[ruby-]1.9.2[-p330]</span><br><span class="line">[ruby-]1.9.3[-p551]</span><br><span class="line">[ruby-]2.0.0[-p648]</span><br><span class="line">[ruby-]2.1[.10]</span><br><span class="line">[ruby-]2.2[.7]</span><br><span class="line">[ruby-]2.3[.4]</span><br><span class="line">[ruby-]2.4[.1]</span><br><span class="line">ruby-head</span><br></pre></td></tr></table></figure></p><ul><li>选择版本安装<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//安装2.4.1</span><br><span class="line">rvm install 2.4.1</span><br></pre></td></tr></table></figure></li></ul><p>安装如果遇到如下错误：<br><img src="https://user-gold-cdn.xitu.io/2018/1/24/161288dc7e81a81c?w=1138&amp;h=120&amp;f=png&amp;s=30306" alt="屏幕快照 2017-12-17 下午1.59.45.png"><br>安装Command Line Tools即可<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xcode-select --install</span><br></pre></td></tr></table></figure></p><ul><li>查看已安装的版本<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rvm list</span><br></pre></td></tr></table></figure></li></ul><p>输出结果如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">rvm rubies</span><br><span class="line">=* ruby-2.4.1 [ x86_64 ]</span><br><span class="line"># =&gt; - current</span><br><span class="line"># =* - current &amp;&amp; default</span><br><span class="line">#  * - default</span><br></pre></td></tr></table></figure></p><ul><li><p>查看当前使用的版本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rvm current</span><br></pre></td></tr></table></figure></li><li><p>设置默认版本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rvm use 2.4.1 --default</span><br></pre></td></tr></table></figure></li><li><p>删除安装过的版本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rvm remove 2.2.2</span><br></pre></td></tr></table></figure></li></ul><p>如果提示权限不足，同理加上sudo<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo rvm remove 2.2.2</span><br></pre></td></tr></table></figure></p><h3 id="二、升级RubyGems"><a href="#二、升级RubyGems" class="headerlink" title="二、升级RubyGems"></a>二、升级<a href="https://rubygems.org/?locale=zh-CN" target="_blank" rel="noopener">RubyGems</a></h3><ul><li>在终端输入：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gem update --system</span><br></pre></td></tr></table></figure></li></ul><p>若果是最新，则输出：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Latest version currently installed. Aborting.</span><br></pre></td></tr></table></figure></p><ul><li><p>若果没有权限报错，在命令前加上sudo</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo gem update --system</span><br></pre></td></tr></table></figure></li><li><p>更换源（最新使用的是：<a href="https://gems.ruby-china.org/）" target="_blank" rel="noopener">https://gems.ruby-china.org/）</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">gem sources --remove https://rubygems.org/</span><br><span class="line"></span><br><span class="line">gem sources -a https://gems.ruby-china.org/</span><br></pre></td></tr></table></figure></li><li><p>查看ruby镜像</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gem source -l</span><br></pre></td></tr></table></figure></li></ul><p>输出结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://gems.ruby-china.org/</span><br></pre></td></tr></table></figure></p><h3 id="三、CocoaPods安装"><a href="#三、CocoaPods安装" class="headerlink" title="三、CocoaPods安装"></a>三、<a href="https://guides.cocoapods.org/using/getting-started.html#getting-started" target="_blank" rel="noopener">CocoaPods</a>安装</h3><ul><li><p>终端输入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo gem install cocoapods</span><br><span class="line">或</span><br><span class="line">sudo gem install -n /usr/local/bin cocoapods</span><br></pre></td></tr></table></figure></li><li><p>安装了多个xcode进行选择</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo xcode-select -switch /Applications/Xcode.app/Contents/Developer</span><br></pre></td></tr></table></figure></li><li><p>安装本地库</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pod setup</span><br></pre></td></tr></table></figure></li></ul><p>执行上面的命令过后，会出现卡主不动，这个是时候是在下载，通常会等很久。这是后可以通过<code>cmmand+n</code>新创一个终端窗口，然后<code>cd ~/.cocoapods/</code>到该文件下，执行<code>du -sh *</code>查看大小：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1015Mrepos</span><br></pre></td></tr></table></figure></p><ul><li><p>查看版本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pod --version</span><br></pre></td></tr></table></figure></li><li><p>升级CocoaPods</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo gem install -n /usr/local/bin cocoapods</span><br><span class="line">或</span><br><span class="line">sudo gem install cocoapods</span><br></pre></td></tr></table></figure></li></ul><h3 id="四、CocoaPods使用"><a href="#四、CocoaPods使用" class="headerlink" title="四、CocoaPods使用"></a>四、CocoaPods使用</h3><h4 id="工程导入三方库"><a href="#工程导入三方库" class="headerlink" title="工程导入三方库"></a>工程导入三方库</h4><ul><li><p>创建一个工程test，终端切换到工程路径：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd 工程路径</span><br></pre></td></tr></table></figure></li><li><p>终端输入：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pod init</span><br></pre></td></tr></table></figure></li></ul><p>这时工程就会生成一个podfile<br><img src="https://user-gold-cdn.xitu.io/2018/1/24/161288dc7ef162b2?w=1240&amp;h=136&amp;f=png&amp;s=49290" alt="屏幕快照 2017-12-17 下午5.39.24.png"></p><ul><li>编辑podfile：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim podfile</span><br></pre></td></tr></table></figure></li></ul><p>进入之后按<code>i</code>进入编辑模式，添加三方开源库如：<code>pod &#39;AFNetworking&#39;</code>(也可指定版本<code>pod &#39;AFNetworking&#39;, &#39;~&gt; 3.1.0&#39;</code>)，然后输入<code>:wq</code>回车保存。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"># Uncomment the next line to define a global platform for your project</span><br><span class="line"># platform :ios, &apos;9.0&apos;</span><br><span class="line">pod &apos;AFNetworking&apos;</span><br><span class="line">target &apos;test&apos; do</span><br><span class="line">  # Uncomment the next line if you&apos;re using Swift or would like to use dynamic frameworks</span><br><span class="line">  # use_frameworks!</span><br><span class="line"></span><br><span class="line">  # Pods for test</span><br><span class="line"></span><br><span class="line">end</span><br><span class="line">~                                                                               </span><br><span class="line">~                                                                               </span><br><span class="line">~                                                                                                                                                        </span><br><span class="line">:wq</span><br></pre></td></tr></table></figure></p><ul><li>执行安装<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pod install</span><br><span class="line">或</span><br><span class="line">pod install --no-repo-update</span><br></pre></td></tr></table></figure></li></ul><p>好了，到此CocoaPods的安装与使用都介绍完毕。<br><img src="https://user-gold-cdn.xitu.io/2018/1/24/161288dc7f1688b0?w=402&amp;h=264&amp;f=png&amp;s=26984" alt="屏幕快照 2017-12-17 下午5.47.41.png"></p><h4 id="更新三方库"><a href="#更新三方库" class="headerlink" title="更新三方库"></a>更新三方库</h4><ul><li><p>更新所有三方库</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//更新所有可更新的三方库</span><br><span class="line">pod update</span><br></pre></td></tr></table></figure></li><li><p>间接更新三方库</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">cd ~/.cocoapods</span><br><span class="line">ls</span><br><span class="line">cd repos</span><br><span class="line">ls</span><br><span class="line">cd master</span><br><span class="line">ls</span><br><span class="line">ls -a</span><br><span class="line">git pull</span><br></pre></td></tr></table></figure></li><li><p>更新指定库</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pod update Masonry</span><br></pre></td></tr></table></figure></li><li><p>省时更新方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pod update --verbose --no-repo-update</span><br></pre></td></tr></table></figure></li></ul><h4 id="移除导入过的三方库"><a href="#移除导入过的三方库" class="headerlink" title="移除导入过的三方库"></a>移除导入过的三方库</h4><ul><li>第一步：编辑<strong>podfile</strong>，将需要删除的三方库移除掉<br><del>pod ‘AFNetworking’, ‘~&gt;3.1.0’</del></li><li>第二步：执行<code>pod install</code>，重新编译，如果没有报错则移除成功<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pod install</span><br></pre></td></tr></table></figure></li></ul><h4 id="移除工程中CocoaPods"><a href="#移除工程中CocoaPods" class="headerlink" title="移除工程中CocoaPods"></a>移除工程中CocoaPods</h4><ul><li>删除工程文件夹下的Podfile、Podfile.lock和Pods文件夹</li><li>删除xcworkspace文件</li><li>打开xcodeproj文件，删除项目中的libpods.a和Pods.xcconfig引用</li><li>打开Build Phases选项，删除Check Pods Manifest.lock和Copy Pods Resources<br>主要就是上面四个步骤。</li></ul><h3 id="五、卸载CocoaPods"><a href="#五、卸载CocoaPods" class="headerlink" title="五、卸载CocoaPods"></a>五、卸载CocoaPods</h3><ul><li><p>查看pod的地址，终端输入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">which pod</span><br></pre></td></tr></table></figure></li><li><p>删除pod，终端输入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo rm -rf [pod地址]</span><br></pre></td></tr></table></figure></li><li><p>查看gem安装包，终端输入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gem list</span><br></pre></td></tr></table></figure></li><li><p>按版本号卸载cocoapods</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo gem uninstall cocoapods -v [版本号]</span><br></pre></td></tr></table></figure></li></ul><p>卸载cocoapods其他组件同理，只需替换名字卸载即可，如：<code>gem uninstall cocoapods-downloader</code>。</p><ul><li><p>卸载所有版本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo gem uninstall cocoapods</span><br></pre></td></tr></table></figure></li><li><p>验证是否删除成功</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pod --version</span><br></pre></td></tr></table></figure></li></ul><p>如果提示命令未找到，说明卸载成功</p><h3 id="六、问题解决"><a href="#六、问题解决" class="headerlink" title="六、问题解决"></a>六、问题解决</h3><h4 id="1、执行gem-update-system报证书错误，在网上找了很久也没有找到解决方法，后来还是找到了-方法是忽略证书验证。"><a href="#1、执行gem-update-system报证书错误，在网上找了很久也没有找到解决方法，后来还是找到了-方法是忽略证书验证。" class="headerlink" title="1、执行gem update --system报证书错误，在网上找了很久也没有找到解决方法，后来还是找到了,方法是忽略证书验证。"></a>1、执行<code>gem update --system</code>报证书错误，在网上找了很久也没有找到解决方法，后来还是找到了,方法是忽略证书验证。</h4><p>步骤：<br>前往<code>~/.gemrc</code>，打开文件，并添加<code>:ssl_verify_mode: 0</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">:backtrace: false</span><br><span class="line">:bulk_threshold: 1000</span><br><span class="line">:sources:</span><br><span class="line">- https://gems.ruby-china.org/</span><br><span class="line">:update_sources: true</span><br><span class="line">:verbose: true</span><br><span class="line">:ssl_verify_mode: 0</span><br></pre></td></tr></table></figure></p><p><code>cmmand+s</code>保存，然后在执行<code>sudo gem update --system</code>，更新成功。</p><h4 id="2、Unable-to-require-openssl-install-OpenSSL-and-rebuild-ruby"><a href="#2、Unable-to-require-openssl-install-OpenSSL-and-rebuild-ruby" class="headerlink" title="2、Unable to require openssl, install OpenSSL and rebuild ruby"></a>2、<a href="https://stackoverflow.com/questions/21201493/couldnt-require-openssl-in-ruby" target="_blank" rel="noopener">Unable to require openssl, install OpenSSL and rebuild ruby</a></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//如果没有安装openssl，则用honebrew安装</span><br><span class="line">brew install openssl</span><br><span class="line"></span><br><span class="line">//重装rvm并关联openssl</span><br><span class="line">rvm reinstall 2.4.0 --with-openssl-dir=`brew --prefix openssl`</span><br></pre></td></tr></table></figure><p>如果安装了<strong>2.4.0</strong>版本则重新安装，没有安装则安装，安装成功之后，就能<code>sudo gem update --system</code>正常更新了。</p><h4 id="3、CocoaPods-出现-OTHER-LDFLAGS-错误，如下图所示"><a href="#3、CocoaPods-出现-OTHER-LDFLAGS-错误，如下图所示" class="headerlink" title="3、CocoaPods 出现 OTHER_LDFLAGS 错误，如下图所示"></a>3、CocoaPods 出现 OTHER_LDFLAGS 错误，如下图所示</h4><p><img src="https://ws4.sinaimg.cn/large/006tKfTcly1ftuj9ttidrj30vk0e8q5o.jpg" alt=""></p><ul><li><strong>解决方法1</strong>：<strong>Target</strong>–&gt;<strong>Build Settings</strong>–&gt;<strong>Other Linker Flags</strong>中添加<code>$(inherited)</code>，之后执行<code>pod install</code>或<code>pod update</code>警告就会消失。</li><li><strong>解决方法2</strong>:<code>project.xcodeproj</code>右键显示包内容，用文本编辑器打开 <code>project.pbxproj</code>，<code>command + F</code> 搜索 <code>OTHER_LDFLAGS</code> ，删除搜索到的设置，<code>command + S</code> 保存，然后重新执行 <code>pod install</code> 或者 <code>pod update</code> 。</li></ul><h4 id="4、Cocoapods第三方库编译提示warning的解决方法"><a href="#4、Cocoapods第三方库编译提示warning的解决方法" class="headerlink" title="4、Cocoapods第三方库编译提示warning的解决方法"></a><strong>4、Cocoapods第三方库编译提示warning的解决方法</strong></h4><ul><li><p>忽略所有警告</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">inhibit_all_warnings!</span><br></pre></td></tr></table></figure><p>之后执行<code>pod install</code> 或 <code>pod update</code> 即可。</p></li><li><p>忽略单个库警告</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pod &apos;Masonry&apos;, :inhibit_warnings =&gt; true</span><br></pre></td></tr></table></figure><p>之后执行<code>pod install</code> 或 <code>pod update</code> 即可。</p></li></ul><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><blockquote><p>CocoaPods安装与使用就介绍到这里了，如果在以后CocoaPods安装使用工程中遇到问题，如果找到了解决方案，我也会贴出来。</p></blockquote><h4 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h4><ul><li><a href="https://www.jianshu.com/p/552f21a989ba" target="_blank" rel="noopener">iOS 删除已经配置的类库和移除CocoaPods</a></li><li><a href="http://blog.csdn.net/jymn_chen/article/details/19213601" target="_blank" rel="noopener">使用CocoaPods（二）删除已经配置的类库和移除CocoaPods</a></li><li><a href="https://www.jianshu.com/p/dfb2a5834cd0" target="_blank" rel="noopener">【iOS 开发】解决使用 CocoaPods 执行 pod install 时出现 - Use the <code>$（inherited）</code> flag … 警告</a></li><li><a href="http://zengyi.me/blog/2015/01/09/cocoapodsdi-san-fang-ku-bian-yi-ti-shi-warningde-jie-jue-fang-fa/" target="_blank" rel="noopener">Cocoapods第三方库编译提示warning的解决方法</a></li></ul>]]></content>
    
    <summary type="html">
    
      在开发项目的时候，难免会导入一些三方开源库，CocoaPods是OS X管理三方开源库的工具，用这个工具，我们可以轻松集中管理、更新三方开源库。下面开始介绍CocoaPods安装与使用吧
    
    </summary>
    
      <category term="iOS" scheme="http://blogwenbo.com/categories/iOS/"/>
    
    
      <category term="iOS" scheme="http://blogwenbo.com/tags/iOS/"/>
    
      <category term="CocoaPods" scheme="http://blogwenbo.com/tags/CocoaPods/"/>
    
      <category term="MAC" scheme="http://blogwenbo.com/tags/MAC/"/>
    
  </entry>
  
  <entry>
    <title>iOS状态栏配置</title>
    <link href="http://blogwenbo.com/2018/07/26/iOS%E7%8A%B6%E6%80%81%E6%A0%8F%E9%85%8D%E7%BD%AE/"/>
    <id>http://blogwenbo.com/2018/07/26/iOS状态栏配置/</id>
    <published>2018-07-26T14:57:56.000Z</published>
    <updated>2020-03-30T14:09:57.148Z</updated>
    
    <content type="html"><![CDATA[<p class="description"></p><a id="more"></a><h3 id="一、全局配置状态栏"><a href="#一、全局配置状态栏" class="headerlink" title="一、全局配置状态栏"></a>一、全局配置状态栏</h3><ul><li><p>在<strong>info.plist</strong>中添加key：<strong>View controller-based status bar appearance</strong>，并设置value为<strong>NO</strong>。</p></li><li><p>在需要设置样式的地方调用：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">//UIStatusBarStyleLightContent：Light content, for use on dark backgrounds</span><br><span class="line">//UIStatusBarStyleDefault：Dark content, for use on light backgrounds</span><br><span class="line">[UIApplication sharedApplication].statusBarStyle = UIStatusBarStyleLightContent;</span><br></pre></td></tr></table></figure></li></ul><h3 id="二、配置单个控制器状态栏"><a href="#二、配置单个控制器状态栏" class="headerlink" title="二、配置单个控制器状态栏"></a>二、配置单个控制器状态栏</h3><ul><li><p>在<strong>info.plist</strong>中添加key：<strong>View controller-based status bar appearance</strong>，并设置value为<strong>YES</strong>。</p></li><li><p>如果有控制器没有导航控制器，直接重写<strong>preferredStatusBarStyle</strong> 方法返回你想要的状态栏样式即可：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">- (UIStatusBarStyle)preferredStatusBarStyle &#123;</span><br><span class="line">    return UIStatusBarStyleLightContent;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>通常都有导航控制器，如果控制器中直接重写<strong>preferredStatusBarStyle</strong>是没有效果的，这时需要在基类导航控制器中重写<strong>childViewControllerForStatusBarStyle</strong> 、<strong>preferredStatusBarStyle</strong> 任意一个方法就能实现配置单个控制器的状态栏样式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">- (UIViewController *)childViewControllerForStatusBarStyle &#123;</span><br><span class="line">    return self.topViewController;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">或者重写</span><br><span class="line">- (UIStatusBarStyle)preferredStatusBarStyle &#123;</span><br><span class="line">    return [self.topViewController preferredStatusBarStyle];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意</strong>：两个方法都重写，只会调用<strong>childViewControllerForStatusBarStyle</strong>，所以需要自己根据清空去选择调用那个方法。</p></li></ul><h3 id="三、通过分类实现"><a href="#三、通过分类实现" class="headerlink" title="三、通过分类实现"></a>三、通过分类实现</h3><ul><li><p>在项目中方便使用，我写了一个<strong>UINavigationController（WBStatusBarStyle）</strong> 分类，主要代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">@implementation UINavigationController (WBStatusBarStyle)</span><br><span class="line"></span><br><span class="line">+ (void)wb_setDefaultStatusBarStyle:(UIStatusBarStyle)statusBarStyle &#123;</span><br><span class="line">    objc_setAssociatedObject(self, &amp;kWBDefaultStatusBarStyleKey, @(statusBarStyle), OBJC_ASSOCIATION_RETAIN_NONATOMIC);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">+ (UIStatusBarStyle)wb_DefaultStatusBarStyle &#123;</span><br><span class="line">    id style = objc_getAssociatedObject(self, &amp;kWBDefaultStatusBarStyleKey);</span><br><span class="line">    return style ? [style integerValue] : UIStatusBarStyleDefault;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/** &lt; Override to return a child view controller or nil. If non-nil, that view controller&apos;s status bar appearance attributes will be used. If nil, self is used. Whenever the return values from these methods change, -setNeedsUpdatedStatusBarAttributes should be called. &gt; */</span><br><span class="line">//- (UIViewController *)childViewControllerForStatusBarStyle &#123;</span><br><span class="line">//    return self.topViewController;</span><br><span class="line">//&#125;</span><br><span class="line">//</span><br><span class="line">//- (UIViewController *)childViewControllerForStatusBarHidden &#123;</span><br><span class="line">//    return self.topViewController;</span><br><span class="line">//&#125;</span><br><span class="line"></span><br><span class="line">- (UIStatusBarStyle)preferredStatusBarStyle &#123;</span><br><span class="line">    return [self.topViewController wb_statusBarStyle];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@end</span><br></pre></td></tr></table></figure></li><li><p><strong>UIViewController (WBStatusBarStyle)</strong> </p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">@implementation UIViewController (WBStatusBarStyle)</span><br><span class="line"></span><br><span class="line">- (void)setWb_statusBarStyle:(UIStatusBarStyle)wb_statusBarStyle &#123;</span><br><span class="line">    objc_setAssociatedObject(self, &amp;kWBStatusBarStyleKey, @(wb_statusBarStyle), OBJC_ASSOCIATION_RETAIN_NONATOMIC);</span><br><span class="line">    /** &lt; Whenever the return values from these methods change, -setNeedsUpdatedStatusBarAttributes should be called. &gt; */</span><br><span class="line">    [self setNeedsStatusBarAppearanceUpdate];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (UIStatusBarStyle)wb_statusBarStyle &#123;</span><br><span class="line">    id style = objc_getAssociatedObject(self, &amp;kWBStatusBarStyleKey);</span><br><span class="line">    return style ? [style integerValue] : [UINavigationController wb_DefaultStatusBarStyle];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@end</span><br></pre></td></tr></table></figure><h3 id="四、GitHub-Demo"><a href="#四、GitHub-Demo" class="headerlink" title="四、GitHub Demo"></a>四、GitHub Demo</h3><ul><li><a href="https://github.com/wenmobo/WBManageStatusBarStyleDemo" target="_blank" rel="noopener">WBManageStatusBarStyleDemo</a></li><li><a href="https://github.com/wenmobo/WBCategories" target="_blank" rel="noopener">WBCategories</a></li></ul>]]></content>
    
    <summary type="html">
    
      在APP开发当中，都要与状态栏打交道，因此我们需要了解采用哪种方式去管理状态栏样式，更容易开发与维护，如果界面定制地方较多，就不太适合全局配置状态栏，因为这样每次在界面将要显示、消失去配置状态栏，比较的繁琐，因此我们可以采用单个配置，不影响全局，而且可以随意切换样式。这篇文章主要也是记录自己在项目中遇到的问题，方便自己以后查阅，如果有写的不对的地方，希望能给予批评指正，我会及时更改。好了，开始介绍吧！
    
    </summary>
    
      <category term="iOS" scheme="http://blogwenbo.com/categories/iOS/"/>
    
    
      <category term="iOS" scheme="http://blogwenbo.com/tags/iOS/"/>
    
      <category term="Runtime" scheme="http://blogwenbo.com/tags/Runtime/"/>
    
      <category term="Category" scheme="http://blogwenbo.com/tags/Category/"/>
    
  </entry>
  
</feed>
