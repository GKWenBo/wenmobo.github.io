<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Mr.Wen</title>
  
  <subtitle>To strive, to seek, to find, and not to yield</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://blogwenbo.com/"/>
  <updated>2020-03-30T14:09:57.149Z</updated>
  <id>http://blogwenbo.com/</id>
  
  <author>
    <name>Mr.Wen</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>一次cell阴影设置引出的问题</title>
    <link href="http://blogwenbo.com/2019/09/29/%E4%B8%80%E6%AC%A1cell%E9%98%B4%E5%BD%B1%E8%AE%BE%E7%BD%AE%E5%BC%95%E5%87%BA%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <id>http://blogwenbo.com/2019/09/29/一次cell阴影设置引出的问题/</id>
    <published>2019-09-29T15:33:34.000Z</published>
    <updated>2020-03-30T14:09:57.149Z</updated>
    
    <content type="html"><![CDATA[<p class="description"></p><p><img src="https://" alt="" style="width:100%"></p><a id="more"></a><h3 id="一、UITableVIewCell注册方式"><a href="#一、UITableVIewCell注册方式" class="headerlink" title="一、UITableVIewCell注册方式"></a>一、UITableVIewCell注册方式</h3><h3 id="二、动态适应高度"><a href="#二、动态适应高度" class="headerlink" title="二、动态适应高度"></a>二、动态适应高度</h3><h3 id="三、UITableVIewCell复用导致的坑"><a href="#三、UITableVIewCell复用导致的坑" class="headerlink" title="三、UITableVIewCell复用导致的坑"></a>三、UITableVIewCell复用导致的坑</h3><hr>]]></content>
    
    <summary type="html">
    
      &lt;p class=&quot;description&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://&quot; alt=&quot;&quot; style=&quot;width:100%&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="iOS" scheme="http://blogwenbo.com/categories/iOS/"/>
    
    
      <category term="iOS" scheme="http://blogwenbo.com/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>iOS 13适配小记</title>
    <link href="http://blogwenbo.com/2019/09/29/iOS-13%E9%80%82%E9%85%8D%E5%B0%8F%E8%AE%B0/"/>
    <id>http://blogwenbo.com/2019/09/29/iOS-13适配小记/</id>
    <published>2019-09-29T15:23:47.000Z</published>
    <updated>2020-03-30T14:09:57.145Z</updated>
    
    <content type="html"><![CDATA[<p class="description"></p><p><img src="https://" alt="" style="width:100%"></p><a id="more"></a><h3 id="一、模态跳转适配"><a href="#一、模态跳转适配" class="headerlink" title="一、模态跳转适配"></a>一、模态跳转适配</h3><h3 id="二、暗黑模式适配"><a href="#二、暗黑模式适配" class="headerlink" title="二、暗黑模式适配"></a>二、暗黑模式适配</h3><h3 id="三、UITabbar选中颜色调整"><a href="#三、UITabbar选中颜色调整" class="headerlink" title="三、UITabbar选中颜色调整"></a>三、UITabbar选中颜色调整</h3><h3 id="四、KVC设置私有属性适配"><a href="#四、KVC设置私有属性适配" class="headerlink" title="四、KVC设置私有属性适配"></a>四、KVC设置私有属性适配</h3><h3 id="五、DeviceToken获取方式适配"><a href="#五、DeviceToken获取方式适配" class="headerlink" title="五、DeviceToken获取方式适配"></a>五、DeviceToken获取方式适配</h3><h3 id="六、状态栏适配"><a href="#六、状态栏适配" class="headerlink" title="六、状态栏适配"></a>六、状态栏适配</h3><hr>]]></content>
    
    <summary type="html">
    
      Xcode自动更新到11了，用新版Xcode跑一下工程，发现出现各种奇怪的问题，无奈之下，只有做iOS 13适配工作了，文章里也是我负责项目遇到的一些问题，修改的同时做下记录。
    
    </summary>
    
      <category term="iOS" scheme="http://blogwenbo.com/categories/iOS/"/>
    
    
      <category term="Xcode" scheme="http://blogwenbo.com/tags/Xcode/"/>
    
      <category term="iOS 13" scheme="http://blogwenbo.com/tags/iOS-13/"/>
    
  </entry>
  
  <entry>
    <title>iOS优秀Swift开源库整理，了解一下</title>
    <link href="http://blogwenbo.com/2019/09/03/iOS%E4%BC%98%E7%A7%80Swift%E5%BC%80%E6%BA%90%E5%BA%93%E6%95%B4%E7%90%86%EF%BC%8C%E4%BA%86%E8%A7%A3%E4%B8%80%E4%B8%8B/"/>
    <id>http://blogwenbo.com/2019/09/03/iOS优秀Swift开源库整理，了解一下/</id>
    <published>2019-09-03T15:07:10.000Z</published>
    <updated>2020-05-25T13:09:12.570Z</updated>
    
    <content type="html"><![CDATA[<p class="description"></p><a id="more"></a><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><blockquote><p>自己从事iOS开发工作接近两年左右的时间了，在自己工作之余，收集整理了一些优秀的三方开源框架，自己整理的这些三方开源库涵盖了iOS开发面很多方面的知识。非常感谢这些开源库的作者们，正是因为这些库，提高了我们的开发效率，同样也是我们学习进步的源泉。现将这个整理工程文件分享出来，希望能给需要的朋友一些帮助，同时也自己也做下收集记录。</p></blockquote><p><strong>Github：</strong><br><a href="https://github.com/wenmobo/WBCollectSwfitThirdLib" target="_blank" rel="noopener">WBCollectSwfitThirdLib</a></p><h3 id="Swift三方开源库"><a href="#Swift三方开源库" class="headerlink" title="Swift三方开源库"></a>Swift三方开源库</h3><h4 id="动画"><a href="#动画" class="headerlink" title="动画"></a>动画</h4><table><thead><tr><th>开源库名</th><th>简介</th><th>推荐指数</th></tr></thead><tbody><tr><td><a href="https://github.com/ninjaprox/NVActivityIndicatorView" target="_blank" rel="noopener">NVActivityIndicatorView</a></td><td>精美加载loading动画</td><td>✨✨✨✨</td></tr></tbody></table><h4 id="网络请求"><a href="#网络请求" class="headerlink" title="网络请求"></a>网络请求</h4><table><thead><tr><th>开源库名</th><th>简介</th><th>推荐指数</th></tr></thead><tbody><tr><td><a href="https://github.com/Alamofire/Alamofire" target="_blank" rel="noopener">Alamofire</a></td><td>优雅的网络请求库</td><td>✨✨✨✨✨</td></tr></tbody></table><h4 id="占位图"><a href="#占位图" class="headerlink" title="占位图"></a>占位图</h4><table><thead><tr><th>开源库名</th><th>简介</th><th>推荐指数</th></tr></thead><tbody><tr><td><a href="https://github.com/Juanpe/SkeletonView" target="_blank" rel="noopener">SkeletonView</a></td><td>数据加载等待占位图</td><td>✨✨✨✨</td></tr></tbody></table><h4 id="二维码扫描"><a href="#二维码扫描" class="headerlink" title="二维码扫描"></a>二维码扫描</h4><table><thead><tr><th>开源库名</th><th>简介</th><th>推荐指数</th></tr></thead><tbody><tr><td><a href="https://github.com/EyreFree/EFQRCode" target="_blank" rel="noopener">EFQRCode</a></td><td>二维码扫描</td><td>✨✨✨✨</td></tr></tbody></table><h4 id="布局框架"><a href="#布局框架" class="headerlink" title="布局框架"></a>布局框架</h4><table><thead><tr><th>开源库名</th><th>简介</th><th>推荐指数</th></tr></thead><tbody><tr><td><a href="https://github.com/SnapKit/SnapKit" target="_blank" rel="noopener">SnapKit</a></td><td>苹果原生布局AutoLayout封装，类似Masonry</td><td>✨✨✨✨✨</td></tr><tr><td><a href="https://github.com/youngsoft/TangramKit" target="_blank" rel="noopener">TangramKit</a></td><td>TangramKit的内核是基于对UIView的layoutSubviews方法的重载以及对子视图的bounds和center属性的设置而实现的。</td><td>✨✨✨✨</td></tr></tbody></table><h4 id="图表绘制"><a href="#图表绘制" class="headerlink" title="图表绘制"></a>图表绘制</h4><table><thead><tr><th>开源库名</th><th>简介</th><th>推荐指数</th></tr></thead><tbody><tr><td><a href="https://github.com/danielgindi/Charts" target="_blank" rel="noopener">Charts</a></td><td>图标配置</td><td>✨✨✨✨✨</td></tr></tbody></table><h4 id="截屏"><a href="#截屏" class="headerlink" title="截屏"></a>截屏</h4><table><thead><tr><th>开源库名</th><th>简介</th><th>推荐指数</th></tr></thead><tbody><tr><td><a href="https://github.com/startry/SwViewCapture" target="_blank" rel="noopener">SwViewCapture</a></td><td>UIView，UIScrollView截屏</td><td>✨✨✨</td></tr></tbody></table><h4 id="提示框架"><a href="#提示框架" class="headerlink" title="提示框架"></a>提示框架</h4><table><thead><tr><th>开源库名</th><th>简介</th><th>推荐指数</th></tr></thead><tbody><tr><td><a href="https://github.com/hyperoslo/Whisper" target="_blank" rel="noopener">Whisper</a></td><td>Whisper is a component that will make the task of display messages and in-app notifications simple</td><td>✨✨✨✨</td></tr></tbody></table><h4 id="图片加载"><a href="#图片加载" class="headerlink" title="图片加载"></a>图片加载</h4><table><thead><tr><th>开源库名</th><th>简介</th><th>推荐指数</th></tr></thead><tbody><tr><td><a href="https://github.com/onevcat/Kingfisher" target="_blank" rel="noopener">Kingfisher</a></td><td>onevcat大神写的一个图片下载与缓存框架</td><td>✨✨✨✨✨</td></tr><tr><td><a href="https://github.com/Silence-GitHub/BBWebImage" target="_blank" rel="noopener">BBWebImage</a></td><td>高性能图片加载框架</td><td>✨✨✨✨</td></tr></tbody></table><h4 id="转场动画"><a href="#转场动画" class="headerlink" title="转场动画"></a>转场动画</h4><table><thead><tr><th>开源库名</th><th>简介</th><th>推荐指数</th></tr></thead><tbody><tr><td><a href="https://github.com/HeroTransitions/Hero" target="_blank" rel="noopener">Hero</a></td><td>控制器转场动画</td><td>✨✨✨✨✨</td></tr></tbody></table><h4 id="JSON解析"><a href="#JSON解析" class="headerlink" title="JSON解析"></a>JSON解析</h4><table><thead><tr><th>开源库名</th><th>简介</th><th>推荐指数</th></tr></thead><tbody><tr><td><a href="https://github.com/tristanhimmelman/AlamofireObjectMapper" target="_blank" rel="noopener">AlamofireObjectMapper</a></td><td>JSON转模型</td><td>✨✨✨✨</td></tr><tr><td><a href="https://github.com/alibaba/HandyJSON" target="_blank" rel="noopener">HandyJSON</a></td><td>阿里巴巴开源的一个JSON转模型框架，使用相当简便</td><td>✨✨✨✨</td></tr><tr><td><a href="https://github.com/tristanhimmelman/ObjectMapper" target="_blank" rel="noopener">ObjectMapper</a></td><td>JSON转模型</td><td>✨✨✨✨</td></tr><tr><td><a href="https://github.com/SwiftyJSON/SwiftyJSON" target="_blank" rel="noopener">SwiftyJSON</a></td><td>JSON处理</td><td>✨✨✨✨✨</td></tr><tr><td><a href="https://github.com/kakaopensource/KakaJSON" target="_blank" rel="noopener">KakaJSON</a></td><td>MJ大神最近开源的一款JSON与model快速转换框架</td><td>✨✨✨✨</td></tr></tbody></table><h4 id="Log工具"><a href="#Log工具" class="headerlink" title="Log工具"></a>Log工具</h4><table><thead><tr><th>开源库名</th><th>简介</th><th>推荐指数</th></tr></thead><tbody><tr><td><a href="https://github.com/CocoaLumberjack/CocoaLumberjack" target="_blank" rel="noopener">CocoaLumberjack</a></td><td>控制台输出log框架</td><td>✨✨✨✨✨</td></tr></tbody></table><h4 id="分页控件"><a href="#分页控件" class="headerlink" title="分页控件"></a>分页控件</h4><table><thead><tr><th>开源库名</th><th>简介</th><th>推荐指数</th></tr></thead><tbody><tr><td><a href="https://github.com/ChiliLabs/CHIPageControl" target="_blank" rel="noopener">CHIPageControl</a></td><td>A set of cool animated page controls written in Swift to replace boring UIPageControl.</td><td>✨✨✨</td></tr></tbody></table><h3 id="三、结语"><a href="#三、结语" class="headerlink" title="三、结语"></a>三、结语</h3><blockquote><p>上面这些三方开源库按照自己的理解分类整理了一遍，这些库也是自己现在所了解到的，当然还有很多优秀的三方库自己也未发现和接触，我以后会不断在这篇博客中更新优秀的三方开源库。</p></blockquote><hr>]]></content>
    
    <summary type="html">
    
      自己从事iOS开发工作接近两年左右的时间了，在自己工作之余，收集整理了一些优秀的三方开源框架，自己整理的这些三方开源库涵盖了iOS开发面很多方面的知识。非常感谢这些开源库的作者们，正是因为这些库，提高了我们的开发效率，同样也是我们学习进步的源泉。现将这个整理工程文件分享出来，希望能给需要的朋友一些帮助，同时也自己也做下收集记录。
    
    </summary>
    
      <category term="iOS" scheme="http://blogwenbo.com/categories/iOS/"/>
    
    
      <category term="iOS" scheme="http://blogwenbo.com/tags/iOS/"/>
    
      <category term="GitHub" scheme="http://blogwenbo.com/tags/GitHub/"/>
    
      <category term="Swift" scheme="http://blogwenbo.com/tags/Swift/"/>
    
      <category term="RxSwift" scheme="http://blogwenbo.com/tags/RxSwift/"/>
    
      <category term="Alamofire" scheme="http://blogwenbo.com/tags/Alamofire/"/>
    
  </entry>
  
  <entry>
    <title>MAC切换host</title>
    <link href="http://blogwenbo.com/2019/06/03/MAC%E5%88%87%E6%8D%A2host/"/>
    <id>http://blogwenbo.com/2019/06/03/MAC切换host/</id>
    <published>2019-06-03T13:19:12.000Z</published>
    <updated>2020-03-30T14:09:57.143Z</updated>
    
    <content type="html"><![CDATA[<p class="description"></p><p>在日常开发中，有时我们需要切换不同的开发环境测试，切换多个hosts，下面介绍MAC电脑如何切换hosts。</p><a id="more"></a><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>在最初接触到iOS开发，切换正式与测试网络环境是通过切换网络地址域名的方式，本地定义一个宏定义实现域名的切换，这种方式确实比较的方便。后来自己又了解了另外一种切换网络环境的方式，就是切换host，在工程代码里面不需要做额外的配置。最开始一直使用同事配置好的环境，但后来发现有时还是不太方便，于是在自己的电脑也倒腾了一下，最后也能成功在真机上切换到正式测试环境，期间也遇到许多坑，下面介绍一下如何配置。</p><h3 id="SwitchHosts介绍与安装"><a href="#SwitchHosts介绍与安装" class="headerlink" title="SwitchHosts介绍与安装"></a>SwitchHosts介绍与安装</h3><h4 id="官方网址"><a href="#官方网址" class="headerlink" title="官方网址"></a><a href="https://oldj.github.io/SwitchHosts/#cn" target="_blank" rel="noopener">官方网址</a></h4><h4 id="GitHub"><a href="#GitHub" class="headerlink" title="GitHub"></a><a href="https://github.com/oldj/SwitchHosts/" target="_blank" rel="noopener">GitHub</a></h4><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><ul><li><p>通过终端命令安装</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew cask install switchhosts</span><br></pre></td></tr></table></figure></li><li><p>安装成功之后</p><p><img src="https://ww3.sinaimg.cn/large/006tNc79ly1g3obhfr0klj318i0rk41r.jpg" alt=""></p></li><li><p>将需要添加的host粘贴到指定的host名下即可，打开开关即可切换(<strong>注意：这里电脑的host是可以切换成功，当你用真机连上电脑共享出的wifi，发现还是没有切换，这时需要用到Dnsmasq工具</strong>)</p></li></ul><h3 id="Dnsmasq安装与配置"><a href="#Dnsmasq安装与配置" class="headerlink" title="Dnsmasq安装与配置"></a>Dnsmasq安装与配置</h3><blockquote><p>DNSmasq是一个小巧且方便地用于配置<a href="https://baike.baidu.com/item/DNS/427444" target="_blank" rel="noopener">DNS</a>和<a href="https://baike.baidu.com/item/DHCP" target="_blank" rel="noopener">DHCP</a>的工具，适用于小型<a href="https://baike.baidu.com/item/网络/143243" target="_blank" rel="noopener">网络</a>，它提供了DNS功能和可选择的DHCP功能。它服务那些只在本地适用的域名，这些域名是不会在全球的DNS服务器中出现的。DHCP服务器和DNS服务器结合，并且允许DHCP分配的地址能在DNS中正常解析，而这些DHCP分配的地址和相关命令可以配置到每台<a href="https://baike.baidu.com/item/主机/455151" target="_blank" rel="noopener">主机</a>中，也可以配置到一台核心设备中（比如路由器），DNSmasq支持静态和动态两种DHCP配置方式。</p><p>​                                                                                                                                                        —百度百科</p></blockquote><h4 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew link dnsmasq</span><br></pre></td></tr></table></figure><h4 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">resolv-file=/usr/local/etc/resolv.dnsmasq.conf</span><br><span class="line">strict-order</span><br><span class="line">listen-address=127.0.0.1</span><br><span class="line">addn-hosts=/usr/local/etc/dnsmasq.hosts</span><br><span class="line">conf-dir=/usr/local/etc/dnsmasq.d</span><br><span class="line">cache-size=10000</span><br></pre></td></tr></table></figure><p>名词解释：</p><ul><li><code>resolv-file</code>     上游DNS服务配置</li><li><code>strict-order</code>    严格按照上述文件中的配置顺序执行</li><li><code>listen-address</code> 监听请求的地址（127.0.0.1：仅本机，0.0.0.0：任何人）</li><li><code>addn-hosts</code>      一些你需要的解析结果</li><li><code>conf-dir</code>        其他配置路径</li><li><code>cache-size</code>      缓存大小</li></ul><h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">//停止服务</span><br><span class="line">sudo brew services stop dnsmasq</span><br><span class="line">//重启服务</span><br><span class="line">sudo brew services restart dnsmasq</span><br><span class="line">//刷新DNS缓存</span><br><span class="line">sudo killall -HUP mDNSResponder</span><br></pre></td></tr></table></figure><p><strong>注意：点击SwitchHosts切换后，如果发现未切换到想要的环境可按顺序执行以上命令</strong></p><h4 id="手机配置"><a href="#手机配置" class="headerlink" title="手机配置"></a>手机配置</h4><p>删除默认DNS，添加电脑的IP地址，如下图所示：</p><p><img src="https://ww4.sinaimg.cn/large/006tNc79ly1g3oboijx8cj30u01hc0ve.jpg" alt=""></p><p>最后打开手机访问发现已经连上测试环境了，超开心吧O(∩_∩)O~~。</p>]]></content>
    
    <summary type="html">
    
      在日常开发中，有时我们需要切换不同的开发环境测试，切换多个hosts，下面介绍MAC电脑如何切换hosts。
    
    </summary>
    
      <category term="MAC" scheme="http://blogwenbo.com/categories/MAC/"/>
    
    
      <category term="iOS" scheme="http://blogwenbo.com/tags/iOS/"/>
    
      <category term="MAC" scheme="http://blogwenbo.com/tags/MAC/"/>
    
  </entry>
  
  <entry>
    <title>iOS持续集成与自动打包</title>
    <link href="http://blogwenbo.com/2018/12/23/iOS%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90%E4%B8%8E%E8%87%AA%E5%8A%A8%E6%89%93%E5%8C%85/"/>
    <id>http://blogwenbo.com/2018/12/23/iOS持续集成与自动打包/</id>
    <published>2018-12-23T15:36:03.000Z</published>
    <updated>2020-03-30T14:09:57.148Z</updated>
    
    <content type="html"><![CDATA[<p class="description"></p><a id="more"></a><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote><p>从事iOS开发也有一段时间了，实习的时候自己就了解了iOS打包分发的一些方式，自己也写了一篇博客<a href="https://www.jianshu.com/p/fc6721cf5c7f" target="_blank" rel="noopener">iOS打测试包与分发测试</a>,介绍了如何打测试包以及上传相关的分发平台，也提到了脚本自动打包。现在自己负责几个项目的维护与开发工作，发现打一个包出来到上传到iTunes Connect上实在是太慢了，步骤也多，比较的耗时间，也不够自动化。后面自己了解了Jenkins持续构建工具，和fastlane自动打包工具，能够提高打包效率，下面开始介绍如何使用这些工具吧。</p></blockquote><h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><ul><li><h2 id="fastlane"><a href="#fastlane" class="headerlink" title="fastlane"></a>fastlane</h2></li><li><h2 id="Jenkins"><a href="#Jenkins" class="headerlink" title="Jenkins"></a>Jenkins</h2></li></ul><h1 id="fastlane-1"><a href="#fastlane-1" class="headerlink" title="fastlane"></a>fastlane</h1><p><img src="https://ws1.sinaimg.cn/large/006tNbRwly1fygs2adp2jj31ub0u0k95.jpg" alt=""></p><p>The easiest way to build and release mobile apps.fastlane* handles tedious tasks so you don’t have to.</p><p>一种快捷的方式去构建和发布手机APP，它可以帮我们处理冗长无味的工作。<br>最新公司项目打包频率增加，每次打包上传到三方分发平台或testflight上，都要耽搁好长的时间，我就在想有没有一种好的方式，帮我省去打包繁琐的过程，而是通过脚本自动打包上产到相应的平台，于是我就研究了一下fastlane工具，这篇博客主要是做相关记录，方便自己以后查阅，同时也希望能给需要的朋友一些参考帮助。</p><h3 id="相关地址"><a href="#相关地址" class="headerlink" title="相关地址"></a>相关地址</h3><ul><li>GitHub地址：<a href="https://github.com/fastlane/fastlane" target="_blank" rel="noopener">fastlane</a></li><li>官方地址：<a href="https://fastlane.tools/" target="_blank" rel="noopener">fastlane.tools</a></li><li>文档地址：<a href="https://docs.fastlane.tools/" target="_blank" rel="noopener">官方文档</a></li></ul><h3 id="安装fastlane"><a href="#安装fastlane" class="headerlink" title="安装fastlane"></a>安装fastlane</h3><ul><li><p>安装command line tools</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xcode-select --install</span><br></pre></td></tr></table></figure></li><li><p>Install fastlane</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew cask install fastlane</span><br></pre></td></tr></table></figure></li><li><p>切换到工程目录，初始化fastlane</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd [工程目录]</span><br><span class="line"></span><br><span class="line">fastlane init</span><br></pre></td></tr></table></figure></li></ul><p>初始化完成之后，工程目录大概是这个样子：</p><p><img src="https://ws2.sinaimg.cn/large/006tNbRwly1fygra84uobj30oa0jmacm.jpg" alt=""></p><h3 id="配置相关打包脚本"><a href="#配置相关打包脚本" class="headerlink" title="配置相关打包脚本"></a>配置相关打包脚本</h3><p>自己也是最近才熟悉了解fastlane相关命令的使用，我现在配置了打包到上传App Store和上传到Testflight上的脚本。我们可以通过不同的脚本配置，打出不同环境的ipa包，也可以直接通过fastlane配置上传APP相关信息到iTunes Connect上，比如应用截图，APP提交审核时一些信息等，自己暂时还没配置上传信息这些，下面只介绍我用到的吧。</p><ul><li><p>上传App Store</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">default_platform(<span class="symbol">:ios</span>)</span><br><span class="line"></span><br><span class="line">platform <span class="symbol">:ios</span> <span class="keyword">do</span></span><br><span class="line">desc <span class="string">"upload appstore lane"</span></span><br><span class="line">  lane <span class="symbol">:release</span> <span class="keyword">do</span></span><br><span class="line">    <span class="comment"># add actions here: https://docs.fastlane.tools/actions</span></span><br><span class="line">    <span class="comment">#pod资源更新</span></span><br><span class="line">    cocoapods</span><br><span class="line"></span><br><span class="line">    <span class="comment">#增加build版本号,需要先配置build setting</span></span><br><span class="line">    <span class="comment">#increment_build_number</span></span><br><span class="line">    <span class="comment">#自动增加build号</span></span><br><span class="line">    increment_build_number_in_plist</span><br><span class="line"></span><br><span class="line">    <span class="comment">#scheme_name</span></span><br><span class="line">    scheme_name = <span class="string">"xxxx"</span></span><br><span class="line">    <span class="comment">#workspace_name</span></span><br><span class="line">    workspace_name  = <span class="string">"xxxx.xcworkspace"</span></span><br><span class="line">    <span class="comment">#导出ipa路径</span></span><br><span class="line">    output_directory = <span class="string">"fastlanebuild_ipa"</span></span><br><span class="line">    <span class="comment">#导出名称 </span></span><br><span class="line">    output_name = <span class="string">"<span class="subst">#&#123;scheme_name&#125;</span>_<span class="subst">#&#123;Time.now.strftime(<span class="string">'%Y%m%d%H%M%S'</span>)&#125;</span>.ipa"</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">#打包,别名build_app</span></span><br><span class="line">    gym(</span><br><span class="line">         <span class="comment">#代码签名方式,"app-store", "ad-hoc", "package", "enterprise", "development", "developer-id"]</span></span><br><span class="line">        <span class="symbol">export_method:</span> <span class="string">"app-store"</span>,</span><br><span class="line">        <span class="symbol">export_xcargs:</span> <span class="string">"-allowProvisioningUpdates"</span>,</span><br><span class="line">        <span class="symbol">scheme:</span> scheme_name,</span><br><span class="line">        <span class="symbol">workspace:</span> workspace_name,</span><br><span class="line">        <span class="comment">#build之前先clean，减小包体积</span></span><br><span class="line">        <span class="symbol">clean:</span> <span class="literal">true</span>,</span><br><span class="line">        <span class="symbol">output_directory:</span> output_directory,</span><br><span class="line">        <span class="symbol">output_name:</span> output_name,</span><br><span class="line">        <span class="symbol">include_bitcode:</span> <span class="literal">false</span></span><br><span class="line">        )</span><br><span class="line">    <span class="comment">#发布到AppStore</span></span><br><span class="line">    upload_to_app_store(<span class="symbol">skip_metadata:</span> <span class="literal">true</span>,</span><br><span class="line">                        <span class="comment">#忽略上传截图</span></span><br><span class="line">                        <span class="symbol">skip_screenshots:</span> <span class="literal">true</span>,</span><br><span class="line">                        <span class="symbol">force:</span> <span class="literal">true</span>)</span><br><span class="line">  <span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>上传到App Store主要用到了gym，upload_to_app_store命令（他们都有别名，官方文档有描述），他们的配置参数都可以在fastlane官方文档里查到，通过简单的几行的脚本配置，就能打包上传App Store啦，是不是很方便easy！</p><ul><li><p>上传Testflight</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">default_platform(<span class="symbol">:ios</span>)</span><br><span class="line"></span><br><span class="line">platform <span class="symbol">:ios</span> <span class="keyword">do</span></span><br><span class="line">desc <span class="string">"upload to testflight lane"</span></span><br><span class="line">  lane <span class="symbol">:beta</span> <span class="keyword">do</span></span><br><span class="line">    <span class="comment">#保证推送证书可用</span></span><br><span class="line">    get_push_certificate</span><br><span class="line">    <span class="comment">#pod资源更新</span></span><br><span class="line">    cocoapods</span><br><span class="line">    <span class="comment">#代码签名方式,"app-store", "ad-hoc", "package", "enterprise", "development", "developer-id"]</span></span><br><span class="line">    <span class="comment">#sync_code_signing(type: "appstore")</span></span><br><span class="line">    <span class="comment">#自动增加build号</span></span><br><span class="line">    increment_build_number_in_plist</span><br><span class="line">    <span class="comment">#scheme_name</span></span><br><span class="line">    scheme_name = <span class="string">"xxxx"</span></span><br><span class="line">    <span class="comment">#workspace_name</span></span><br><span class="line">    workspace_name  = <span class="string">"xxx.xcworkspace"</span></span><br><span class="line">    <span class="comment">#导出ipa路径</span></span><br><span class="line">    output_directory = <span class="string">"fastlanebuild_ipa"</span></span><br><span class="line">    <span class="comment">#building app</span></span><br><span class="line">    build_app(<span class="symbol">scheme:</span> scheme_name,</span><br><span class="line">              <span class="symbol">workspace:</span> workspace_name,</span><br><span class="line">              <span class="symbol">include_bitcode:</span> <span class="literal">false</span>,</span><br><span class="line">              <span class="symbol">clean:</span> <span class="literal">true</span>,</span><br><span class="line">              <span class="symbol">output_name:</span> <span class="string">"<span class="subst">#&#123;scheme_name&#125;</span>_<span class="subst">#&#123;Time.now.strftime(<span class="string">'%Y%m%d%H%M%S'</span>)&#125;</span>.ipa"</span>,</span><br><span class="line">              <span class="symbol">output_directory:</span> output_directory,</span><br><span class="line">              <span class="symbol">export_method:</span> <span class="string">"app-store"</span>)</span><br><span class="line">    <span class="comment">#上传到Testflight</span></span><br><span class="line">    upload_to_testflight(<span class="symbol">skip_waiting_for_build_processing:</span> <span class="literal">true</span>)</span><br><span class="line">    <span class="comment">#slack(message: "Successfully distributed a new beta build")</span></span><br><span class="line">  <span class="keyword">end</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><p>脚本配置和上传App Store差不太多，唯一不同是用到了upload_to_testflight命令。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><blockquote><p>自己能使用fastlane正常打出ipa包来，倒腾了一两天，网上介绍fastlane使用资料也是一搜一大堆，但大部分介绍都不是很全，最全的资料还是官方文档，这次的折腾也给了我很多启示，要学会看官方文档资料，现在也只用到了fastlane提供的部分功能，遇到的坑不是很多，等以后有更深入的使用，在更新博客与大家分享。</p></blockquote><h1 id="Jenkins-1"><a href="#Jenkins-1" class="headerlink" title="Jenkins"></a>Jenkins</h1><p><img src="https://ws2.sinaimg.cn/large/006tNbRwly1fygs1hjn5vj31x00myq9g.jpg" alt=""></p><blockquote><p>Jenkins is a self-contained, open source automation server which can be used to automate all sorts of tasks related to building, testing, and delivering or deploying software.</p><p>Jenkins can be installed through native system packages, Docker, or even run standalone by any machine with a Java Runtime Environment (JRE) installed.</p></blockquote><p>怎么说呢，我也不太清楚自己是怎么接触到Jenkins持续集成工具的，当我有最初由持续集成概念的时候应该是我学习cocoapods制作私有共有库的时候，有一个GitHub的徽标是表示项目持续集成状态，叫<a href="https://travis-ci.org/" target="_blank" rel="noopener">Travis CI</a>，貌似是开源项目免费，私有项目需要收费。自己那时候发布的pod库Travis CI没有通过，自己倒腾好久了才让这个徽标变为绿色。好了，不闲聊了，关于Jenkins介绍，我这里也不做介绍了，网上资料也是一搜一大堆，我只介绍集成和使用关键的几个步骤吧！</p><h3 id="相关地址-1"><a href="#相关地址-1" class="headerlink" title="相关地址"></a>相关地址</h3><ul><li>GitHub：<a href="https://github.com/jenkinsci/jenkins" target="_blank" rel="noopener">jenkins</a></li><li>官方网址：<a href="https://jenkins.io/" target="_blank" rel="noopener">https://jenkins.io/</a></li></ul><h3 id="安装Java环境（MAC）"><a href="#安装Java环境（MAC）" class="headerlink" title="安装Java环境（MAC）"></a>安装Java环境（MAC）</h3><ul><li>因为Jenkins是基于Java语言开发的，首先要检查自己的电脑是否安装Java。没有安装会报以下错误</li></ul><p><img src="https://ws3.sinaimg.cn/large/006tNbRwly1fygsr4wnd8j30vc090taq.jpg" alt=""></p><p>错误已经给出提示了，按照提示安装java8吧：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew cask install homebrew/cask-versions/java8</span><br></pre></td></tr></table></figure><p>通过命令<code>java -version</code>查看是否安装成功。</p><ul><li>安装成功之后配置一下环境变量：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">#查看java home 目录</span><br><span class="line">/usr/libexec/java_home</span><br><span class="line">输出是</span><br><span class="line">/Library/Java/JavaVirtualMachines/jdk1.8.0_192.jdk/Contents/Home</span><br><span class="line"></span><br><span class="line">#之后编辑bash_profile</span><br><span class="line">vi .bash_profile</span><br><span class="line"></span><br><span class="line">#编辑以下内容</span><br><span class="line">export JAVA_HOME=/Library/Java/JavaVirtualMachines/jdk1.8.0_192.jdk/Contents/Home</span><br><span class="line">export PATH=$JAVA_HOME/bin:$PATH  </span><br><span class="line">export CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar</span><br><span class="line"></span><br><span class="line">:wq</span><br><span class="line">保存即可</span><br></pre></td></tr></table></figure><h3 id="安装Jenkin"><a href="#安装Jenkin" class="headerlink" title="安装Jenkin"></a>安装Jenkin</h3><ul><li>Jenkins安装方式有很多，可以在官方下载安装包安装，也可以通过brew安装，但我个人更推荐通过brew：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install jenkins</span><br></pre></td></tr></table></figure><p>安装成功之后，会默认打开网址<a href="http://localhost:8080，如果没有打开我们在终端手动启动Jenkins" target="_blank" rel="noopener">http://localhost:8080，如果没有打开我们在终端手动启动Jenkins</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jenkins</span><br></pre></td></tr></table></figure><p>第一次登录需要用初始化密码，将初始化密码拷贝进去就可以登录了，之后需要安装一些默认的插件，等待安装完成就可以进入主界面啦。</p><h3 id="项目创建"><a href="#项目创建" class="headerlink" title="项目创建"></a>项目创建</h3><ul><li><p>创建项目（Create New Job）</p><p><img src="https://ws3.sinaimg.cn/large/006tNbRwly1fyh1dmhh2nj31xs0pgtdp.jpg" alt=""></p><p><img src="https://ws2.sinaimg.cn/large/006tNbRwly1fyh1e6hitnj31q20u046x.jpg" alt=""></p></li></ul><h3 id="常规设置（general）"><a href="#常规设置（general）" class="headerlink" title="常规设置（general）"></a>常规设置（general）</h3><ul><li>丢弃旧的构建</li></ul><p><img src="https://ws1.sinaimg.cn/large/006tNbRwly1fyh1wi0sxfj31qp0u0456.jpg" alt=""></p><ul><li><p>参数化构建过程</p><p>如果我们项目用的git托管，这时候可能会有多个分支，在构建的时候我们需要选择一个分支。这功能我们需要装一个插件<strong><a href="https://wiki.jenkins-ci.org/display/JENKINS/Git+Parameter+Plugin" target="_blank" rel="noopener">Git Parameter</a></strong>，然后做以下配置：</p><p><img src="https://ws4.sinaimg.cn/large/006tNbRwly1fyh27arftqj31dz0u0dkr.jpg" alt=""></p></li></ul><h3 id="源代码管理（Source-Code-Management）"><a href="#源代码管理（Source-Code-Management）" class="headerlink" title="源代码管理（Source Code Management）"></a>源代码管理（Source Code Management）</h3><ul><li>因为我的项目是用git托管的，这里源代码管理我选的git</li></ul><p><img src="https://ws1.sinaimg.cn/large/006tNbRwly1fyh2d6gsq6j31dx0u07an.jpg" alt=""></p><ul><li><p>Build Trigger</p><p>这里是指怎么触发构建操作，一搬选择定时构建和轮询构建，看情况而定，这里我暂时都没有勾选，需要注意的是时间书写的格式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#每天下午18：00构建一次</span><br><span class="line">H 18 * * *</span><br><span class="line"></span><br><span class="line">#每5分钟构建一次</span><br><span class="line">H/5 * * * *</span><br></pre></td></tr></table></figure><p><img src="https://ws4.sinaimg.cn/large/006tNbRwly1fyh2kfsk7dj31b60u0jwq.jpg" alt=""></p></li></ul><h3 id="构建环境（Build-Environment）"><a href="#构建环境（Build-Environment）" class="headerlink" title="构建环境（Build Environment）"></a>构建环境（Build Environment）</h3><p>暂时没有用到，不做介绍啦。</p><h3 id="构建（Build）"><a href="#构建（Build）" class="headerlink" title="构建（Build）"></a>构建（Build）</h3><p>构建完成之后执行的操作，有如下选项</p><p><img src="https://ws4.sinaimg.cn/large/006tNbRwly1fyh2nuyi25j31g80hejt9.jpg" alt=""></p><p>这里我认为是比较重要的地方啦，build成功之后，这里我们可已选择执行shell打包脚本，根据脚本配置导出ipa包，也可以执行fastlane命令上传App Store，也可以上传蒲公英或fir.im三方分发平台。</p><ul><li><p>shell打包脚本</p><p>用苹果提供的原生打包命令编写shell，这里我没有采用这种方式啦，网上也可以搜到相关的脚本，就不做介绍了。</p></li><li><p>执行fastlane命令上传App Store</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fastlane release</span><br></pre></td></tr></table></figure><p><strong>release</strong>是之前介绍fastlane的时候编写的一个上传App Store的脚本，这里我们也可以上传Testflight。</p></li><li><p>上传蒲公英或fir.im三方分发平台</p><p>这里我做了上传蒲公英平台的操作，蒲公英文档也有介绍相关的命令<a href="https://www.pgyer.com/doc/view/jenkins_plugin，我也是通过插件的方式，也可以通过命令。" target="_blank" rel="noopener">https://www.pgyer.com/doc/view/jenkins_plugin，我也是通过插件的方式，也可以通过命令。</a></p><p><img src="https://ws4.sinaimg.cn/large/006tNbRwly1fyh307sh6fj31gi0hg40l.jpg" alt=""></p><ul><li>参数配置，配置好如下两个参数就可以自动帮我们上传到蒲公英平台啦，是不是很方便</li></ul></li></ul><p><img src="https://ws2.sinaimg.cn/large/006tNbRwly1fyh33asqc7j31f80gq425.jpg" alt=""></p><h3 id="Post-build-Actions"><a href="#Post-build-Actions" class="headerlink" title="Post-build Actions"></a>Post-build Actions</h3><p>构建完成之后的操作，实用的就是发邮件通知构建结果，暂时不做介绍，有兴趣的朋友可以自行研究。</p><h3 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h3><blockquote><p>总算介绍完成了，从零开始倒腾公司的项目，到支持Jenkins持续集成以及后续的操作，中间过程还是经历了很多的坑，但最后的结果还是令自己满意的，自己从中也学到了许多新知识，还是自己太“懒”吧，不然怎么会不折不休倒腾那么久，哈哈。现在打包还是比之前方便了许多，也省去了许多重复乏味的工作。如果文章中有描述不对的地方，还请大家不吝批评指正，自己也是最近才实践自动打包相关的工具，希望能和大家多多学习交流。</p></blockquote><h1 id="问题解决"><a href="#问题解决" class="headerlink" title="问题解决"></a>问题解决</h1><ul><li><p>自己设置账号密码无法登陆</p><p>去.jenkins目录下，修改config.xml参数，改为false就好了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;useSecurity&gt;false&lt;/useSecurity&gt;</span><br></pre></td></tr></table></figure></li></ul><h1 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h1><ul><li><a href="https://www.jianshu.com/p/d5bfa5c4d86a" target="_blank" rel="noopener">Max OS上Java环境变量配置</a></li><li><a href="https://www.pgyer.com/doc/view/jenkins_plugin" target="_blank" rel="noopener">使用 Jenkins 插件上传应用到蒲公英</a></li><li><a href="https://blog.csdn.net/u012076316/article/details/52056107" target="_blank" rel="noopener">jenkins构建时支持git选择分支</a></li><li><p><a href="https://juejin.im/post/5a7b10bb6fb9a0636263bfd5" target="_blank" rel="noopener">iOS 持续交付之 Fastlane</a></p></li><li><p><a href="https://www.jianshu.com/p/41ecb06ae95f" target="_blank" rel="noopener">手把手教你利用Jenkins持续集成iOS项目</a></p></li></ul>]]></content>
    
    <summary type="html">
    
      从事iOS开发也有一段时间了，实习的时候自己就了解了iOS打包分发的一些方式，自己也写了一篇博客[iOS打测试包与分发测试](https://www.jianshu.com/p/fc6721cf5c7f),介绍了如何打测试包以及上传相关的分发平台，也提到了脚本自动打包。现在自己负责几个项目的维护与开发工作，发现打一个包出来到上传到iTunes Connect上实在是太慢了，步骤也多，比较的耗时间，也不够自动化。后面自己了解了Jenkins持续构建工具，和fastlane自动打包工具，能够提高打包效率，下面开始介绍如何使用这些工具吧。
    
    </summary>
    
      <category term="iOS" scheme="http://blogwenbo.com/categories/iOS/"/>
    
    
      <category term="iOS" scheme="http://blogwenbo.com/tags/iOS/"/>
    
      <category term="fastlane" scheme="http://blogwenbo.com/tags/fastlane/"/>
    
      <category term="Jenkins" scheme="http://blogwenbo.com/tags/Jenkins/"/>
    
      <category term="fir.im" scheme="http://blogwenbo.com/tags/fir-im/"/>
    
      <category term="蒲公英" scheme="http://blogwenbo.com/tags/%E8%92%B2%E5%85%AC%E8%8B%B1/"/>
    
  </entry>
  
  <entry>
    <title>iOS 文件获取与选择</title>
    <link href="http://blogwenbo.com/2018/11/06/iOS-%E6%96%87%E4%BB%B6%E8%8E%B7%E5%8F%96%E4%B8%8E%E9%80%89%E6%8B%A9/"/>
    <id>http://blogwenbo.com/2018/11/06/iOS-文件获取与选择/</id>
    <published>2018-11-06T14:26:54.000Z</published>
    <updated>2020-03-30T14:09:57.147Z</updated>
    
    <content type="html"><![CDATA[<p class="description"></p><a id="more"></a><h3 id="一、需求分析"><a href="#一、需求分析" class="headerlink" title="一、需求分析"></a>一、需求分析</h3><blockquote><p>最近开发遇到一个需求，就是要从手机客户端通过云信IM发送文件，最开始想到的是通过云信发送文件是没有问题的，但似乎获取从手机获取文件没那么方便，安卓手机是可以轻松去选取系统文件，iOS相对没那么开放，但这也是iOS相比安卓安全的原因之一。除了系统开发的图片文件和视频文件，就不能获取其他格式文件吗？答案是否定的，自己留意了微信，发现有发送文件功能，微信点击发送文件，就会跳转到一个系统提供的文件拾取界面。自己从前也没有接触过，查阅了相关资料，自己也做下记录，下面开始介绍iOS获取文件的几种方式吧！</p></blockquote><h3 id="二、通过WBUIDocumentPickerController拾取"><a href="#二、通过WBUIDocumentPickerController拾取" class="headerlink" title="二、通过WBUIDocumentPickerController拾取"></a>二、通过<strong>WBUIDocumentPickerController</strong>拾取</h3><ul><li>iOS 新增的文件拾取类，API也比较的简单，通过简单的几句代码就可以实现文件拾取功能</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">UIDocumentPickerViewController *documentPickerViewController = [[UIDocumentPickerViewController alloc]initWithDocumentTypes:self.documentTypes</span><br><span class="line">                                                                                                                         inMode:UIDocumentPickerModeOpen];</span><br><span class="line">    documentPickerViewController.delegate = self;</span><br><span class="line">    [self presentViewController:documentPickerViewController</span><br><span class="line">                       animated:YES</span><br><span class="line">                     completion:nil];</span><br></pre></td></tr></table></figure><ul><li>创建的时候需传入类型，更多UTI类型可到苹果官网查看：<a href="https://developer.apple.com/library/archive/documentation/Miscellaneous/Reference/UTIRef/Articles/System-DeclaredUniformTypeIdentifiers.html#//apple_ref/doc/uid/TP40009259-SW1" target="_blank" rel="noopener">https://developer.apple.com/library/archive/documentation/Miscellaneous/Reference/UTIRef/Articles/System-DeclaredUniformTypeIdentifiers.html#//apple_ref/doc/uid/TP40009259-SW1</a></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">- (NSArray *)documentTypes &#123;</span><br><span class="line">    if (!_documentTypes) &#123;</span><br><span class="line">        _documentTypes = @[@&quot;public.content&quot;,</span><br><span class="line">                           @&quot;public.text&quot;,</span><br><span class="line">                           @&quot;public.source-code&quot;,</span><br><span class="line">                           @&quot;public.image&quot;,</span><br><span class="line">                           @&quot;public.audiovisual-content&quot;,</span><br><span class="line">                           @&quot;com.adobe.pdf&quot;,</span><br><span class="line">                           @&quot;com.apple.keynote.key&quot;,</span><br><span class="line">                           @&quot;com.microsoft.word.doc&quot;,</span><br><span class="line">                           @&quot;com.microsoft.excel.xls&quot;,</span><br><span class="line">                           @&quot;com.microsoft.powerpoint.ppt&quot;,</span><br><span class="line">                           @&quot;public.rtf&quot;,</span><br><span class="line">                           @&quot;public.html&quot;,</span><br><span class="line">                           @&quot;&quot;];</span><br><span class="line">    &#125;</span><br><span class="line">    return _documentTypes;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>代理方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">// MARK:UIDocumentPickerDelegate</span><br><span class="line">/*  &lt; iOS 11 API &gt; */</span><br><span class="line">- (void)documentPicker:(UIDocumentPickerViewController *)controller didPickDocumentsAtURLs:(NSArray&lt;NSURL *&gt; *)urls &#123;</span><br><span class="line">    NSLog(@&quot;%s&quot;,__func__);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/*  &lt; iOS 8 API &gt; */</span><br><span class="line">- (void)documentPicker:(UIDocumentPickerViewController *)controller didPickDocumentAtURL:(NSURL *)url &#123;</span><br><span class="line">    NSLog(@&quot;%s&quot;,__func__);</span><br><span class="line">    </span><br><span class="line">    NSArray *array = [[url absoluteString] componentsSeparatedByString:@&quot;/&quot;];</span><br><span class="line">    NSString *fileName = [array lastObject];</span><br><span class="line">    fileName = [fileName stringByRemovingPercentEncoding];</span><br><span class="line">    </span><br><span class="line">    if ([WBiCloudManager iCloudEnable]) &#123;</span><br><span class="line">        [WBiCloudManager wb_downloadWithDocumentURL:url</span><br><span class="line">                                     completedBlock:^(id obj) &#123;</span><br><span class="line">                                         NSData *data = obj;</span><br><span class="line">                                         NSString *path = [NSHomeDirectory() stringByAppendingString:[NSString stringWithFormat:@&quot;/Documents/%@&quot;,fileName]];</span><br><span class="line">                                         /*  &lt; 写入沙盒 &gt; */</span><br><span class="line">                                         [data writeToFile:path</span><br><span class="line">                                                atomically:YES];</span><br><span class="line">                                     &#125;];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (void)documentPickerWasCancelled:(UIDocumentPickerViewController *)controller &#123;</span><br><span class="line">    NSLog(@&quot;%s&quot;,__func__);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意</strong>：我们从文件拾取器选择了一个文件，有可能这个文件还没有从iCloud同步到本地，这时我们需要子类化一个<strong>UIDocument</strong>对象，去做文件相关的操作，在使用前还需判断是否开启iCloud服务：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">//如果url不为空，说明可以使用iCloud相关功能api</span><br><span class="line">+ (NSURL *)iCloudURLForIdentifier:(NSString *)identifier &#123;</span><br><span class="line">    NSURL *url = nil;</span><br><span class="line">    NSFileManager *fileManager = [NSFileManager defaultManager];</span><br><span class="line">    url = [fileManager URLForUbiquityContainerIdentifier:identifier];</span><br><span class="line">    return url;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>关于<strong>WBUIDocumentPickerController</strong>的使用，我写了一个详细的demo，在文章末尾我也为贴出GitHub地址。</p><h3 id="三、UIDocumentBrowserViewController"><a href="#三、UIDocumentBrowserViewController" class="headerlink" title="三、UIDocumentBrowserViewController"></a>三、UIDocumentBrowserViewController</h3><blockquote><p>Important</p><p>Always assign the document browser as your app’s root view controller. Don’t place the document browser in a navigation controller, tab bar, or split view, and don’t present the document browser modally.</p><p>If you want to present a document browser from another location in your view hierarchy, use a <a href="https://developer.apple.com/documentation/uikit/uidocumentpickerviewcontroller?language=objc" target="_blank" rel="noopener"><code>UIDocumentPickerViewController</code></a> instead.</p></blockquote><p>iOS 11新出的API，用来浏览本地系统文件，iCloud文件。一般的项目可能用不到这个类，使用的时候注意遵循官方文档说明，将UIDocumentPickerViewController设置为窗口根控制器。这里也不做过多说明了，自己也写了个小demo，感兴趣的朋友可下载demo查看。</p><h3 id="四、通过三方APP拷贝文件到自己的项目"><a href="#四、通过三方APP拷贝文件到自己的项目" class="headerlink" title="四、通过三方APP拷贝文件到自己的项目"></a>四、通过三方APP拷贝文件到自己的项目</h3><p>通过这种方式获取文件，之前自己已经接触过了，比如像QQ，微信打开一个文件选择用自己的APP打开，自己APP先要在 <strong>info.plist</strong>中配置支持文件类型，然后就能将文件拷贝到自己的项目，主要用到的方法是<strong>AppDelegate</strong>中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">- (BOOL)application:(UIApplication *)app openURL:(NSURL *)url options:(NSDictionary&lt;UIApplicationOpenURLOptionsKey,id&gt; *)options &#123;</span><br><span class="line">    NSLog(@&quot;url  %@&quot;,[url absoluteString]);</span><br><span class="line">    </span><br><span class="line">    /*  &lt; 三方App拷贝到自己App处理 &gt; */</span><br><span class="line">    if ([[url absoluteString] containsString:@&quot;file&quot;]) &#123;</span><br><span class="line">        NSArray *array = [[url absoluteString] componentsSeparatedByString:@&quot;/&quot;];</span><br><span class="line">        NSString *fileName = [array lastObject];</span><br><span class="line">        fileName = [fileName stringByRemovingPercentEncoding];</span><br><span class="line">        </span><br><span class="line">        NSString *path = [NSHomeDirectory() stringByAppendingString:[NSString stringWithFormat:@&quot;/Documents/Inbox/%@&quot;,fileName]];</span><br><span class="line">        </span><br><span class="line">        NSData *data = [NSData dataWithContentsOfFile:path];</span><br><span class="line">    &#125;</span><br><span class="line">    return YES;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="五、结语"><a href="#五、结语" class="headerlink" title="五、结语"></a>五、结语</h3><blockquote><p>自己暂时了解到的文件获取方式就这些了，以后有新的方式再做补充吧，文章如果有描述不对的地方还请批评指正，如果你有更多更好的方式，欢迎一起交流学习。既然有发送文件，就会有预览文件，接下来我也会写一篇文件预览的文章。好了，最后贴出demo地址吧！</p></blockquote><h3 id="六、Demo"><a href="#六、Demo" class="headerlink" title="六、Demo"></a>六、Demo</h3><p><a href="https://github.com/wenmobo/WBDocumentBrowserDemo" target="_blank" rel="noopener">WBDocumentBrowserDemo</a></p><h3 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h3><p>1、<a href="https://developer.apple.com/documentation/uikit/view_controllers/adding_a_document_browser_to_your_app?language=objc" target="_blank" rel="noopener">https://developer.apple.com/documentation/uikit/view_controllers/adding_a_document_browser_to_your_app?language=objc</a></p><p>2、<a href="https://developer.apple.com/documentation/uikit/view_controllers/building_a_document_browser-based_app?language=objc" target="_blank" rel="noopener">https://developer.apple.com/documentation/uikit/view_controllers/building_a_document_browser-based_app?language=objc</a></p><p>3、<a href="https://www.jianshu.com/p/1d07fab48e67" target="_blank" rel="noopener">iOS - 从iCloud，QQ，微信获取文件</a></p>]]></content>
    
    <summary type="html">
    
      最近开发遇到一个需求，就是要从手机客户端通过云信IM发送文件，最开始想到的是通过云信发送文件是没有问题的，但似乎获取从手机获取文件没那么方便，安卓手机是可以轻松去选取系统文件，iOS相对没那么开放，但这也是iOS相比安卓安全的原因之一。除了系统开发的图片文件和视频文件，就不能获取其他格式文件吗？答案是否定的，自己留意了微信，发现有发送文件功能，微信点击发送文件，就会跳转到一个系统提供的文件拾取界面。自己从前也没有接触过，查阅了相关资料，自己也做下记录，下面开始介绍iOS获取文件的几种方式吧！
    
    </summary>
    
      <category term="iOS" scheme="http://blogwenbo.com/categories/iOS/"/>
    
    
      <category term="iOS" scheme="http://blogwenbo.com/tags/iOS/"/>
    
      <category term="GitHub" scheme="http://blogwenbo.com/tags/GitHub/"/>
    
      <category term="iCloud" scheme="http://blogwenbo.com/tags/iCloud/"/>
    
  </entry>
  
  <entry>
    <title>iOS APP瘦身实践</title>
    <link href="http://blogwenbo.com/2018/11/04/iOS-APP%E7%98%A6%E8%BA%AB%E5%AE%9E%E8%B7%B5/"/>
    <id>http://blogwenbo.com/2018/11/04/iOS-APP瘦身实践/</id>
    <published>2018-11-04T09:51:54.000Z</published>
    <updated>2020-03-30T14:09:57.146Z</updated>
    
    <content type="html"><![CDATA[<p class="description"></p><a id="more"></a><h3 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h3><blockquote><p>好久没有更新博客了，自己也一直想写一些性能优化，APP瘦身的文章，现在就做下记录与分享，方便以后查阅。公司这段新需求不算太多，自己就抽时间，对APP安装包大小做了一些优化，优化后的成果还是很明显的，从之前的90M左右缩减到了40几M。网上还是很容易找到相关的文章，下面我总结下可以从哪几方面去做优化工作吧！</p></blockquote><h3 id="二、图片资源优化"><a href="#二、图片资源优化" class="headerlink" title="二、图片资源优化"></a>二、图片资源优化</h3><ul><li><p>不看不知道，一看吓一跳，项目中的图片资源原来是如此占用大小，动不动一张图片就是好几兆，并且有很多还是没有用到的。找出项目中未用到的图片资源我们可以借助这款软件：</p><p> <a href="https://github.com/tinymind/LSUnusedResources/raw/master/Release/LSUnusedResources.app.zip" target="_blank" rel="noopener">LSUnusedResources</a></p><p>借助着款开源软件我们可以找出项目中没有用到的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[imageset, jpg, png, gif]</span><br></pre></td></tr></table></figure><p>当然，搜索出来的结果不一定是百分百准确的，还是要结合实际情况。</p></li><li><p>除了删除没有用到的图片资源，对于用到的大图片资源，我们还需要对大图进行压缩，压缩的同时还需要保证图片的显示效果，推荐一个非常棒的图片压缩网站吧：</p><p><a href="https://tinypng.com/" target="_blank" rel="noopener">tinypng</a></p><p>当然还有其他的压缩工具网站，可以自己去搜索探寻吧。</p></li></ul><h3 id="三、删除项目没有使用到的类"><a href="#三、删除项目没有使用到的类" class="headerlink" title="三、删除项目没有使用到的类"></a>三、删除项目没有使用到的类</h3><ul><li>删除项目中未用到的类，就需要看经验了，没有用到的类，一般没有初始化相关的代码<code>alloc init</code>或<code>new</code>，这样就可以删除项目中未使用的类。这个工作最好是定期进行一次吧，如果等到很久来处理，那工作量真的就太大了，如果是需求变更频繁的话，肯定会产生很多未用到的类。所以还是定期做一次排查吧，以免留下沉重的历史包袱。</li><li>除了手工排查，还可以借助命令行工具 <code>find</code>命令，之前看到过一篇博客介绍，一时想不起来，等想起来在做补充吧。</li></ul><h3 id="四、LinkMap文件分析"><a href="#四、LinkMap文件分析" class="headerlink" title="四、LinkMap文件分析"></a>四、LinkMap文件分析</h3><ul><li><p>关于LinkMap的介绍，网上一搜一大堆，这里就不做详细介绍了，说下怎么配置Xcode获得LinkMap文件和借助工具分析文件大小吧。</p></li><li><p>XCode -&gt; Project -&gt; Build Settings -&gt; 搜map -&gt; 把Write Link Map File选项设为YES，并指定好linkMap的存储位置</p></li><li><p>编译后，到编译目录里找到该txt文件，目录如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">~/Library/Developer/Xcode/DerivedData/XXX-XXXXXXXXXXXX/Build/Intermediates/XXX.build/Debug-iphoneos/XXX.build/</span><br></pre></td></tr></table></figure></li><li><p>之后借助GitHub上<a href="https://github.com/huanxsd/LinkMap" target="_blank" rel="noopener">LinkMap</a>工具或<a href="https://gist.github.com/bang590/8f3e9704f1c2661836cd" target="_blank" rel="noopener">linkmap.js</a>，分析工程可执行文件大小。</p></li></ul><h3 id="五、移除模拟器支持文件"><a href="#五、移除模拟器支持文件" class="headerlink" title="五、移除模拟器支持文件"></a>五、移除模拟器支持文件</h3><ul><li><p>我们在集成一些三方库的时候，这些三方库可能包含模拟器指令集。比如说环信IMSDK，打包上传App Store需移除模拟器支持指令集。</p></li><li><p>查看静态库支持的指令集</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lipo -info libname.a(或者libname.framework/libname)</span><br></pre></td></tr></table></figure></li><li><p>合并静态库</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">lipo -create 静态库存放路径1  静态库存放路径2 ...  -output 整合后存放的路径</span><br><span class="line">lipo  -create  libname-armv7.a   libname-armv7s.a   libname-i386.a  -output  libname.a</span><br></pre></td></tr></table></figure></li><li><p>静态库拆分</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lipo 静态库源文件路径 -thin CPU架构名称 -output 拆分后文件存放路径</span><br></pre></td></tr></table></figure></li></ul><h3 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h3><ul><li><a href="https://www.jianshu.com/p/c94dedef90b7" target="_blank" rel="noopener">iOS APP安装包瘦身实践</a></li><li><a href="https://www.jianshu.com/p/4bd6d1315104" target="_blank" rel="noopener">LinkMap文件分析</a></li><li><a href="https://www.jianshu.com/p/2d0ba1bc2a50" target="_blank" rel="noopener">APP瘦身 - 之framework</a></li></ul>]]></content>
    
    <summary type="html">
    
      好久没有更新博客了，自己也一直想写一些性能优化，APP瘦身的文章，现在就做下记录与分享，方便以后查阅。公司这段新需求不算太多，自己就抽时间，对APP安装包大小做了一些优化，优化后的成果还是很明显的，从之前的90M左右缩减到了40几M。网上还是很容易找到相关的文章，下面我总结下可以从哪几方面去做优化工作吧！
    
    </summary>
    
      <category term="iOS" scheme="http://blogwenbo.com/categories/iOS/"/>
    
    
      <category term="iOS" scheme="http://blogwenbo.com/tags/iOS/"/>
    
      <category term="性能优化" scheme="http://blogwenbo.com/tags/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>iOS UI设计规范</title>
    <link href="http://blogwenbo.com/2018/09/14/iOS-UI%E8%AE%BE%E8%AE%A1%E8%A7%84%E8%8C%83/"/>
    <id>http://blogwenbo.com/2018/09/14/iOS-UI设计规范/</id>
    <published>2018-09-13T16:15:15.000Z</published>
    <updated>2020-03-30T14:09:57.146Z</updated>
    
    <content type="html"><![CDATA[<p class="description"></p><a id="more"></a><blockquote><p>这篇文章收录了最新iPhone设备尺寸，主要是为了自己方便自己查阅苹果设备尺寸，图标尺寸等，苹果官方有Human Interface Guidelines文档，感兴趣的朋友可以自行查阅。</p></blockquote><h3 id="官方文档地址"><a href="#官方文档地址" class="headerlink" title="官方文档地址"></a>官方文档地址</h3><p><a href="https://developer.apple.com/design/human-interface-guidelines/" target="_blank" rel="noopener">Human Interface Guidelines</a></p><h3 id="设备尺寸"><a href="#设备尺寸" class="headerlink" title="设备尺寸"></a>设备尺寸</h3><p><img src="https://ws1.sinaimg.cn/large/0069RVTdly1fv8b4605d6j313w0ey755.jpg" alt=""></p><table><thead><tr><th style="text-align:left">Device</th><th style="text-align:left">Portrait dimensions</th><th style="text-align:left">Landscape dimensions</th></tr></thead><tbody><tr><td style="text-align:left">12.9” iPad Pro</td><td style="text-align:left">2048px × 2732px</td><td style="text-align:left">2732px × 2048px</td></tr><tr><td style="text-align:left">10.5” iPad Pro</td><td style="text-align:left">1668px × 2224px</td><td style="text-align:left">2224px × 1668px</td></tr><tr><td style="text-align:left">9.7” iPad</td><td style="text-align:left">1536px × 2048px</td><td style="text-align:left">2048px × 1536px</td></tr><tr><td style="text-align:left">7.9” iPad mini 4</td><td style="text-align:left">1536px × 2048px</td><td style="text-align:left">2048px × 1536px</td></tr><tr><td style="text-align:left">iPhone XS Max</td><td style="text-align:left">1242px × 2688px</td><td style="text-align:left">2688px × 1242px</td></tr><tr><td style="text-align:left">iPhone XS</td><td style="text-align:left">1125px × 2436px</td><td style="text-align:left">2436px × 1125px</td></tr><tr><td style="text-align:left">iPhone XR</td><td style="text-align:left">828px × 1792px</td><td style="text-align:left">1792px × 828px</td></tr><tr><td style="text-align:left">iPhone X</td><td style="text-align:left">1125px × 2436px</td><td style="text-align:left">2436px × 1125px</td></tr><tr><td style="text-align:left">iPhone 8 Plus</td><td style="text-align:left">1242px × 2208px</td><td style="text-align:left">2208px × 1242px</td></tr><tr><td style="text-align:left">iPhone 8</td><td style="text-align:left">750px × 1334px</td><td style="text-align:left">1334px × 750px</td></tr><tr><td style="text-align:left">iPhone 7 Plus</td><td style="text-align:left">1242px × 2208px</td><td style="text-align:left">2208px × 1242px</td></tr><tr><td style="text-align:left">iPhone 7</td><td style="text-align:left">750px × 1334px</td><td style="text-align:left">1334px × 750px</td></tr><tr><td style="text-align:left">iPhone 6s Plus</td><td style="text-align:left">1242px × 2208px</td><td style="text-align:left">2208px × 1242px</td></tr><tr><td style="text-align:left">iPhone 6s</td><td style="text-align:left">750px × 1334px</td><td style="text-align:left">1334px × 750px</td></tr><tr><td style="text-align:left">iPhone SE</td><td style="text-align:left">640px × 1136px</td><td style="text-align:left">1136px × 640px</td></tr></tbody></table><h3 id="图像大小与分辨率"><a href="#图像大小与分辨率" class="headerlink" title="图像大小与分辨率"></a>图像大小与分辨率</h3><table><thead><tr><th style="text-align:left">Device</th><th style="text-align:left">Scale Factor</th></tr></thead><tbody><tr><td style="text-align:left">12.9” iPad Pro</td><td style="text-align:left">@2x</td></tr><tr><td style="text-align:left">10.5” iPad Pro</td><td style="text-align:left">@2x</td></tr><tr><td style="text-align:left">9.7” iPad</td><td style="text-align:left">@2x</td></tr><tr><td style="text-align:left">7.9” iPad mini 4</td><td style="text-align:left">@2x</td></tr><tr><td style="text-align:left">iPhone XS Max</td><td style="text-align:left">@3x</td></tr><tr><td style="text-align:left">iPhone XS</td><td style="text-align:left">@3x</td></tr><tr><td style="text-align:left">iPhone XR</td><td style="text-align:left">@2x</td></tr><tr><td style="text-align:left">iPhone X</td><td style="text-align:left">@3x</td></tr><tr><td style="text-align:left">iPhone 8 Plus</td><td style="text-align:left">@3x</td></tr><tr><td style="text-align:left">iPhone 8</td><td style="text-align:left">@2x</td></tr><tr><td style="text-align:left">iPhone 7s Plus</td><td style="text-align:left">@3x</td></tr><tr><td style="text-align:left">iPhone 7s</td><td style="text-align:left">@2x</td></tr><tr><td style="text-align:left">iPhone 7</td><td style="text-align:left">@2x</td></tr><tr><td style="text-align:left">iPhone 6s Plus</td><td style="text-align:left">@3x</td></tr><tr><td style="text-align:left">iPhone 6s</td><td style="text-align:left">@2x</td></tr><tr><td style="text-align:left">iPhone SE</td><td style="text-align:left">@2x</td></tr></tbody></table><h3 id="App-Icon-Sizes"><a href="#App-Icon-Sizes" class="headerlink" title="App Icon Sizes"></a>App Icon Sizes</h3><table><thead><tr><th style="text-align:left">Device or context</th><th style="text-align:left">Icon size</th></tr></thead><tbody><tr><td style="text-align:left">iPhone</td><td style="text-align:left">180px × 180px (60pt × 60pt @3x)</td></tr><tr><td style="text-align:left"></td><td style="text-align:left">120px × 120px (60pt × 60pt @2x)</td></tr><tr><td style="text-align:left">iPad Pro</td><td style="text-align:left">167px × 167px (83.5pt × 83.5pt @2x)</td></tr><tr><td style="text-align:left">iPad, iPad mini</td><td style="text-align:left">152px × 152px (76pt × 76pt @2x)</td></tr><tr><td style="text-align:left">App Store</td><td style="text-align:left">1024px × 1024px (1024pt × 1024pt @1x)</td></tr></tbody></table><ul><li><p>Spotlight<br>|Device|Spotlight icon size|<br>|:—|:—|<br>|iPhone|120px × 120px (40pt × 40pt @3x)|<br>||80px × 80px (40pt × 40pt @2x)|<br>|iPad Pro, iPad, iPad mini|    80px × 80px (40pt × 40pt @2x)|</p></li><li><p>Settings<br>|Device|Settings icon size|<br>|:—|:—|<br>|iPhone|    87px × 87px (29pt × 29pt @3x)|<br>||58px × 58px (29pt × 29pt @2x)|<br>|iPad Pro, iPad, iPad mini|    58px × 58px (29pt × 29pt @2x)|</p></li><li><p>Notification<br>|Device|Notification icon size|<br>|:—|:—|<br>|iPhone|    60px × 60px (20pt × 20pt @3x)|<br>||40px × 40px (20pt × 20pt @2x)|<br>|iPad Pro, iPad, iPad mini|40px × 40px (20pt × 20pt @2x)|</p></li></ul><h3 id="Launch-Screen"><a href="#Launch-Screen" class="headerlink" title="Launch Screen"></a>Launch Screen</h3><table><thead><tr><th style="text-align:left">Device</th><th style="text-align:left">Portrait size</th><th style="text-align:left">Landscape size</th></tr></thead><tbody><tr><td style="text-align:left">12.9” iPad Pro</td><td style="text-align:left">2048px × 2732px</td><td style="text-align:left">2732px × 2048px</td></tr><tr><td style="text-align:left">10.5” iPad Pro</td><td style="text-align:left">1668px × 2224px</td><td style="text-align:left">2224px × 1668px</td></tr><tr><td style="text-align:left">9.7” iPad</td><td style="text-align:left">1536px × 2048px</td><td style="text-align:left">2048px × 1536px</td></tr><tr><td style="text-align:left">7.9” iPad mini 4</td><td style="text-align:left">1536px × 2048px</td><td style="text-align:left">2048px × 1536px</td></tr><tr><td style="text-align:left">iPhone XS Max</td><td style="text-align:left">1242px × 2688px</td><td style="text-align:left">2688px × 1242px</td></tr><tr><td style="text-align:left">iPhone XS</td><td style="text-align:left">1125px × 2436px</td><td style="text-align:left">2436px × 1125px</td></tr><tr><td style="text-align:left">iPhone XR</td><td style="text-align:left">828px × 1792px</td><td style="text-align:left">1792px × 828px</td></tr><tr><td style="text-align:left">iPhone X</td><td style="text-align:left">1125px × 2436px</td><td style="text-align:left">2436px × 1125px</td></tr><tr><td style="text-align:left">iPhone 8 Plus</td><td style="text-align:left">1242px × 2208px</td><td style="text-align:left">2208px × 1242px</td></tr><tr><td style="text-align:left">iPhone 8</td><td style="text-align:left">750px × 1334px</td><td style="text-align:left">1334px × 750px</td></tr><tr><td style="text-align:left">iPhone 7 Plus</td><td style="text-align:left">1242px × 2208px</td><td style="text-align:left">2208px × 1242px</td></tr><tr><td style="text-align:left">iPhone 7</td><td style="text-align:left">750px × 1334px</td><td style="text-align:left">1334px × 750px</td></tr><tr><td style="text-align:left">iPhone 6s Plus</td><td style="text-align:left">1242px × 2208px</td><td style="text-align:left">2208px × 1242px</td></tr><tr><td style="text-align:left">iPhone 6s</td><td style="text-align:left">750px × 1334px</td><td style="text-align:left">1334px × 750px</td></tr><tr><td style="text-align:left">iPhone SE</td><td style="text-align:left">640px × 1136px</td><td style="text-align:left">1136px × 640px</td></tr></tbody></table><h3 id="Navigation-Bar-and-Toolbar-Icon-Size（导航栏与工具条）"><a href="#Navigation-Bar-and-Toolbar-Icon-Size（导航栏与工具条）" class="headerlink" title="Navigation Bar and Toolbar Icon Size（导航栏与工具条）"></a>Navigation Bar and Toolbar Icon Size（导航栏与工具条）</h3><table><thead><tr><th style="text-align:left">Target sizes（标准大小）</th><th style="text-align:left">Maximum sizes（最大尺寸）</th></tr></thead><tbody><tr><td style="text-align:left">72px × 72px (24pt × 24pt @3x)</td><td style="text-align:left">84px × 84px (28pt × 28pt @3x)</td></tr><tr><td style="text-align:left">48px × 48px (24pt × 24pt @2x)</td><td style="text-align:left">56px × 56px (28pt × 28pt @2x)</td></tr></tbody></table><h3 id="Tab-Bar-Icon-Size（标签栏图标大小）"><a href="#Tab-Bar-Icon-Size（标签栏图标大小）" class="headerlink" title="Tab Bar Icon Size（标签栏图标大小）"></a>Tab Bar Icon Size（标签栏图标大小）</h3><p><img src="https://ws3.sinaimg.cn/large/0069RVTdly1fv8cfny8vnj30nq0763ys.jpg" alt=""><br>|Attribute（属性）|Regular tab bars（常规标签栏）|Compact tab bars（紧凑标签栏）|<br>|:—|:—|:—|<br>|Target width and height (circular glyphs)|75px × 75px (25pt × 25pt @3x)|    54px × 54px (18pt × 18pt @3x)|<br>||    50px × 50px (25pt × 25pt @2x)|36px × 36px (18pt × 18pt @2x)|<br>|Target width and height (square glyphs)|69px × 69px (23pt × 23pt @3x)|    51px × 51px (17pt × 17pt @3x)|<br>||46px × 46px (23pt × 23pt @2x)|34px × 34px (17pt × 17pt @2x)|<br>|Target width (wide glyphs)|93px (31pt @3x)|69px (23pt @3x)|<br>||62px (31pt @2x)|    46px (23pt @2x)|<br>|Target height (tall glyphs)|    84px (28pt @3x)|60px (20pt @3x)|<br>||56px (28pt @2x)|40px (20pt @2x)|</p><h3 id="工具推荐"><a href="#工具推荐" class="headerlink" title="工具推荐"></a>工具推荐</h3><p>这篇文章主要记录了自己平时用的比较多的一些设计尺寸参考，设计细节上的东西还是要去查看官方文档，最后也为推荐一款<strong>App Icon</strong>自动生成工具吧，只需要一张1024*1024的原图，就可以生成不同设备及尺寸的图标，同时也完全符合苹果设计规范（超👍哦），下面贴出网站地址：<br><a href="https://icon.wuruihong.com/" target="_blank" rel="noopener">图标工厂</a></p>]]></content>
    
    <summary type="html">
    
      这篇文章收录了最新iPhone设备尺寸，主要是为了自己方便自己查阅苹果设备尺寸，图标尺寸等，苹果官方有Human Interface Guidelines文档，感兴趣的朋友可以自行查阅。
    
    </summary>
    
      <category term="UI设计" scheme="http://blogwenbo.com/categories/UI%E8%AE%BE%E8%AE%A1/"/>
    
    
      <category term="iOS" scheme="http://blogwenbo.com/tags/iOS/"/>
    
      <category term="UI设计" scheme="http://blogwenbo.com/tags/UI%E8%AE%BE%E8%AE%A1/"/>
    
  </entry>
  
  <entry>
    <title>WBLoadingIndicatorView（加载等待动画）</title>
    <link href="http://blogwenbo.com/2018/09/11/WBLoadingIndicatorView%EF%BC%88%E5%8A%A0%E8%BD%BD%E7%AD%89%E5%BE%85%E5%8A%A8%E7%94%BB%EF%BC%89/"/>
    <id>http://blogwenbo.com/2018/09/11/WBLoadingIndicatorView（加载等待动画）/</id>
    <published>2018-09-11T14:27:00.000Z</published>
    <updated>2020-03-30T14:09:57.144Z</updated>
    
    <content type="html"><![CDATA[<p class="description"></p><a id="more"></a><h3 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h3><blockquote><p>关于加载提示框架，比较成熟的有<a href="https://github.com/jdg/MBProgressHUD" target="_blank" rel="noopener">MBProgressHUD</a>，<a href="https://github.com/SVProgressHUD/SVProgressHUD" target="_blank" rel="noopener">SVProgressHUD</a>等著名框架，如果没有太多的自定义要求，这些框架提供的API其实已经够用了，基于提供的API，我们也可以自定义一些UI效果。最近项目也不是很忙，于是自己就尝试封装一个加载等待动画组件，封装思想主要参考了MBProgressHUD，在实现过程中，布局采用的是苹果原生Autolayout，没有用Masonry，所以写起来比较的恶心，约束写的老长老长了。其实封装的这个组件功能也不算太多，现在主要实现了五六个加载动画效果，也提供了一些属性设置自定义效果，如果有时间我会优化添加更多动画效果。</p></blockquote><h3 id="二、介绍与使用"><a href="#二、介绍与使用" class="headerlink" title="二、介绍与使用"></a>二、介绍与使用</h3><ul><li><p>一些属性API。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">// MARK:Property</span><br><span class="line">/*  &lt; 动画容器视图 &gt; */</span><br><span class="line">@property (nonatomic, strong) WBLoadingBackgroundView *bezelView;</span><br><span class="line">/*  &lt; 背景视图 &gt; */</span><br><span class="line">@property (nonatomic, strong) WBLoadingBackgroundView *backgroundView;</span><br><span class="line">/** &lt; Loading text. &gt; */</span><br><span class="line">@property (nonatomic, strong) UILabel *label;</span><br><span class="line"></span><br><span class="line">@property (nonatomic, strong) UIColor *contentColor UI_APPEARANCE_SELECTOR;</span><br><span class="line">/*  &lt; 加载动画颜色 &gt; */</span><br><span class="line">@property (nonatomic, strong) UIColor *indicatorColor UI_APPEARANCE_SELECTOR;</span><br><span class="line">/*  &lt; bezelView中心点偏移 &gt; */</span><br><span class="line">@property (nonatomic, assign) CGPoint offset UI_APPEARANCE_SELECTOR;</span><br><span class="line">/*  &lt; 边距 默认：20 &gt; */</span><br><span class="line">@property (nonatomic, assign) CGFloat margin UI_APPEARANCE_SELECTOR;</span><br><span class="line">/*  &lt; bezelView最小size &gt; */</span><br><span class="line">@property (nonatomic, assign) CGSize minSize UI_APPEARANCE_SELECTOR;</span><br><span class="line">/** &lt; 加载动画size 默认：35 &gt; */</span><br><span class="line">@property (nonatomic, assign) CGSize indicatorSize UI_APPEARANCE_SELECTOR;</span><br><span class="line">/** &lt; 是否方形 &gt; */</span><br><span class="line">@property (nonatomic, assign) BOOL square UI_APPEARANCE_SELECTOR;</span><br><span class="line">/** &lt; 隐藏时从父视图移除 默认：YES &gt; */</span><br><span class="line">@property (nonatomic, assign) BOOL removeFromSuperViewOnHide;</span><br><span class="line">/*  &lt; 动画类型 &gt; */</span><br><span class="line">@property (nonatomic, assign) WBLoadingAnimationType type;</span><br><span class="line"></span><br><span class="line">// MARK:Class Methods</span><br><span class="line">/**</span><br><span class="line"> 获取视图中的WBLoadingIndicatorView</span><br><span class="line"></span><br><span class="line"> @param view 遍历的父视图</span><br><span class="line"> @return WBLoadingIndicatorView</span><br><span class="line"> */</span><br><span class="line">+ (nullable WBLoadingIndicatorView *)wb_indicatorForView:(UIView *)view;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> 创建并显示加载视图</span><br><span class="line"></span><br><span class="line"> @param view 要显示的view</span><br><span class="line"> @return MBProgressHUD</span><br><span class="line"> */</span><br><span class="line">+ (instancetype)wb_showIndicatorAddTo:(UIView *)view;</span><br><span class="line"></span><br><span class="line">// MARK:Instance Class Method</span><br><span class="line">- (instancetype)initWithView:(UIView *)view;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> 显示加载视图</span><br><span class="line"> */</span><br><span class="line">- (void)wb_showLoadingView:(BOOL)animated;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> 隐藏加载视图</span><br><span class="line"></span><br><span class="line"> @param animated 是否动画</span><br><span class="line"> */</span><br><span class="line">- (void)wb_hideLoadingView:(BOOL)animated;</span><br></pre></td></tr></table></figure></li><li><p>部分效果<br><img src="https://ws2.sinaimg.cn/large/0069RVTdly1fv5vfzum5xg308p0i2aak.gif" alt=""><br><img src="https://ws4.sinaimg.cn/large/0069RVTdly1fv5vhwysnfg308p0i2dgd.gif" alt=""><br><img src="https://ws4.sinaimg.cn/large/0069RVTdly1fv5vw05y8cg308p0i2wf5.gif" alt=""><br><img src="https://ws1.sinaimg.cn/large/0069RVTdly1fv5vwliqtyg308p0i276d.gif" alt=""></p></li><li>使用示例<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">WBLoadingIndicatorView *indicatorView = [self createIndicatorViewWithType:WBWBLoadingAnimationBallTrianglePathType</span><br><span class="line">                                                                        indicatorSize:CGSizeMake(50, 50)</span><br><span class="line">                                                                               toView:self.view];</span><br><span class="line">            indicatorView.type = WBLoadingAnimationcircleStrokeSpinType;</span><br><span class="line">            indicatorView.backgroundView.backgroundColor = [UIColor colorWithWhite:0.f alpha:0.3];</span><br><span class="line">            indicatorView.contentColor = [UIColor whiteColor];</span><br><span class="line">            indicatorView.bezelView.backgroundColor = [UIColor colorWithWhite:0.f alpha:0.7f];</span><br></pre></td></tr></table></figure></li></ul><p>关于使用，建议还是二次封装吧，每次调用都写这么多代码，还是有点长。关于更多还是查看我的GitHub，下面也贴出GitHub地址。</p><h3 id="三、GitHub地址"><a href="#三、GitHub地址" class="headerlink" title="三、GitHub地址"></a>三、GitHub地址</h3><p>如果觉得可以，请star鼓励一下哦，如果有任何建议或问题，欢迎指出，我也会第一时间修改。<br><a href="https://github.com/wenmobo/WBLoadingIndicatorView" target="_blank" rel="noopener">WBLoadingIndicatorView</a></p>]]></content>
    
    <summary type="html">
    
      关于加载提示框架，比较成熟的有[MBProgressHUD](https://github.com/jdg/MBProgressHUD)，[SVProgressHUD](https://github.com/SVProgressHUD/SVProgressHUD)等著名框架，如果没有太多的自定义要求，这些框架提供的API其实已经够用了，基于提供的API，我们也可以自定义一些UI效果。最近项目也不是很忙，于是自己就尝试封装一个加载等待动画组件，封装思想主要参考了MBProgressHUD，在实现过程中，布局采用的是苹果原生Autolayout，没有用Masonry，所以写起来比较的恶心，约束写的老长老长了。其实封装的这个组件功能也不算太多，现在主要实现了五六个加载动画效果，也提供了一些属性设置自定义效果，如果有时间我会优化添加更多动画效果。
    
    </summary>
    
      <category term="iOS" scheme="http://blogwenbo.com/categories/iOS/"/>
    
    
      <category term="iOS" scheme="http://blogwenbo.com/tags/iOS/"/>
    
      <category term="CocoaPods" scheme="http://blogwenbo.com/tags/CocoaPods/"/>
    
      <category term="GitHub" scheme="http://blogwenbo.com/tags/GitHub/"/>
    
      <category term="Animation" scheme="http://blogwenbo.com/tags/Animation/"/>
    
  </entry>
  
  <entry>
    <title>CocoaPods进阶：制作公有库</title>
    <link href="http://blogwenbo.com/2018/09/03/CocoaPods%E8%BF%9B%E9%98%B6%EF%BC%9A%E5%88%B6%E4%BD%9C%E5%85%AC%E6%9C%89%E5%BA%93/"/>
    <id>http://blogwenbo.com/2018/09/03/CocoaPods进阶：制作公有库/</id>
    <published>2018-09-03T13:35:29.000Z</published>
    <updated>2020-03-30T14:09:57.142Z</updated>
    
    <content type="html"><![CDATA[<p class="description"></p><a id="more"></a><h3 id="一、-前言"><a href="#一、-前言" class="headerlink" title="一、 前言"></a>一、 前言</h3><p>在<a href="http://blogwenbo.com/2018/08/13/CocoaPods%E8%BF%9B%E9%98%B6%EF%BC%9A%E8%AF%A6%E8%A7%A3%E7%A7%81%E6%9C%89%E5%BA%93%E5%88%B6%E4%BD%9C/">CocoaPods进阶：详解私有库制作</a>这篇博客中，讲解记录了cocoapods使用<code>pod lib create [projectname]</code>命令模板化创建pod私有库，这篇博客主要讲解cocoapods制作共有库的过程。这里，我不在使用模板化方式创建，而是用原来在GitHub上已经提交过的项目（如果你舍不得获得的star，最好采用这种方式啦，😆）。自己也是参照博客资料，本来以为自己有了制作私有库的基础，制作共有库会没那么多的坑，但自己还是折腾了一晚上，好了，不多说了，开始讲解共有库的制作吧！</p><h3 id="二、目录"><a href="#二、目录" class="headerlink" title="二、目录"></a>二、目录</h3><blockquote><p>1、创建spec文件</p><p>2、编辑podspec文件</p><p>3、本地库验证</p><p>4、推送打标签</p><p>5、验证podspec文件</p><p>6、注册，推送podspec到cocoapods，搜索验证</p></blockquote><h3 id="三、具体步骤"><a href="#三、具体步骤" class="headerlink" title="三、具体步骤"></a>三、具体步骤</h3><p><strong>1、创建spec文件</strong><br>在<code>xxxx.xcodeproj</code>同级目录下，创建podspec文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pod spec create WBHUDManager</span><br></pre></td></tr></table></figure><p>创建成功之后如下：</p><p><img src="https://ws1.sinaimg.cn/large/0069RVTdly1fuwp01rvz4j30ei0e8q59.jpg" alt=""></p><p><strong>注意</strong>：</p><p>这里新创建的<strong>podspec</strong>最好要和<strong>LICENSE</strong>、<strong>README.md</strong>在同级目录，自己在这里也折腾了许久，头一次用非模板方式，也踩了不少的坑。这里一定要注意哦。</p><p><strong>2、编辑podspec文件**</strong></p><p>用终端或者记事本编辑podspec文件，下面是我配置<strong>WBHUDManager.podspec</strong>，这里我也不做详细的介绍了，在我讲解的私有库制作博客，有对每个属性的详细描述，在网上也能轻易的查阅到相关的资料。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">Pod::Spec.new <span class="keyword">do</span> <span class="params">|s|</span></span><br><span class="line">  s.name             = <span class="string">'WBHUDManager'</span></span><br><span class="line">  s.version          = <span class="string">'1.0.0'</span></span><br><span class="line">  s.summary          = <span class="string">'iOS 基于SVProgressHUD、MBProgressHUD提示框封装'</span></span><br><span class="line">  s.homepage         = <span class="string">'https://github.com/wenmobo/WBHUDManager'</span></span><br><span class="line">  s.license          = &#123; <span class="symbol">:type</span> =&gt; <span class="string">'MIT'</span>, <span class="symbol">:file</span> =&gt; <span class="string">'LICENSE'</span> &#125;</span><br><span class="line">  s.author           = &#123; <span class="string">'wenmobo'</span> =&gt; <span class="string">'wenmobo2018@gmail.com'</span> &#125;</span><br><span class="line">  s.source           = &#123; <span class="symbol">:git</span> =&gt; <span class="string">'https://github.com/wenmobo/WBHUDManager.git'</span>, <span class="symbol">:tag</span> =&gt; s.version.to_s &#125;</span><br><span class="line">  s.ios.deployment_target = <span class="string">'8.0'</span></span><br><span class="line">  s.requires_arc = <span class="literal">true</span></span><br><span class="line">  s.source_files =  <span class="string">'WBHUDManager/WBHUDManager.h'</span></span><br><span class="line">  s.frameworks = <span class="string">'UIKit'</span></span><br><span class="line">  </span><br><span class="line">  s.subspec <span class="string">'SVProgressHUDWBAddtional'</span> <span class="keyword">do</span> <span class="params">|ss|</span></span><br><span class="line">      ss.source_files = <span class="string">'WBHUDManager/SVProgressHUDWBAddtional/*.&#123;h,m&#125;'</span></span><br><span class="line">      ss.dependency <span class="string">'SVProgressHUD'</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  </span><br><span class="line">  s.subspec <span class="string">'MBProgressHUDWBAddtional'</span> <span class="keyword">do</span> <span class="params">|ss|</span></span><br><span class="line">      ss.source_files = <span class="string">'WBHUDManager/MBProgressHUDWBAddtional/*.&#123;h,m&#125;'</span></span><br><span class="line">      ss.resource = <span class="string">'WBHUDManager/MBProgressHUDWBAddtional/MBProgressHUD.bundle'</span></span><br><span class="line">      ss.dependency <span class="string">'MBProgressHUD'</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p><strong>3、本地库验证</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pod lib lint WBHUDManager.podspec</span><br></pre></td></tr></table></figure><p>如果有警告，需要根据提示内容解决警告，忽略警告</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pod lib lint WBHUDManager.podspec --allow-warnings</span><br></pre></td></tr></table></figure><p><strong>4、推送打标签</strong></p><p>由于这里我之前已经推送到远程了，所以只需要打标签就可了，注意要和WBHUDManager.podspec中version保持一致：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git tag -m &apos;release version 1.0.0&apos; 1.0.0</span><br><span class="line"></span><br><span class="line">git push origin 1.0.0 </span><br><span class="line">或者</span><br><span class="line">git push --tags</span><br></pre></td></tr></table></figure><p><strong>5、验证podspec文件</strong></p><p>推送标签之后，需对WBHUDManager.podspec进行验证</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pod spec lint WBHUDManager.podspec</span><br></pre></td></tr></table></figure><p><strong>6、注册，推送podspec到cocoapods，验证</strong></p><p>验证通过之后，需要使用邮箱注册cocoapods，终端输入：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">pod trunk register [email] ‘用户名’ --description=&apos;MacBook Pro&apos;</span><br><span class="line"></span><br><span class="line">example</span><br><span class="line">pod trunk register 123@qq.com &apos;wenbo&apos; --description=&apos;MacBook Pro&apos;</span><br></pre></td></tr></table></figure><p>之后会给你发送一条邮箱，进行确认，这里的-<strong>-description=’MacBook Pro’</strong>可以省略</p><p>查看个人信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pod trunk me</span><br></pre></td></tr></table></figure><p><img src="https://ws3.sinaimg.cn/large/0069RVTdly1fuwpleoxwyj30vk074wfw.jpg" alt=""></p><p>推送podspec到<strong>cocoapods</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pod trunk push WBHUDManager.podspec</span><br></pre></td></tr></table></figure><p>推送成功之后，终端输出如下</p><p><img src="https://ws1.sinaimg.cn/large/0069RVTdly1fuwpojsca1j30v60mcq70.jpg" alt=""></p><p>之后我们可以搜索验证</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pod search WBHUDManager</span><br></pre></td></tr></table></figure><p><img src="https://ws1.sinaimg.cn/large/0069RVTdly1fuwpq0w8uvj30vq0awtau.jpg" alt=""></p><p>哈哈，已经发布成功啦，是不是很开心啦☺️。</p><h3 id="四、问题解决"><a href="#四、问题解决" class="headerlink" title="四、问题解决"></a>四、问题解决</h3><ul><li><p>发布成功之后搜索不到</p></li><li><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">//删除本地索引</span><br><span class="line">rm ~/Library/Caches/CocoaPods/search_index.json</span><br><span class="line"></span><br><span class="line">//搜索</span><br><span class="line">pod search [库名]</span><br><span class="line"></span><br><span class="line">//更新索引</span><br><span class="line">pod repo update</span><br></pre></td></tr></table></figure></li></ul><h3 id="五、打广告"><a href="#五、打广告" class="headerlink" title="五、打广告"></a>五、打广告</h3><blockquote><p>哈哈，最后也为自己打波广告吧，这篇博客使用的例子是自己基于<a href="https://github.com/jdg/MBProgressHUD" target="_blank" rel="noopener">MBProgressHUD</a>、<a href="https://github.com/SVProgressHUD/SVProgressHUD" target="_blank" rel="noopener">SVProgressHUD</a>封装的一个提示框架，支持超多自定义属性设置，HUD的状态切换，显示完成回调，这也是我发布的第一个公有库，如果有写的不好的地方，请多多包涵。喜欢的朋友记得<strong>star</strong>鼓励下哟，最后贴出GitHub地址吧：</p></blockquote><p><a href="https://github.com/wenmobo/WBHUDManager" target="_blank" rel="noopener">WBHUDManager</a></p>]]></content>
    
    <summary type="html">
    
      在CocoaPods进阶：详解私有库制作这篇博客中，讲解记录了cocoapods使用pod lib create [projectname]命令模板化创建pod私有库，这篇博客主要讲解cocoapods制作共有库的过程。这里，我不在使用模板化方式创建，而是用原来在GitHub上已经提交过的项目（如果你舍不得获得的star，最好采用这种方式啦，😆）。自己也是参照博客资料，本来以为自己有了制作私有库的基础，制作共有库会没那么多的坑，但自己还是折腾了一晚上，好了，不多说了，开始讲解共有库的制作吧！
    
    </summary>
    
      <category term="iOS" scheme="http://blogwenbo.com/categories/iOS/"/>
    
    
      <category term="iOS" scheme="http://blogwenbo.com/tags/iOS/"/>
    
      <category term="CocoaPods" scheme="http://blogwenbo.com/tags/CocoaPods/"/>
    
      <category term="GitHub" scheme="http://blogwenbo.com/tags/GitHub/"/>
    
      <category term="MBProgressHUD" scheme="http://blogwenbo.com/tags/MBProgressHUD/"/>
    
      <category term="SVProgressHUD" scheme="http://blogwenbo.com/tags/SVProgressHUD/"/>
    
  </entry>
  
  <entry>
    <title>WKWebView高度自适应三种方式</title>
    <link href="http://blogwenbo.com/2018/08/27/WKWebView%E9%AB%98%E5%BA%A6%E8%87%AA%E9%80%82%E5%BA%94%E4%B8%89%E7%A7%8D%E6%96%B9%E5%BC%8F/"/>
    <id>http://blogwenbo.com/2018/08/27/WKWebView高度自适应三种方式/</id>
    <published>2018-08-27T14:27:00.000Z</published>
    <updated>2020-03-30T14:09:57.144Z</updated>
    
    <content type="html"><![CDATA[<p class="description"></p><a id="more"></a><h3 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h3><blockquote><p>Important<br>Starting in iOS 8.0 and OS X 10.10, use WKWebView to add web content to your app. Do not use UIWebView or WebView.</p></blockquote><p><strong>WKWebVIew</strong>是iOS8新出的API，旨在替代原有的<strong>UIWebView</strong>，相对于<strong>UIWebView</strong>，<strong>WKWebView</strong>有着更为强大性能和丰富的API。在项目开发过程中，我也更倾向于用<strong>WKWebView</strong>,但在使用过程中也遇到许多的问题。</p><p>最近接触使用网页视图比较多，自己在tableView和scrollView中嵌套网页视图，在获取网页视图高度遇到过不少的坑，例如高度不准确、底部留白断层，滚动一直获取高度问题。现在项目中使用的网页视图基本都替换成了<strong>WKWebView</strong>，关于<strong>WKWebView</strong>使用的一些坑，我强烈推荐一篇博客<a href="https://mp.weixin.qq.com/s/rhYKLIbXOsUJC_n6dt9UfA" target="_blank" rel="noopener">WKWebView 那些坑</a>，希望使用<strong>WKWebView</strong>能少走一些弯路，少踩一些坑。好了，话不多说了，我将项目中获取网页视图高度实际经验分享给大家，希望对你有所帮助，下面开始介绍吧！</p><h3 id="二、目录"><a href="#二、目录" class="headerlink" title="二、目录"></a>二、目录</h3><ul><li>通过KVO的方式</li><li>通过代理的方式</li><li>通过注入JS的方式，添加网页加载完成回调获取</li></ul><h4 id="通过KVO的方式"><a href="#通过KVO的方式" class="headerlink" title="通过KVO的方式"></a>通过KVO的方式</h4><p>这种方式获取的高度较为准确，但要注意表格中多次回调高度的问题。</p><ul><li><p>添加监听者</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#pragma mark ------ &lt; Private Method &gt; ------</span><br><span class="line">#pragma mark</span><br><span class="line">- (void)addWebViewObserver &#123;</span><br><span class="line">    [self.wkWebView.scrollView addObserver:self forKeyPath:@&quot;contentSize&quot; options:NSKeyValueObservingOptionNew context:nil];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>监听高度变化</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">#pragma mark ------ &lt; KVO &gt; ------</span><br><span class="line">- (void)observeValueForKeyPath:(NSString *)keyPath ofObject:(id)object change:(NSDictionary&lt;NSKeyValueChangeKey,id&gt; *)change context:(void *)context &#123;</span><br><span class="line">    /**  &lt; 法2 &gt;  */</span><br><span class="line">    /**  &lt; loading：防止滚动一直刷新，出现闪屏 &gt;  */</span><br><span class="line">    if ([keyPath isEqualToString:@&quot;contentSize&quot;]) &#123;</span><br><span class="line">        CGRect webFrame = self.wkWebView.frame;</span><br><span class="line">        webFrame.size.height = self.wkWebView.scrollView.contentSize.height;</span><br><span class="line">        self.wkWebView.frame = webFrame;</span><br><span class="line">        [self.tableView reloadRowsAtIndexPaths:[NSArray arrayWithObjects:[NSIndexPath indexPathForRow:3 inSection:0], nil] withRowAnimation:UITableViewRowAnimationNone];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>移除观察者</p></li><li><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">- (void)removeWebViewObserver &#123;</span><br><span class="line">    [self.wkWebView.scrollView removeObserver:self forKeyPath:@&quot;contentSize&quot;];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="通过代理的方式"><a href="#通过代理的方式" class="headerlink" title="通过代理的方式"></a>通过代理的方式</h4><p>这种方法通过<strong>WKNavigationDelegate</strong>代理方法<code>- (void)webView:(WKWebView *)webView didFinishNavigation:(WKNavigation *)navigation</code>，网页加载完成通过JS获取网页内容高度，但这种方式不一定就是最真实的高度，这时候可能网页内容还未加载完成，但以实际情况为准。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">/**  &lt; 法2 &gt;  */</span><br><span class="line">- (void)webView:(WKWebView *)webView didFinishNavigation:(WKNavigation *)navigation &#123;</span><br><span class="line">    //document.body.offsetHeight</span><br><span class="line">    //document.body.scrollHeight</span><br><span class="line">    //document.body.clientHeight</span><br><span class="line">    [webView evaluateJavaScript:@&quot;document.body.offsetHeight&quot; completionHandler:^(id _Nullable result, NSError * _Nullable error) &#123;</span><br><span class="line">       CGFloat documentHeight = [result doubleValue];</span><br><span class="line">        CGRect webFrame = webView.frame;</span><br><span class="line">        webFrame.size.height = documentHeight;</span><br><span class="line">        webView.frame = webFrame;</span><br><span class="line">        [self.tableView reloadRowsAtIndexPaths:[NSArray arrayWithObjects:[NSIndexPath indexPathForRow:3 inSection:0], nil] withRowAnimation:UITableViewRowAnimationNone];</span><br><span class="line">    &#125;];</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">//    CGRect webFrame = self.wkWebView.frame;</span><br><span class="line">//    CGFloat contentHeight = webView.scrollView.contentSize.height;</span><br><span class="line">//    webFrame.size.height = contentHeight;</span><br><span class="line">//    webView.frame = webFrame;</span><br><span class="line">//    [self.tableView reloadRowsAtIndexPaths:[NSArray arrayWithObjects:[NSIndexPath indexPathForRow:3 inSection:0], nil] withRowAnimation:UITableViewRowAnimationNone];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="通过注入JS的方式，添加网页加载完成回调获取"><a href="#通过注入JS的方式，添加网页加载完成回调获取" class="headerlink" title="通过注入JS的方式，添加网页加载完成回调获取"></a>通过注入JS的方式，添加网页加载完成回调获取</h4><p>第三种通常是接口返回<strong>HTMLString</strong>，然后自己在APP客户端成网页html、head、body这些标签，在合适的位置加入以下js代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=\<span class="string">"text/javascript\"&gt;\</span></span><br><span class="line"><span class="string">        window.onload = function() &#123;\</span></span><br><span class="line"><span class="string">        window.location.href = \"ready://\" + document.body.scrollHeight;\</span></span><br><span class="line"><span class="string">        &#125;\</span></span><br><span class="line"><span class="string"> &lt;/script&gt;</span></span><br></pre></td></tr></table></figure><p>然后借助WKWebView代理方法，就能准确获得网页高度：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">- (void)webView:(WKWebView *)webView decidePolicyForNavigationAction:(WKNavigationAction *)navigationAction decisionHandler:(void (^)(WKNavigationActionPolicy))decisionHandler &#123;</span><br><span class="line">    if (navigationAction.navigationType == WKNavigationTypeOther) &#123;</span><br><span class="line">        if ([[[navigationAction.request URL] scheme] isEqualToString:@&quot;ready&quot;]) &#123;</span><br><span class="line">            float contentHeight = [[[navigationAction.request URL] host] floatValue];</span><br><span class="line">            CGRect webFrame = self.wkWebView.frame;</span><br><span class="line">            webFrame.size.height = contentHeight;</span><br><span class="line">            webView.frame = webFrame;</span><br><span class="line">            </span><br><span class="line">            NSLog(@&quot;onload = %f&quot;,contentHeight);</span><br><span class="line">            </span><br><span class="line">            [self.tableView reloadRowsAtIndexPaths:[NSArray arrayWithObjects:[NSIndexPath indexPathForRow:3 inSection:0], nil] withRowAnimation:UITableViewRowAnimationNone];</span><br><span class="line">            </span><br><span class="line">            decisionHandler(WKNavigationActionPolicyCancel);</span><br><span class="line">            return;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    decisionHandler(WKNavigationActionPolicyAllow);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第三种方法在我写的demo中是看不到效果的，有兴趣的朋友可以自己拼接网页HTMLString测试效果。我也贴一个我在项目中添加以上代码片段的位置吧：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">\</span>"<span class="attr">utf-8</span>\"&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">\</span>"<span class="attr">viewport</span>\"<span class="attr">content</span>=<span class="string">\</span>"<span class="attr">width</span>=<span class="string">device-width,</span> <span class="attr">initial-scale</span>=<span class="string">1.0,</span> <span class="attr">minimum-scale</span>=<span class="string">1.0,</span> <span class="attr">maximum-scale</span>=<span class="string">1.0,</span> <span class="attr">user-scalable</span>=<span class="string">no\</span>"&gt;</span>\</span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">\</span>"<span class="attr">text</span>/<span class="attr">javascript</span>\"&gt;</span><span class="undefined">\</span></span><br><span class="line"><span class="javascript">     <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;\</span></span><br><span class="line"><span class="javascript">     <span class="built_in">window</span>.location.href = \<span class="string">"ready://\" + document.body.scrollHeight;\</span></span></span><br><span class="line"><span class="undefined">     &#125;\</span></span><br><span class="line"><span class="undefined">     </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">//接口返回网页内容，拼接在这里</span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="三、问题解决"><a href="#三、问题解决" class="headerlink" title="三、问题解决"></a>三、问题解决</h3><ul><li><p>解决web断层问题：<a href="https://www.jianshu.com/p/1d739e2e7ed2" target="_blank" rel="noopener">WKWebView刷新机制小探</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#pragma mark ------ &lt; UIScrollViewDeltegate &gt; ------</span><br><span class="line">- (void)scrollViewDidScroll:(UIScrollView *)scrollView &#123;</span><br><span class="line">    /**  &lt; 解决web白屏问题 &gt;  */</span><br><span class="line">    /**  &lt; 需要调用私有API：_updateVisibleContentRects &gt;  */</span><br><span class="line">    [self.wkWebView setNeedsLayout];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="四、demo"><a href="#四、demo" class="headerlink" title="四、demo"></a>四、demo</h3><p>最新demo请戳：<a href="https://github.com/wenmobo/WKWebViewAutoHeight" target="_blank" rel="noopener">WKWebViewAutoHeight</a></p><h3 id="五、参考资料"><a href="#五、参考资料" class="headerlink" title="五、参考资料"></a>五、参考资料</h3><ul><li><a href="http://www.skyfox.org/ios-webview-autofit-content-height.html" target="_blank" rel="noopener">ios webview自适应实际内容高度5种方法</a>     </li><li><a href="https://juejin.im/post/5a38c9055188254b8b3546bf" target="_blank" rel="noopener">iOS中webView嵌套tableView中动态高度问题</a></li><li><a href="https://www.jianshu.com/p/1d739e2e7ed2" target="_blank" rel="noopener">WKWebView刷新机制小探</a></li></ul>]]></content>
    
    <summary type="html">
    
      WKWebVIew是iOS8新出的API，旨在替代原有的UIWebView，相对于UIWebView，WKWebView有着更为强大性能和丰富的API。在项目开发过程中，我也更倾向于用WKWebView,但在使用过程中也遇到许多的问题。
    
    </summary>
    
      <category term="iOS" scheme="http://blogwenbo.com/categories/iOS/"/>
    
    
      <category term="iOS" scheme="http://blogwenbo.com/tags/iOS/"/>
    
      <category term="HTML" scheme="http://blogwenbo.com/tags/HTML/"/>
    
      <category term="JavaScript" scheme="http://blogwenbo.com/tags/JavaScript/"/>
    
      <category term="WKWebView" scheme="http://blogwenbo.com/tags/WKWebView/"/>
    
  </entry>
  
  <entry>
    <title>CocoaPods进阶：详解私有库制作</title>
    <link href="http://blogwenbo.com/2018/08/13/CocoaPods%E8%BF%9B%E9%98%B6%EF%BC%9A%E8%AF%A6%E8%A7%A3%E7%A7%81%E6%9C%89%E5%BA%93%E5%88%B6%E4%BD%9C/"/>
    <id>http://blogwenbo.com/2018/08/13/CocoaPods进阶：详解私有库制作/</id>
    <published>2018-08-13T13:58:51.000Z</published>
    <updated>2020-03-30T15:32:28.041Z</updated>
    
    <content type="html"><![CDATA[<p class="description"></p><a id="more"></a><h2 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h2><blockquote><p>自己一直想用CocoaPods制作pod库，在自己面试过程中也被面试官问到过组件化开发的概念，然尔自己那时也不是很了解，CocoaPods与组件化也息息相关，利用CocoaPods也便于维护pod组件，于是自己就决定学习用CocoaPods制作pod库，下面就开始讲解私有库的制作过程吧。</p></blockquote><h2 id="二、目录"><a href="#二、目录" class="headerlink" title="二、目录"></a>二、目录</h2><ul><li>安装CocoaPods</li><li>创建远程内部私有Spec Repo仓库</li><li>模板创建pod库</li><li>编辑***.podspec文件</li><li>验证本地是否通过</li><li>关联本地仓库，并推送到远程仓库，打标签</li><li>推送***.podspec到远程spec仓库</li><li>验证远程是否通过</li><li>验证私有仓库是否可用，pod集成私有库</li></ul><h3 id="安装CocoaPods"><a href="#安装CocoaPods" class="headerlink" title="安装CocoaPods"></a>安装CocoaPods</h3><p>首先要安装CocoaPods，没有安装可以参考我的博客<a href="https://www.jianshu.com/p/f218fe3baff8" target="_blank" rel="noopener">CocoaPods安装与使用</a>。</p><h4 id="创建远程内部私有Spec-Repo仓库"><a href="#创建远程内部私有Spec-Repo仓库" class="headerlink" title="创建远程内部私有Spec Repo仓库"></a>创建远程内部私有Spec Repo仓库</h4><p>这步自己采坑不少，一开始自己并不理解，不知到代码仓库和Spec Repo是需要分开存储的。好了，不说自己经历的曲折了，如果你还没有创建远程内部私有Spec Repo仓库, 需要到<a href="https://github.com/" target="_blank" rel="noopener">Github</a>,<a href="http://git.oschina.net/" target="_blank" rel="noopener">码云</a>或其他代码托管平台创建远程仓库, 之后将远程仓库克隆到本地，终端执行如下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//这里可以用https或ssh地址方式克隆</span><br><span class="line">pod repo add WBSpecs git@github.com:wenmobo/WBSpecs.git</span><br></pre></td></tr></table></figure><p>克隆之后，本地cocoapods目录如下：</p><p><img src="https://ws4.sinaimg.cn/large/0069RVTdly1fuaqlqavaij31js054dhh.jpg" alt=""></p><h4 id="模板创建pod库"><a href="#模板创建pod库" class="headerlink" title="模板创建pod库"></a>模板创建pod库</h4><ul><li><p><strong>第二步</strong>：在本地任意一个文件夹下创建pod库：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pod lib create WBAvoidCrash</span><br></pre></td></tr></table></figure><p>之后控制台输出</p><p><img src="https://ws2.sinaimg.cn/large/006tNbRwly1fu8fsp6s32j30vo05kmya.jpg" alt=""></p><p>接着会需要回答一些问题：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 你想使用哪个平台？</span></span><br><span class="line"><span class="number">1</span>、What platform <span class="keyword">do</span> you want to use?? [ iOS / macOS ]</span><br><span class="line">iOS</span><br><span class="line"><span class="comment"># 库语言选择？</span></span><br><span class="line"><span class="number">2</span>、What language <span class="keyword">do</span> you want to use?? [ Swift / ObjC ]</span><br><span class="line">ObjC</span><br><span class="line"><span class="comment"># 你要使用哪个测试框架？</span></span><br><span class="line"><span class="number">3</span>、Which testing frameworks will you use? [ Specta / Kiwi / None ]</span><br><span class="line">None</span><br><span class="line"><span class="comment"># 是否要UI测试？</span></span><br><span class="line"><span class="number">4</span>、Would you like to <span class="keyword">do</span> view based testing? [ Yes / No ]</span><br><span class="line">NO</span><br><span class="line"><span class="comment"># 类名前缀？</span></span><br><span class="line"><span class="number">5</span>、What is your <span class="class"><span class="keyword">class</span> <span class="title">prefix?</span></span></span><br><span class="line">WB</span><br></pre></td></tr></table></figure><p>成功之后，目录如下：</p><p><img src="https://ws3.sinaimg.cn/large/006tNbRwly1fu8g2rfjkhj30m00cm768.jpg" alt=""></p><p>工程目录如下：</p><p><img src="https://ws3.sinaimg.cn/large/006tNbRwly1fu8g5h5i4ej31js13c4gs.jpg" alt=""></p></li><li><p>在工程<strong>WBAvoidCrash</strong>目录添加我们的代码文件：</p><p><img src="https://ws4.sinaimg.cn/large/006tNbRwly1fu8gebt4mpj30f00bgwg2.jpg" alt=""></p><p>添加完成之后如下：</p><p><img src="https://ws1.sinaimg.cn/large/006tNbRwly1fu8ghg3iwbj30eg0v0100.jpg" alt=""></p><p><strong>注意</strong>：代码文件需要添加到<strong>WBAvoidCrash/Classes</strong>目录下。</p></li></ul><h4 id="编辑-podspec文件"><a href="#编辑-podspec文件" class="headerlink" title="编辑***.podspec文件"></a>编辑***.podspec文件</h4><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line">Pod::Spec.new <span class="keyword">do</span> <span class="params">|s|</span></span><br><span class="line">  <span class="comment">#库名称</span></span><br><span class="line">  s.name             = <span class="string">'WBAvoidCrash'</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">#指定支持的平台和版本，不写则默认支持所有的平台，如果支持多个平台，则使用下面的deployment_target定义</span></span><br><span class="line">  spec.platform = <span class="symbol">:ios</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">#版本号</span></span><br><span class="line">  s.version          = <span class="string">'1.0.0'</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">#库简短介绍</span></span><br><span class="line">  s.summary          = <span class="string">'iOS 防Crash库'</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">#开源库描述 </span></span><br><span class="line">  s.description      = <span class="string">""</span></span><br><span class="line">                       </span><br><span class="line">  <span class="comment"># 开源库地址，或者是博客、社交地址等</span></span><br><span class="line">  s.homepage         = <span class="string">'https://github.com/wenmobo/WBAvoidCrash'</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment"># 开源协议</span></span><br><span class="line">  s.license          = &#123; <span class="symbol">:type</span> =&gt; <span class="string">'MIT'</span>, <span class="symbol">:file</span> =&gt; <span class="string">'LICENSE'</span> &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment"># 开源库作者</span></span><br><span class="line">  s.author           = &#123; <span class="string">'wenmobo'</span> =&gt; <span class="string">'wenmobo2018@gmail.com'</span> &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment"># 开源库GitHub的路径与tag值，GitHub路径后必须有.git,tag实际就是上面的版本</span></span><br><span class="line">  s.source           = &#123; <span class="symbol">:git</span> =&gt; <span class="string">'https://github.com/wenmobo/WBAvoidCrash.git'</span>, <span class="symbol">:tag</span> =&gt; s.version &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment"># 社交网址</span></span><br><span class="line">  s.social_media_url = <span class="string">'http://blogwenbo.com/'</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment"># 开源库最低支持</span></span><br><span class="line">  s.ios.deployment_target = <span class="string">'8.0'</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment"># 源库资源文件</span></span><br><span class="line">  s.source_files = <span class="string">'WBAvoidCrash/Classes/**/*'</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment"># 是否支持arc</span></span><br><span class="line">  s.requires_arc = <span class="literal">true</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment"># ---------------- Dependency --------------</span></span><br><span class="line">  <span class="comment">#开源库依赖库</span></span><br><span class="line">  s.dependency <span class="string">"Masonry"</span></span><br><span class="line">  <span class="comment"># 指定版本</span></span><br><span class="line">  s.dependency <span class="string">"Masonry"</span>, <span class="string">"~&gt; 1.0"</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment"># ---------------- Project Linking ----------------</span></span><br><span class="line">  <span class="comment"># 添加系统依赖静态库</span></span><br><span class="line">  s.library = <span class="string">'sqlite3'</span>, <span class="string">'xml2'</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">#依赖系统库</span></span><br><span class="line">  s.frameworks = <span class="string">'Foundation'</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">#添加依赖第三方的framework</span></span><br><span class="line">  s.vendored_frameworks = <span class="string">'XXXX/XXXX/**/*.framework'</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">#静态库.a</span></span><br><span class="line">  s.vendored_library = <span class="string">'XXXX/XXX/XXX.a'</span>, <span class="string">'YYY/YYY/Y.a'</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment"># ---------------- Resource ------------------</span></span><br><span class="line">  s.resource  = <span class="string">"icon.png"</span></span><br><span class="line">  s.resources = <span class="string">"Resources/*.png"</span></span><br><span class="line">  s.resource_bundles = &#123;</span><br><span class="line">   <span class="string">'ATCategory'</span> =&gt; [<span class="string">'ATCategory/Images/*.png'</span>]</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">#添加资源文件</span></span><br><span class="line">  s.resource = <span class="string">'XXX/XXXX/**/*.bundle'</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment"># ---------------- Project Setting ----------------</span></span><br><span class="line">  s.xcconfig = &#123; <span class="string">"HEADER_SEARCH_PATHS"</span> =&gt; <span class="string">"$(SDKROOT)/usr/include/libxml2"</span> &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment"># pod工程配置，指模拟器指令集配置</span></span><br><span class="line">  ss.pod_target_xcconfig = &#123;</span><br><span class="line">    <span class="string">'ARCHS[sdk=iphonesimulator*]'</span> =&gt; <span class="string">'$(ARCHS_STANDARD_64_BIT)'</span></span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment"># 在 podspec 文件中添加 s.static_framework = true，CocoaPods 就会把这个库配置成static framework。同时支持 Swift 和 Objective-C</span></span><br><span class="line">  s.static_framework = <span class="literal">true</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment"># ---------------- Subspec ----------------</span></span><br><span class="line">  s.subspec <span class="string">'sub'</span> <span class="keyword">do</span> <span class="params">|ss|</span></span><br><span class="line">    ss.source_files = <span class="string">'WBAvoidCrash/Classes/**/*'</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  </span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><ul><li><strong>关于s.source_files写法</strong></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">//表示匹配WBAvoidCrash/Classes下所有文件(主目录和子目录，其中**相当于省略中间层级)</span><br><span class="line">&apos;WBAvoidCrash/Classes/**/*&apos;</span><br><span class="line">//表示匹配Classes所有以.h和.m结尾的文件</span><br><span class="line">&apos;WBAvoidCrash/Classes/*.&#123;h,m&#125;&apos;</span><br><span class="line">//表示匹配所有WBAvoidCrash目录下文件，不包含子目录</span><br><span class="line">&apos;WBAvoidCrash/*&apos;</span><br></pre></td></tr></table></figure><p>更多关于资源目录层级写法可以参考GitHub一些著名框架，<a href="https://github.com/AFNetworking/AFNetworking/blob/master/AFNetworking.podspec" target="_blank" rel="noopener">AFNetworking.podspec</a>、<a href="https://github.com/renzifeng/ZFPlayer/blob/master/ZFPlayer.podspec" target="_blank" rel="noopener">ZFPlayer.podspec</a>等。</p><ul><li><p><strong>s.dependency关于依赖三库，依赖多个三方库如下：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">s.dependency &apos;Masonry&apos;</span><br><span class="line">s.dependency &apos;MJRefresh&apos;</span><br><span class="line">s.dependency &apos;Masonry&apos; &apos;YYModel&apos;</span><br></pre></td></tr></table></figure></li></ul><h4 id="验证本地是否通过"><a href="#验证本地是否通过" class="headerlink" title="验证本地是否通过"></a>验证本地是否通过</h4><ul><li>配置好podspec之后，验证本地库是否通过验证，终端输入如下命令：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pod lib lint</span><br></pre></td></tr></table></figure><p>通过验证，终端输出如下：</p><p><img src="https://ws2.sinaimg.cn/large/0069RVTdly1fuarsoxm53j30vi05ijso.jpg" alt=""></p><ul><li>报如下错误</li></ul><p><img src="https://upload-images.jianshu.io/upload_images/3072214-258e21287c18f67b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="屏幕快照 2018-08-14 上午12.21.07.png"></p><p>需在Xcode中配置：</p><p><img src="https://upload-images.jianshu.io/upload_images/3072214-416eef1ea9e99431.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="屏幕快照 2018-08-14 上午12.34.17.png"></p><ul><li>如果pod库存在警告是不能通过验证的，如果要暂时忽略警告通过验证（如码云创建的私有库<strong>s.homepage</strong>地址不可达警告），可使用如下命令：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pod lib lint --allow-warnings</span><br></pre></td></tr></table></figure><ul><li><p>你制作的pod库依赖三方库，而三方库包含静态库（如：<strong>xxxx.a</strong>），在验证的时候，不能验证通过，可使用如下命令：</p></li><li><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">pod lib lint --use-libraries</span><br><span class="line"></span><br><span class="line">//同时忽略警告</span><br><span class="line">pod lib lint --use-libraries --allow-warnings</span><br></pre></td></tr></table></figure></li></ul><p>不管怎样都要解决pod库存在的警告，并通过验证。</p><h4 id="关联本地仓库，并推送到远程仓库，打标签"><a href="#关联本地仓库，并推送到远程仓库，打标签" class="headerlink" title="关联本地仓库，并推送到远程仓库，打标签"></a>关联本地仓库，并推送到远程仓库，打标签</h4><ul><li>如果你还未创建远程仓库，你需要创建与之对应的远程仓库，我是在GitHub创建的仓库，这里也不再赘述创建方法。创建之后须与本地仓库关联，在终端执行如下命令：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#提交代码到暂存区</span><br><span class="line">git add .</span><br><span class="line">#提交到本地仓库</span><br><span class="line">git commit -m &quot;create WBAvoidCrash Library&quot;</span><br><span class="line">#添加到远程仓库</span><br><span class="line">git remote add origin git@github.com:wenmobo/WBAvoidCrash.git</span><br><span class="line">#推送到远程仓库</span><br><span class="line">git push origin master</span><br></pre></td></tr></table></figure><ul><li><p>最近在用码云制作私有库的时候按照上面git命令，在执行<code>git push origin master</code>会报错，需要执行以下命令或者按终端提示的信息操作，第一次才能成功推送到远程仓库：</p></li><li><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git pull --rebase origin master</span><br></pre></td></tr></table></figure></li><li><p>提交完成之后进行打标签操作：</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#打标签</span><br><span class="line">git tag -a 1.0.0 -m &apos;release version 1.0.0&apos;</span><br><span class="line">#推送标签到远程</span><br><span class="line">git push origin 1.0.0</span><br></pre></td></tr></table></figure><p><strong>友情提示</strong></p><p>关于git打标签操作，你可以借助<a href="https://www.sourcetreeapp.com/" target="_blank" rel="noopener"><em>Sourcetree</em></a>或者终端命令，可以查看我的博客<a href="https://www.jianshu.com/p/3e85e15c5e43" target="_blank" rel="noopener">MAC上Git打标签</a>。</p><h4 id="推送-podspec到远程"><a href="#推送-podspec到远程" class="headerlink" title="推送***.podspec到远程"></a>推送***.podspec到远程</h4><p>首先将本地WBAvoidCrash.podspec推送到远程私有repo spec仓库和本地repo spec仓库，终端执行如下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd [WBAvoidCrash库路径]</span><br><span class="line">pod repo push WBSpecs WBAvoidCrash.podspec</span><br></pre></td></tr></table></figure><p><img src="https://ws4.sinaimg.cn/large/0069RVTdly1fuat1gb99mj30y00eijth.jpg" alt=""></p><h4 id="验证远程是否通过"><a href="#验证远程是否通过" class="headerlink" title="验证远程是否通过"></a>验证远程是否通过</h4><p>推送成功之后，终端输入如下命令进行验证：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pod spec lint WBAvoidCrash.podspec</span><br></pre></td></tr></table></figure><p>验证通过终端输出如下：</p><p><img src="https://ws3.sinaimg.cn/large/0069RVTdly1fuat21dm07j30ye08e3zt.jpg" alt=""></p><ul><li><p>同样这里如果还存在着警告或者错误，同样不能验证通过，同样可以用以下命令忽略警告通过验证：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pod spec lint WBAvoidCrash.podspec --allow-warnings</span><br><span class="line">pod spec lint WBAvoidCrash.podspec --use-libraries</span><br><span class="line">pod spec lint WBAvoidCrash.podspec --allow-warnings --use-libraries</span><br></pre></td></tr></table></figure></li></ul><h4 id="验证私有仓库是否可用，pod集成私有库"><a href="#验证私有仓库是否可用，pod集成私有库" class="headerlink" title="验证私有仓库是否可用，pod集成私有库"></a>验证私有仓库是否可用，pod集成私有库</h4><p>验证通过之后，下面进行测试，看是否能通过cocoapods集成到我们的项目，首先用pod命令进行搜索，看能否搜索到：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pod search WBAvoidCrash</span><br></pre></td></tr></table></figure><p>这时可能会报如下错误</p><p><img src="https://ws3.sinaimg.cn/large/0069RVTdly1fuat8rv62bj30xw04s3zw.jpg" alt=""></p><p>不要慌，在终端执行如下命令，然后重新search：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rm ~/Library/Caches/CocoaPods/search_index.json</span><br></pre></td></tr></table></figure><p>耐心等待之后，发现能搜到自己创建的私有库了：</p><p><img src="https://ws1.sinaimg.cn/large/0069RVTdly1fuatj9r8cwj30xu07agmu.jpg" alt=""></p><p>新建一个测试工程测试，用CocoaPods初始化项目，编辑<strong>podfile</strong>文件：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span>CocoaPods官方spec仓库</span><br><span class="line">source 'https://github.com/CocoaPods/Specs.git'</span><br><span class="line"><span class="meta">#</span>自己私有spec仓库</span><br><span class="line">source 'https://github.com/wenmobo/WBSpecs.git'</span><br><span class="line"></span><br><span class="line">platform :ios, '8.0'</span><br><span class="line"></span><br><span class="line">target 'Test' do</span><br><span class="line"><span class="meta">  #</span>防Crash库</span><br><span class="line">  pod 'WBAvoidCrash'</span><br><span class="line"></span><br><span class="line"><span class="meta">  #</span> Pods for Test</span><br><span class="line"></span><br><span class="line">  target 'TestTests' do</span><br><span class="line">    inherit! :search_paths</span><br><span class="line">    # Pods for testing</span><br><span class="line">  end</span><br><span class="line"></span><br><span class="line">  target 'TestUITests' do</span><br><span class="line">    inherit! :search_paths</span><br><span class="line">    # Pods for testing</span><br><span class="line">  end</span><br><span class="line"></span><br><span class="line">end</span><br></pre></td></tr></table></figure><p>编辑好<strong>podfile</strong>文件之后，终端执行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pod install</span><br><span class="line">或</span><br><span class="line">pod install --no-repo-update</span><br></pre></td></tr></table></figure><p>耐心等待一会儿，你会发现私有库已经集成到测试项目中了：</p><p><img src="https://ws3.sinaimg.cn/large/006tNbRwly1fung83adapj31jy0t8k1k.jpg" alt=""></p><p>到这里，cocoapods私有库制作已讲解完成。也为自己制作的第一个私有库打波广告吧☺️☺️，<a href="https://github.com/wenmobo/WBAvoidCrash" target="_blank" rel="noopener">WBAvoidCrash</a>一个防Crash库，现在支持9种防崩溃类型，集成方便，使用无需导入相关的头文件，这个库之前没这么完善，后来参考借鉴了一些大神开源的库。下面👇贴出私有库地址吧：</p><p><a href="https://github.com/wenmobo/WBAvoidCrash" target="_blank" rel="noopener">WBAvoidCrash</a></p><h2 id="三、相关命令"><a href="#三、相关命令" class="headerlink" title="三、相关命令"></a>三、相关命令</h2><h4 id="cocoapods"><a href="#cocoapods" class="headerlink" title="cocoapods"></a>cocoapods</h4><ul><li><p>查看所有repo</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pod repo list</span><br></pre></td></tr></table></figure></li><li><p>移除某个repo</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pod repo remove [spec]</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>更新repo</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 更新所有repo</span></span><br><span class="line">pod repo update</span><br><span class="line"><span class="comment"># 更新指定</span></span><br><span class="line">pod repo update [spec库名]</span><br></pre></td></tr></table></figure></li><li><p>验证可选参数</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">--quick                                Lint skips checks that would <span class="keyword">require</span></span><br><span class="line">                                           to download <span class="keyword">and</span> build the spec</span><br><span class="line">--allow-warnings                       Lint validates even <span class="keyword">if</span> warnings are</span><br><span class="line">                                     present</span><br><span class="line">--subspec=NAME                         Lint validates only the given subspec</span><br><span class="line">--no-subspecs                          Lint skips validation of subspecs</span><br><span class="line">--no-clean                             Lint leaves the build directory</span><br><span class="line">                                     intact <span class="keyword">for</span> inspection</span><br><span class="line">--fail-fast                            Lint stops on the first failing</span><br><span class="line">                                     platform <span class="keyword">or</span> subspec</span><br><span class="line">--use-libraries                        Lint uses static libraries to install</span><br><span class="line">                                     the spec</span><br><span class="line">--use-modular-headers                  Lint uses modular headers during</span><br><span class="line">                                     installation</span><br><span class="line">--sources=<span class="symbol">https:</span>/<span class="regexp">/cdn.cocoapods.org/</span>   The sources from which to pull</span><br><span class="line">                                     dependent pods (defaults to</span><br><span class="line">                                     <span class="symbol">https:</span>/<span class="regexp">/cdn.cocoapods.org/</span>). Multiple</span><br><span class="line">                                     sources must be comma-delimited</span><br><span class="line">--platforms=ios,macos                  Lint against specific platforms</span><br><span class="line">                                     (defaults to all platforms supported</span><br><span class="line">                                     by the podspec). Multiple platforms</span><br><span class="line">                                     must be comma-delimited</span><br><span class="line">--private                              Lint skips checks that apply only to</span><br><span class="line">                                     public specs</span><br><span class="line">--swift-version=VERSION                The <span class="string">`SWIFT_VERSION`</span> that should be</span><br><span class="line">                                     used to lint the spec. This takes</span><br><span class="line">                                     precedence over the Swift versions</span><br><span class="line">                                     specified by the spec <span class="keyword">or</span> a</span><br><span class="line">                                     <span class="string">`.swift-version`</span> file</span><br><span class="line">--<span class="keyword">include</span>-podspecs=**<span class="regexp">/*.podspec        Additional ancillary podspecs which</span></span><br><span class="line"><span class="regexp">                                     are used for linting via :path</span></span><br><span class="line"><span class="regexp">--external-podspecs=**/</span>*.podspec       Additional ancillary podspecs which</span><br><span class="line">                                     are used <span class="keyword">for</span> linting via <span class="symbol">:podspec</span>. If</span><br><span class="line">                                     there are --<span class="keyword">include</span>-podspecs, <span class="keyword">then</span></span><br><span class="line">                                     these are removed from them</span><br><span class="line">--skip-import-validation               Lint skips validating that the pod</span><br><span class="line">                                     can be imported</span><br><span class="line">--skip-tests                           Lint skips building <span class="keyword">and</span> running tests</span><br><span class="line">                                     during validation</span><br><span class="line">--analyze                              Validate with the Xcode Static</span><br><span class="line">                                     Analysis tool</span><br><span class="line">--silent                               Show nothing</span><br><span class="line">--verbose                              Show more debugging information</span><br><span class="line">--no-ansi                              Show output without ANSI codes</span><br><span class="line">--help                                 Show help banner of specified command</span><br></pre></td></tr></table></figure><p>可通过如下命令查看可选参数</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pod lib lint --help</span><br></pre></td></tr></table></figure></li><li><p>验证本地pod库</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 验证本地pod库</span></span><br><span class="line">pod lib lint</span><br><span class="line"><span class="comment"># 本地验证忽略警告</span></span><br><span class="line">pod lib lint --allow-warnings</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>验证远程</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#验证远程</span><br><span class="line">pod spec lint [name].podspec</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>搜索pod库</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pod search [库名]</span><br></pre></td></tr></table></figure></li></ul><h2 id="四、问题解决"><a href="#四、问题解决" class="headerlink" title="四、问题解决"></a>四、问题解决</h2><h3 id="4-1、JPush制作私有库lint时报错-symbol-s-not-found-for-architecture-i386"><a href="#4-1、JPush制作私有库lint时报错-symbol-s-not-found-for-architecture-i386" class="headerlink" title="4.1、JPush制作私有库lint时报错 symbol(s) not found for architecture i386"></a>4.1、JPush制作私有库lint时报错 symbol(s) not found for architecture i386</h3><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">valid_archs = [<span class="string">'armv7s'</span>,<span class="string">'arm64'</span>,]</span><br><span class="line">s.xcconfig = &#123;</span><br><span class="line">  <span class="string">'VALID_ARCHS'</span> =&gt;  valid_archs.join(<span class="string">' '</span>),</span><br><span class="line">&#125;</span><br><span class="line">s.pod_target_xcconfig = &#123;</span><br><span class="line">    <span class="string">'ARCHS[sdk=iphonesimulator*]'</span> =&gt; <span class="string">'$(ARCHS_STANDARD_64_BIT)'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-2、私有库依赖私有库验证不通过"><a href="#4-2、私有库依赖私有库验证不通过" class="headerlink" title="4.2、私有库依赖私有库验证不通过"></a>4.2、私有库依赖私有库验证不通过</h3><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">--sources=[private spec],[cocoapods spec]</span><br><span class="line"><span class="comment"># 如下写法</span></span><br><span class="line">pod lib lint --no-clean --sources=<span class="symbol">https:</span>/<span class="regexp">/xxx.git,https:/</span><span class="regexp">/github.com/</span>CocoaPods/Specs.git --allow-warnings --use-libraries --use-modular-headers --verbose</span><br></pre></td></tr></table></figure><h2 id="五、结语"><a href="#五、结语" class="headerlink" title="五、结语"></a>五、结语</h2><blockquote><p>终于完成这篇博客了，从自己比较熟悉GitHub之后，也想过自己能够开源一款三方库，然而自己水平有限，现在还没有拿的出来好的封装库或一些好的封装思想。但自己还是要学会制作pod库，在写博客之前，自己在谷歌浏览器查了许多的资料，资料也是比较的凌乱，自己在制作过程中也踩了许多的坑，最后自己也成功制作了一个私有库<a href="https://github.com/wenmobo/WBAvoidCrash" target="_blank" rel="noopener">WBAvoidCrash</a>，过程虽然有些坎坷，但自己还是很有成就感。自己也是第一次制作，如果有描述不对的地方，希望大家能够批评指正，我也会第一时间修改，同时也希望这篇博客对需要的朋友一些帮助，接下来我也会写一篇记录公开库制作过程的博客。</p></blockquote><h2 id="六、参考文章"><a href="#六、参考文章" class="headerlink" title="六、参考文章"></a>六、参考文章</h2><p>1、<a href="https://segmentfault.com/a/1190000007947371" target="_blank" rel="noopener"> CocoaPods创建公有和私有Pod库方法总结</a><br>2、<a href="https://blog.csdn.net/conglin1991/article/details/55096422" target="_blank" rel="noopener">出现Unable to find a pod with name, author, summary, or description matching解决方法</a><br>3、<a href="https://www.jianshu.com/p/d2d81b58d716" target="_blank" rel="noopener">如何发布自己的开源框架到CocoaPods</a><br>4、<a href="https://www.jianshu.com/p/d2d81b58d716" target="_blank" rel="noopener">使用CocoaPods管理iOS库—制作pod篇</a><br>5、<a href="https://www.jianshu.com/p/ddc2490bff9f" target="_blank" rel="noopener">如何创建私有 CocoaPods 仓库</a><br>6、<a href="https://guides.cocoapods.org/making/making-a-cocoapod.html" target="_blank" rel="noopener">Making a CocoaPod</a><br>7、<a href="https://medium.com/@shahabejaz/create-and-distribute-private-libraries-with-cocoapods-5b6507b57a03" target="_blank" rel="noopener">Create and Distribute Private Libraries with Cocoapods</a><br>8、<a href="https://www.jianshu.com/p/7d0ad4cde012" target="_blank" rel="noopener">CocoaPods使用总结</a></p>]]></content>
    
    <summary type="html">
    
      自己一直想用CocoaPods制作pod库，在自己面试过程中也被面试官问到过组件化开发的概念，然尔自己那时也不是很了解，CocoaPods与组件化也息息相关，利用CocoaPods也便于维护pod组件，于是自己就决定学习用CocoaPods制作pod库，下面就开始讲解私有库的制作过程吧。
    
    </summary>
    
      <category term="iOS" scheme="http://blogwenbo.com/categories/iOS/"/>
    
    
      <category term="iOS" scheme="http://blogwenbo.com/tags/iOS/"/>
    
      <category term="CocoaPods" scheme="http://blogwenbo.com/tags/CocoaPods/"/>
    
      <category term="GitHub" scheme="http://blogwenbo.com/tags/GitHub/"/>
    
      <category term="Git" scheme="http://blogwenbo.com/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>CocoaPods安装与使用</title>
    <link href="http://blogwenbo.com/2018/08/01/CocoaPods%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/"/>
    <id>http://blogwenbo.com/2018/08/01/CocoaPods安装与使用/</id>
    <published>2018-08-01T13:30:38.000Z</published>
    <updated>2020-03-30T14:09:57.142Z</updated>
    
    <content type="html"><![CDATA[<p class="description"></p><a id="more"></a><h3 id="更新日志"><a href="#更新日志" class="headerlink" title="更新日志"></a>更新日志</h3><p>2018-08-01：整理文章目录结构，添加忽略CocoaPods警告方法，解决出现OTHER_LDFLAGS方法。</p><p><strong>介绍内容目录</strong></p><ul><li>一、安装RVM</li><li>二、配置RubyGems</li><li>三、CocoaPods安装</li><li>四、CocoaPods使用</li><li>五、卸载CocoaPods</li><li>六、问题解决<h3 id="一、安装RVM"><a href="#一、安装RVM" class="headerlink" title="一、安装RVM"></a>一、安装<a href="https://rvm.io/" target="_blank" rel="noopener">RVM</a></h3></li><li><p>安装RVM命令如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -L get.rvm.io | bash -s stable</span><br></pre></td></tr></table></figure></li><li><p>查看rvm版本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rvm -v</span><br></pre></td></tr></table></figure></li><li><p>更新RVM</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rvm get stable</span><br></pre></td></tr></table></figure></li><li><p>查看可下载的ruby版本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rvm list known</span><br></pre></td></tr></table></figure></li></ul><p>输出结果为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"># MRI Rubies</span><br><span class="line">[ruby-]1.8.6[-p420]</span><br><span class="line">[ruby-]1.8.7[-head] # security released on head</span><br><span class="line">[ruby-]1.9.1[-p431]</span><br><span class="line">[ruby-]1.9.2[-p330]</span><br><span class="line">[ruby-]1.9.3[-p551]</span><br><span class="line">[ruby-]2.0.0[-p648]</span><br><span class="line">[ruby-]2.1[.10]</span><br><span class="line">[ruby-]2.2[.7]</span><br><span class="line">[ruby-]2.3[.4]</span><br><span class="line">[ruby-]2.4[.1]</span><br><span class="line">ruby-head</span><br></pre></td></tr></table></figure></p><ul><li>选择版本安装<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//安装2.4.1</span><br><span class="line">rvm install 2.4.1</span><br></pre></td></tr></table></figure></li></ul><p>安装如果遇到如下错误：<br><img src="https://user-gold-cdn.xitu.io/2018/1/24/161288dc7e81a81c?w=1138&amp;h=120&amp;f=png&amp;s=30306" alt="屏幕快照 2017-12-17 下午1.59.45.png"><br>安装Command Line Tools即可<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xcode-select --install</span><br></pre></td></tr></table></figure></p><ul><li>查看已安装的版本<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rvm list</span><br></pre></td></tr></table></figure></li></ul><p>输出结果如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">rvm rubies</span><br><span class="line">=* ruby-2.4.1 [ x86_64 ]</span><br><span class="line"># =&gt; - current</span><br><span class="line"># =* - current &amp;&amp; default</span><br><span class="line">#  * - default</span><br></pre></td></tr></table></figure></p><ul><li><p>查看当前使用的版本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rvm current</span><br></pre></td></tr></table></figure></li><li><p>设置默认版本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rvm use 2.4.1 --default</span><br></pre></td></tr></table></figure></li><li><p>删除安装过的版本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rvm remove 2.2.2</span><br></pre></td></tr></table></figure></li></ul><p>如果提示权限不足，同理加上sudo<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo rvm remove 2.2.2</span><br></pre></td></tr></table></figure></p><h3 id="二、升级RubyGems"><a href="#二、升级RubyGems" class="headerlink" title="二、升级RubyGems"></a>二、升级<a href="https://rubygems.org/?locale=zh-CN" target="_blank" rel="noopener">RubyGems</a></h3><ul><li>在终端输入：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gem update --system</span><br></pre></td></tr></table></figure></li></ul><p>若果是最新，则输出：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Latest version currently installed. Aborting.</span><br></pre></td></tr></table></figure></p><ul><li><p>若果没有权限报错，在命令前加上sudo</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo gem update --system</span><br></pre></td></tr></table></figure></li><li><p>更换源（最新使用的是：<a href="https://gems.ruby-china.org/）" target="_blank" rel="noopener">https://gems.ruby-china.org/）</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">gem sources --remove https://rubygems.org/</span><br><span class="line"></span><br><span class="line">gem sources -a https://gems.ruby-china.org/</span><br></pre></td></tr></table></figure></li><li><p>查看ruby镜像</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gem source -l</span><br></pre></td></tr></table></figure></li></ul><p>输出结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://gems.ruby-china.org/</span><br></pre></td></tr></table></figure></p><h3 id="三、CocoaPods安装"><a href="#三、CocoaPods安装" class="headerlink" title="三、CocoaPods安装"></a>三、<a href="https://guides.cocoapods.org/using/getting-started.html#getting-started" target="_blank" rel="noopener">CocoaPods</a>安装</h3><ul><li><p>终端输入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo gem install cocoapods</span><br><span class="line">或</span><br><span class="line">sudo gem install -n /usr/local/bin cocoapods</span><br></pre></td></tr></table></figure></li><li><p>安装了多个xcode进行选择</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo xcode-select -switch /Applications/Xcode.app/Contents/Developer</span><br></pre></td></tr></table></figure></li><li><p>安装本地库</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pod setup</span><br></pre></td></tr></table></figure></li></ul><p>执行上面的命令过后，会出现卡主不动，这个是时候是在下载，通常会等很久。这是后可以通过<code>cmmand+n</code>新创一个终端窗口，然后<code>cd ~/.cocoapods/</code>到该文件下，执行<code>du -sh *</code>查看大小：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1015Mrepos</span><br></pre></td></tr></table></figure></p><ul><li><p>查看版本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pod --version</span><br></pre></td></tr></table></figure></li><li><p>升级CocoaPods</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo gem install -n /usr/local/bin cocoapods</span><br><span class="line">或</span><br><span class="line">sudo gem install cocoapods</span><br></pre></td></tr></table></figure></li></ul><h3 id="四、CocoaPods使用"><a href="#四、CocoaPods使用" class="headerlink" title="四、CocoaPods使用"></a>四、CocoaPods使用</h3><h4 id="工程导入三方库"><a href="#工程导入三方库" class="headerlink" title="工程导入三方库"></a>工程导入三方库</h4><ul><li><p>创建一个工程test，终端切换到工程路径：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd 工程路径</span><br></pre></td></tr></table></figure></li><li><p>终端输入：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pod init</span><br></pre></td></tr></table></figure></li></ul><p>这时工程就会生成一个podfile<br><img src="https://user-gold-cdn.xitu.io/2018/1/24/161288dc7ef162b2?w=1240&amp;h=136&amp;f=png&amp;s=49290" alt="屏幕快照 2017-12-17 下午5.39.24.png"></p><ul><li>编辑podfile：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim podfile</span><br></pre></td></tr></table></figure></li></ul><p>进入之后按<code>i</code>进入编辑模式，添加三方开源库如：<code>pod &#39;AFNetworking&#39;</code>(也可指定版本<code>pod &#39;AFNetworking&#39;, &#39;~&gt; 3.1.0&#39;</code>)，然后输入<code>:wq</code>回车保存。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"># Uncomment the next line to define a global platform for your project</span><br><span class="line"># platform :ios, &apos;9.0&apos;</span><br><span class="line">pod &apos;AFNetworking&apos;</span><br><span class="line">target &apos;test&apos; do</span><br><span class="line">  # Uncomment the next line if you&apos;re using Swift or would like to use dynamic frameworks</span><br><span class="line">  # use_frameworks!</span><br><span class="line"></span><br><span class="line">  # Pods for test</span><br><span class="line"></span><br><span class="line">end</span><br><span class="line">~                                                                               </span><br><span class="line">~                                                                               </span><br><span class="line">~                                                                                                                                                        </span><br><span class="line">:wq</span><br></pre></td></tr></table></figure></p><ul><li>执行安装<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pod install</span><br><span class="line">或</span><br><span class="line">pod install --no-repo-update</span><br></pre></td></tr></table></figure></li></ul><p>好了，到此CocoaPods的安装与使用都介绍完毕。<br><img src="https://user-gold-cdn.xitu.io/2018/1/24/161288dc7f1688b0?w=402&amp;h=264&amp;f=png&amp;s=26984" alt="屏幕快照 2017-12-17 下午5.47.41.png"></p><h4 id="更新三方库"><a href="#更新三方库" class="headerlink" title="更新三方库"></a>更新三方库</h4><ul><li><p>更新所有三方库</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//更新所有可更新的三方库</span><br><span class="line">pod update</span><br></pre></td></tr></table></figure></li><li><p>间接更新三方库</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">cd ~/.cocoapods</span><br><span class="line">ls</span><br><span class="line">cd repos</span><br><span class="line">ls</span><br><span class="line">cd master</span><br><span class="line">ls</span><br><span class="line">ls -a</span><br><span class="line">git pull</span><br></pre></td></tr></table></figure></li><li><p>更新指定库</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pod update Masonry</span><br></pre></td></tr></table></figure></li><li><p>省时更新方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pod update --verbose --no-repo-update</span><br></pre></td></tr></table></figure></li></ul><h4 id="移除导入过的三方库"><a href="#移除导入过的三方库" class="headerlink" title="移除导入过的三方库"></a>移除导入过的三方库</h4><ul><li>第一步：编辑<strong>podfile</strong>，将需要删除的三方库移除掉<br><del>pod ‘AFNetworking’, ‘~&gt;3.1.0’</del></li><li>第二步：执行<code>pod install</code>，重新编译，如果没有报错则移除成功<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pod install</span><br></pre></td></tr></table></figure></li></ul><h4 id="移除工程中CocoaPods"><a href="#移除工程中CocoaPods" class="headerlink" title="移除工程中CocoaPods"></a>移除工程中CocoaPods</h4><ul><li>删除工程文件夹下的Podfile、Podfile.lock和Pods文件夹</li><li>删除xcworkspace文件</li><li>打开xcodeproj文件，删除项目中的libpods.a和Pods.xcconfig引用</li><li>打开Build Phases选项，删除Check Pods Manifest.lock和Copy Pods Resources<br>主要就是上面四个步骤。</li></ul><h3 id="五、卸载CocoaPods"><a href="#五、卸载CocoaPods" class="headerlink" title="五、卸载CocoaPods"></a>五、卸载CocoaPods</h3><ul><li><p>查看pod的地址，终端输入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">which pod</span><br></pre></td></tr></table></figure></li><li><p>删除pod，终端输入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo rm -rf [pod地址]</span><br></pre></td></tr></table></figure></li><li><p>查看gem安装包，终端输入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gem list</span><br></pre></td></tr></table></figure></li><li><p>按版本号卸载cocoapods</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo gem uninstall cocoapods -v [版本号]</span><br></pre></td></tr></table></figure></li></ul><p>卸载cocoapods其他组件同理，只需替换名字卸载即可，如：<code>gem uninstall cocoapods-downloader</code>。</p><ul><li><p>卸载所有版本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo gem uninstall cocoapods</span><br></pre></td></tr></table></figure></li><li><p>验证是否删除成功</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pod --version</span><br></pre></td></tr></table></figure></li></ul><p>如果提示命令未找到，说明卸载成功</p><h3 id="六、问题解决"><a href="#六、问题解决" class="headerlink" title="六、问题解决"></a>六、问题解决</h3><h4 id="1、执行gem-update-system报证书错误，在网上找了很久也没有找到解决方法，后来还是找到了-方法是忽略证书验证。"><a href="#1、执行gem-update-system报证书错误，在网上找了很久也没有找到解决方法，后来还是找到了-方法是忽略证书验证。" class="headerlink" title="1、执行gem update --system报证书错误，在网上找了很久也没有找到解决方法，后来还是找到了,方法是忽略证书验证。"></a>1、执行<code>gem update --system</code>报证书错误，在网上找了很久也没有找到解决方法，后来还是找到了,方法是忽略证书验证。</h4><p>步骤：<br>前往<code>~/.gemrc</code>，打开文件，并添加<code>:ssl_verify_mode: 0</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">:backtrace: false</span><br><span class="line">:bulk_threshold: 1000</span><br><span class="line">:sources:</span><br><span class="line">- https://gems.ruby-china.org/</span><br><span class="line">:update_sources: true</span><br><span class="line">:verbose: true</span><br><span class="line">:ssl_verify_mode: 0</span><br></pre></td></tr></table></figure></p><p><code>cmmand+s</code>保存，然后在执行<code>sudo gem update --system</code>，更新成功。</p><h4 id="2、Unable-to-require-openssl-install-OpenSSL-and-rebuild-ruby"><a href="#2、Unable-to-require-openssl-install-OpenSSL-and-rebuild-ruby" class="headerlink" title="2、Unable to require openssl, install OpenSSL and rebuild ruby"></a>2、<a href="https://stackoverflow.com/questions/21201493/couldnt-require-openssl-in-ruby" target="_blank" rel="noopener">Unable to require openssl, install OpenSSL and rebuild ruby</a></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//如果没有安装openssl，则用honebrew安装</span><br><span class="line">brew install openssl</span><br><span class="line"></span><br><span class="line">//重装rvm并关联openssl</span><br><span class="line">rvm reinstall 2.4.0 --with-openssl-dir=`brew --prefix openssl`</span><br></pre></td></tr></table></figure><p>如果安装了<strong>2.4.0</strong>版本则重新安装，没有安装则安装，安装成功之后，就能<code>sudo gem update --system</code>正常更新了。</p><h4 id="3、CocoaPods-出现-OTHER-LDFLAGS-错误，如下图所示"><a href="#3、CocoaPods-出现-OTHER-LDFLAGS-错误，如下图所示" class="headerlink" title="3、CocoaPods 出现 OTHER_LDFLAGS 错误，如下图所示"></a>3、CocoaPods 出现 OTHER_LDFLAGS 错误，如下图所示</h4><p><img src="https://ws4.sinaimg.cn/large/006tKfTcly1ftuj9ttidrj30vk0e8q5o.jpg" alt=""></p><ul><li><strong>解决方法1</strong>：<strong>Target</strong>–&gt;<strong>Build Settings</strong>–&gt;<strong>Other Linker Flags</strong>中添加<code>$(inherited)</code>，之后执行<code>pod install</code>或<code>pod update</code>警告就会消失。</li><li><strong>解决方法2</strong>:<code>project.xcodeproj</code>右键显示包内容，用文本编辑器打开 <code>project.pbxproj</code>，<code>command + F</code> 搜索 <code>OTHER_LDFLAGS</code> ，删除搜索到的设置，<code>command + S</code> 保存，然后重新执行 <code>pod install</code> 或者 <code>pod update</code> 。</li></ul><h4 id="4、Cocoapods第三方库编译提示warning的解决方法"><a href="#4、Cocoapods第三方库编译提示warning的解决方法" class="headerlink" title="4、Cocoapods第三方库编译提示warning的解决方法"></a><strong>4、Cocoapods第三方库编译提示warning的解决方法</strong></h4><ul><li><p>忽略所有警告</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">inhibit_all_warnings!</span><br></pre></td></tr></table></figure><p>之后执行<code>pod install</code> 或 <code>pod update</code> 即可。</p></li><li><p>忽略单个库警告</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pod &apos;Masonry&apos;, :inhibit_warnings =&gt; true</span><br></pre></td></tr></table></figure><p>之后执行<code>pod install</code> 或 <code>pod update</code> 即可。</p></li></ul><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><blockquote><p>CocoaPods安装与使用就介绍到这里了，如果在以后CocoaPods安装使用工程中遇到问题，如果找到了解决方案，我也会贴出来。</p></blockquote><h4 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h4><ul><li><a href="https://www.jianshu.com/p/552f21a989ba" target="_blank" rel="noopener">iOS 删除已经配置的类库和移除CocoaPods</a></li><li><a href="http://blog.csdn.net/jymn_chen/article/details/19213601" target="_blank" rel="noopener">使用CocoaPods（二）删除已经配置的类库和移除CocoaPods</a></li><li><a href="https://www.jianshu.com/p/dfb2a5834cd0" target="_blank" rel="noopener">【iOS 开发】解决使用 CocoaPods 执行 pod install 时出现 - Use the <code>$（inherited）</code> flag … 警告</a></li><li><a href="http://zengyi.me/blog/2015/01/09/cocoapodsdi-san-fang-ku-bian-yi-ti-shi-warningde-jie-jue-fang-fa/" target="_blank" rel="noopener">Cocoapods第三方库编译提示warning的解决方法</a></li></ul>]]></content>
    
    <summary type="html">
    
      在开发项目的时候，难免会导入一些三方开源库，CocoaPods是OS X管理三方开源库的工具，用这个工具，我们可以轻松集中管理、更新三方开源库。下面开始介绍CocoaPods安装与使用吧
    
    </summary>
    
      <category term="iOS" scheme="http://blogwenbo.com/categories/iOS/"/>
    
    
      <category term="iOS" scheme="http://blogwenbo.com/tags/iOS/"/>
    
      <category term="CocoaPods" scheme="http://blogwenbo.com/tags/CocoaPods/"/>
    
      <category term="MAC" scheme="http://blogwenbo.com/tags/MAC/"/>
    
  </entry>
  
  <entry>
    <title>iOS状态栏配置</title>
    <link href="http://blogwenbo.com/2018/07/26/iOS%E7%8A%B6%E6%80%81%E6%A0%8F%E9%85%8D%E7%BD%AE/"/>
    <id>http://blogwenbo.com/2018/07/26/iOS状态栏配置/</id>
    <published>2018-07-26T14:57:56.000Z</published>
    <updated>2020-03-30T14:09:57.148Z</updated>
    
    <content type="html"><![CDATA[<p class="description"></p><a id="more"></a><h3 id="一、全局配置状态栏"><a href="#一、全局配置状态栏" class="headerlink" title="一、全局配置状态栏"></a>一、全局配置状态栏</h3><ul><li><p>在<strong>info.plist</strong>中添加key：<strong>View controller-based status bar appearance</strong>，并设置value为<strong>NO</strong>。</p></li><li><p>在需要设置样式的地方调用：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">//UIStatusBarStyleLightContent：Light content, for use on dark backgrounds</span><br><span class="line">//UIStatusBarStyleDefault：Dark content, for use on light backgrounds</span><br><span class="line">[UIApplication sharedApplication].statusBarStyle = UIStatusBarStyleLightContent;</span><br></pre></td></tr></table></figure></li></ul><h3 id="二、配置单个控制器状态栏"><a href="#二、配置单个控制器状态栏" class="headerlink" title="二、配置单个控制器状态栏"></a>二、配置单个控制器状态栏</h3><ul><li><p>在<strong>info.plist</strong>中添加key：<strong>View controller-based status bar appearance</strong>，并设置value为<strong>YES</strong>。</p></li><li><p>如果有控制器没有导航控制器，直接重写<strong>preferredStatusBarStyle</strong> 方法返回你想要的状态栏样式即可：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">- (UIStatusBarStyle)preferredStatusBarStyle &#123;</span><br><span class="line">    return UIStatusBarStyleLightContent;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>通常都有导航控制器，如果控制器中直接重写<strong>preferredStatusBarStyle</strong>是没有效果的，这时需要在基类导航控制器中重写<strong>childViewControllerForStatusBarStyle</strong> 、<strong>preferredStatusBarStyle</strong> 任意一个方法就能实现配置单个控制器的状态栏样式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">- (UIViewController *)childViewControllerForStatusBarStyle &#123;</span><br><span class="line">    return self.topViewController;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">或者重写</span><br><span class="line">- (UIStatusBarStyle)preferredStatusBarStyle &#123;</span><br><span class="line">    return [self.topViewController preferredStatusBarStyle];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意</strong>：两个方法都重写，只会调用<strong>childViewControllerForStatusBarStyle</strong>，所以需要自己根据清空去选择调用那个方法。</p></li></ul><h3 id="三、通过分类实现"><a href="#三、通过分类实现" class="headerlink" title="三、通过分类实现"></a>三、通过分类实现</h3><ul><li><p>在项目中方便使用，我写了一个<strong>UINavigationController（WBStatusBarStyle）</strong> 分类，主要代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">@implementation UINavigationController (WBStatusBarStyle)</span><br><span class="line"></span><br><span class="line">+ (void)wb_setDefaultStatusBarStyle:(UIStatusBarStyle)statusBarStyle &#123;</span><br><span class="line">    objc_setAssociatedObject(self, &amp;kWBDefaultStatusBarStyleKey, @(statusBarStyle), OBJC_ASSOCIATION_RETAIN_NONATOMIC);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">+ (UIStatusBarStyle)wb_DefaultStatusBarStyle &#123;</span><br><span class="line">    id style = objc_getAssociatedObject(self, &amp;kWBDefaultStatusBarStyleKey);</span><br><span class="line">    return style ? [style integerValue] : UIStatusBarStyleDefault;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/** &lt; Override to return a child view controller or nil. If non-nil, that view controller&apos;s status bar appearance attributes will be used. If nil, self is used. Whenever the return values from these methods change, -setNeedsUpdatedStatusBarAttributes should be called. &gt; */</span><br><span class="line">//- (UIViewController *)childViewControllerForStatusBarStyle &#123;</span><br><span class="line">//    return self.topViewController;</span><br><span class="line">//&#125;</span><br><span class="line">//</span><br><span class="line">//- (UIViewController *)childViewControllerForStatusBarHidden &#123;</span><br><span class="line">//    return self.topViewController;</span><br><span class="line">//&#125;</span><br><span class="line"></span><br><span class="line">- (UIStatusBarStyle)preferredStatusBarStyle &#123;</span><br><span class="line">    return [self.topViewController wb_statusBarStyle];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@end</span><br></pre></td></tr></table></figure></li><li><p><strong>UIViewController (WBStatusBarStyle)</strong> </p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">@implementation UIViewController (WBStatusBarStyle)</span><br><span class="line"></span><br><span class="line">- (void)setWb_statusBarStyle:(UIStatusBarStyle)wb_statusBarStyle &#123;</span><br><span class="line">    objc_setAssociatedObject(self, &amp;kWBStatusBarStyleKey, @(wb_statusBarStyle), OBJC_ASSOCIATION_RETAIN_NONATOMIC);</span><br><span class="line">    /** &lt; Whenever the return values from these methods change, -setNeedsUpdatedStatusBarAttributes should be called. &gt; */</span><br><span class="line">    [self setNeedsStatusBarAppearanceUpdate];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (UIStatusBarStyle)wb_statusBarStyle &#123;</span><br><span class="line">    id style = objc_getAssociatedObject(self, &amp;kWBStatusBarStyleKey);</span><br><span class="line">    return style ? [style integerValue] : [UINavigationController wb_DefaultStatusBarStyle];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@end</span><br></pre></td></tr></table></figure><h3 id="四、GitHub-Demo"><a href="#四、GitHub-Demo" class="headerlink" title="四、GitHub Demo"></a>四、GitHub Demo</h3><ul><li><a href="https://github.com/wenmobo/WBManageStatusBarStyleDemo" target="_blank" rel="noopener">WBManageStatusBarStyleDemo</a></li><li><a href="https://github.com/wenmobo/WBCategories" target="_blank" rel="noopener">WBCategories</a></li></ul>]]></content>
    
    <summary type="html">
    
      在APP开发当中，都要与状态栏打交道，因此我们需要了解采用哪种方式去管理状态栏样式，更容易开发与维护，如果界面定制地方较多，就不太适合全局配置状态栏，因为这样每次在界面将要显示、消失去配置状态栏，比较的繁琐，因此我们可以采用单个配置，不影响全局，而且可以随意切换样式。这篇文章主要也是记录自己在项目中遇到的问题，方便自己以后查阅，如果有写的不对的地方，希望能给予批评指正，我会及时更改。好了，开始介绍吧！
    
    </summary>
    
      <category term="iOS" scheme="http://blogwenbo.com/categories/iOS/"/>
    
    
      <category term="iOS" scheme="http://blogwenbo.com/tags/iOS/"/>
    
      <category term="Runtime" scheme="http://blogwenbo.com/tags/Runtime/"/>
    
      <category term="Category" scheme="http://blogwenbo.com/tags/Category/"/>
    
  </entry>
  
  <entry>
    <title>Hexo七牛插件安装与使用</title>
    <link href="http://blogwenbo.com/2018/07/08/Hexo%E4%B8%83%E7%89%9B%E6%8F%92%E4%BB%B6%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/"/>
    <id>http://blogwenbo.com/2018/07/08/Hexo七牛插件安装与使用/</id>
    <published>2018-07-08T10:37:19.000Z</published>
    <updated>2020-03-30T14:09:57.143Z</updated>
    
    <content type="html"><![CDATA[<p class="description"></p><a id="more"></a><h3 id="相关网址"><a href="#相关网址" class="headerlink" title="相关网址"></a><strong>相关网址</strong></h3><ul><li><a href="https://github.com/gyk001/hexo-qiniu-sync" target="_blank" rel="noopener">hexo-qiniu-sync</a></li><li><a href="https://www.qiniu.com/" target="_blank" rel="noopener">七牛云</a><h3 id="注册七牛个人账号"><a href="#注册七牛个人账号" class="headerlink" title="注册七牛个人账号"></a>注册七牛个人账号</h3></li><li>首先需要到<a href="https://www.qiniu.com/" target="_blank" rel="noopener">七牛云</a>官网注册个人账号。</li><li>进入控制台创建存储空间，如下图所示：<br><img src="https://user-gold-cdn.xitu.io/2018/1/24/16128a78182fc141?w=1240&amp;h=630&amp;f=png&amp;s=161064" alt="创建存储空间.png"></li><li>将融合 CDN默认域名添加到<a href="https://www.aliyun.com/?spm=a2c1d.8251892.0.0.7b61a3c0xNylGH" target="_blank" rel="noopener">万网</a>中，配置格式如下图所示：<br><img src="https://user-gold-cdn.xitu.io/2018/1/24/16128a781811be5d?w=1240&amp;h=78&amp;f=png&amp;s=22185" alt="添加到万网.png"><h3 id="安装七牛云插件"><a href="#安装七牛云插件" class="headerlink" title="安装七牛云插件"></a>安装七牛云插件</h3></li><li>安装七牛云插件<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-qiniu-sync --save</span><br></pre></td></tr></table></figure></li></ul><h3 id="配置相关信息"><a href="#配置相关信息" class="headerlink" title="配置相关信息"></a>配置相关信息</h3><ul><li><p>配置站点文件<strong>_config.yml</strong>，配置入内容（<strong>注意</strong>：添加到配置文件时，把//去掉）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">#plugins:</span><br><span class="line"># - hexo-qiniu-sync</span><br><span class="line"></span><br><span class="line">qiniu:</span><br><span class="line">  offline: false</span><br><span class="line">  sync: true</span><br><span class="line">  bucket: blogwenbo</span><br><span class="line">  //这里将其注释掉，不注释，执行hexo g报错</span><br><span class="line">  # secret_file: sec/qn.json or C:</span><br><span class="line">  access_key: your access_key</span><br><span class="line">  secret_key: your secret_key</span><br><span class="line">  // 上传的资源子目录前缀.如设置，需与urlPrefix同步</span><br><span class="line">  dirPrefix: static</span><br><span class="line">  //外链前缀</span><br><span class="line">  urlPrefix: http://p2zukkwm9.bkt.clouddn.com/static</span><br><span class="line">  //使用默认配置即可</span><br><span class="line">  up_host: http://upload.qiniu.com</span><br><span class="line">  //本地目录</span><br><span class="line">  local_dir: static</span><br><span class="line">  // 是否更新已经上传过的文件(仅文件大小不同或在上次上传后进行更新的才会重新上传)</span><br><span class="line">  update_exist: true</span><br><span class="line">  image: </span><br><span class="line">    folder: images</span><br><span class="line">    extend: </span><br><span class="line">  js:</span><br><span class="line">    folder: js</span><br><span class="line">  css:</span><br><span class="line">    folder: css</span><br></pre></td></tr></table></figure></li><li><p>生成七牛配置路径，执行下面命令任意一个</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">hexo s</span><br><span class="line">或</span><br><span class="line">hexo g</span><br><span class="line">//终端输出</span><br><span class="line">INFO  -----------------------------------------------------------</span><br><span class="line">INFO  qiniu state: online</span><br><span class="line">INFO  qiniu sync:  true</span><br><span class="line">INFO  qiniu local dir:  static</span><br><span class="line">INFO  qiniu url:   http://blogwenbo.com/static</span><br><span class="line">INFO  -----------------------------------------------------------</span><br><span class="line">INFO  Start processing</span><br><span class="line">INFO  Now start qiniu sync.</span><br><span class="line">INFO  Need upload file num: 0</span><br></pre></td></tr></table></figure><p>就会在<strong>static</strong>目录下生成<strong>images</strong>、<strong>css</strong>、<strong>js</strong>三个文件夹。这时我们把测试图片<strong>七牛云.png</strong>放在<strong>images</strong>文件夹下，然后按照如下标签语法书写：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% qnimg 七牛云.png title:七牛云 alt:七牛云 &apos;class:&apos; extend:?imageView2/2/w/450 %&#125;</span><br></pre></td></tr></table></figure><p><img src="https://user-gold-cdn.xitu.io/2018/1/24/16128a78184a6943?w=300&amp;h=300&amp;f=png&amp;s=1759" alt="七牛云.png"></p><ul><li><p>同步静态资源到七牛云空间，主要有两种方式，一种是使用hexo命令，还有一种是使用七牛插件命令，可以参考GitHub文档：<a href="https://github.com/gyk001/hexo-qiniu-sync" target="_blank" rel="noopener">hexo-qiniu-sync</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">//1、启用本地服务器.即使用 hexo server 命令（简写为 hexo s）</span><br><span class="line">//当以本地服务器模式启动后，会自动监测 local_dir 目录下的文件变化， 会自动将新文件进行上传。</span><br><span class="line">如果文件进行了修改，但设置中没有启用 update_exist 配置，则不会更新到七牛空间。</span><br><span class="line">hexo s</span><br><span class="line">hexo server</span><br><span class="line"></span><br><span class="line">//2、使用命令行命令(sync | s | sync2 | s2)</span><br><span class="line">//命令行命令会扫描 local_dir 目录下的文件，同步至七牛空间。</span><br><span class="line">hexo qiniu sync</span><br><span class="line">hexo qiniu s</span><br><span class="line">hexo qiniu sync2</span><br><span class="line">hexo qiniu s2</span><br></pre></td></tr></table></figure></li><li><p>图片处理可参考官方文档<br><a href="https://developer.qiniu.com/dora/manual/1279/basic-processing-images-imageview2" target="_blank" rel="noopener">图片基本处理</a></p><h3 id="问题解决"><a href="#问题解决" class="headerlink" title="问题解决"></a>问题解决</h3></li></ul></li><li><p>没有注释<strong>secret_file: sec/qn.json or C:</strong>报错，如下图所示：<br><img src="https://user-gold-cdn.xitu.io/2018/1/24/16128a7818576183?w=1142&amp;h=250&amp;f=png&amp;s=48638" alt="HexoError.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># secret_file: sec/qn.json or C:</span><br></pre></td></tr></table></figure></li><li><p><a href="https://github.com/gyk001/hexo-qiniu-sync/issues/41#issuecomment-279229378" target="_blank" rel="noopener">hexo-qiniu-sync安装好后，hexo s命令不见了，hexo d也提示问题 #41</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">//将其注释就好了</span><br><span class="line">#plugins:</span><br><span class="line"># - hexo-qiniu-sync</span><br></pre></td></tr></table></figure></li></ul><h3 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h3><p>自己也参考了一些文章，但讲解的都不是很详细完整，有些博客只讲解了重要的一些步骤，不管怎样，最后自己还是捣腾出来了，还是挺折腾人的，我也是第一次用七牛云存储图片，有些地方可能讲解的不是很完整，也请谅解。希望本篇博客能给你一些帮助，也欢迎大家一起交流学习。成功案例：<a href="http://blogwenbo.com/2018/01/23/Hexo%E4%B8%83%E7%89%9B%E6%8F%92%E4%BB%B6%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/">Hexo七牛插件安装与使用</a>。</p><h3 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h3><p><a href="http://www.ixirong.com/2016/10/31/how-to-use-hexo-qiniu-sync-plugin/" target="_blank" rel="noopener">Hexo 七牛同步插件的使用</a></p>]]></content>
    
    <summary type="html">
    
      本篇博客主要讲解七牛云插件安装与使用，博客中获取七牛云存储的图片主要有两种方式，一种是在七牛控制台中上传图片然后取图片外链地址，另外一种是用七牛云插件+标签语法将图片上传到七牛云并显示到我们所写的博客中，这里主要介绍第二种方式。
    
    </summary>
    
      <category term="Hexo" scheme="http://blogwenbo.com/categories/Hexo/"/>
    
    
      <category term="Hexo" scheme="http://blogwenbo.com/tags/Hexo/"/>
    
      <category term="QiNiu" scheme="http://blogwenbo.com/tags/QiNiu/"/>
    
  </entry>
  
  <entry>
    <title>WBHUDManager</title>
    <link href="http://blogwenbo.com/2018/07/08/WBHUDManager/"/>
    <id>http://blogwenbo.com/2018/07/08/WBHUDManager/</id>
    <published>2018-07-08T10:26:42.000Z</published>
    <updated>2020-03-30T14:09:57.143Z</updated>
    
    <content type="html"><![CDATA[<p class="description"></p><a id="more"></a><h3 id="更新日志"><a href="#更新日志" class="headerlink" title="更新日志"></a>更新日志</h3><p>2018-08-01：更新API，支持配置更多自定义设置，录制GIF。</p><p>2018-09-09：支持pod安装</p><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><blockquote><p>在我们平时做项目的时候，为了提高交互体验，难免会用到一些提示语。除了UI上有特殊的要求需要自定义提示UI，一般会选择<a href="https://github.com/" target="_blank" rel="noopener">GitHub</a>上一些知名的提示框架库，如：</p><ul><li><a href="https://github.com/jdg/MBProgressHUD" target="_blank" rel="noopener">MBProgressHUD</a></li><li><a href="https://github.com/SVProgressHUD/SVProgressHUD" target="_blank" rel="noopener">SVProgressHUD</a></li><li><a href="https://github.com/JonasGessner/JGProgressHUD" target="_blank" rel="noopener">JGProgressHUD</a></li><li><a href="https://github.com/scalessec/Toast" target="_blank" rel="noopener">Toast</a></li></ul></blockquote><p>之前做项目都是用的<strong>SVProgressHUD</strong>，这个三方提示库使用非常接单，基于这个库，也很好做自定义提示封装。后来做项目改成了MBProgressHUD，相对于SVProgressHUD，MBProgressHUD使用相对来说要麻烦一点，因此，我对MBProgressHUD一些常用提示进行了封装，最开始封装的工具类存在着一些缺点，比如说在网络请求的时候，如果网络不好，拿不到回调，MBProgressHUD就会一直显示，用户无法交互，因此对这个工具类进行了改进。</p><h3 id="MBProgressHUD-v1-1-0"><a href="#MBProgressHUD-v1-1-0" class="headerlink" title="MBProgressHUD(v1.1.0)"></a>MBProgressHUD(v1.1.0)</h3><p>我主要写了一个分类，有菊花、文字、文字+图片提示，并提供了显示完成对调，方便显示完成后进行相应的操作或界面跳转，提供的调用方法如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br></pre></td><td class="code"><pre><span class="line">// MARK:Loading</span><br><span class="line">/**</span><br><span class="line"> 只显示菊花，不会自动消失 (白字+黑底)</span><br><span class="line"></span><br><span class="line"> @return MBProgressHUD实例对象</span><br><span class="line"> */</span><br><span class="line">+ (MBProgressHUD *)wb_showActivity;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> 只显示菊花，不会自动消失 (白字+黑底+自定义视图)</span><br><span class="line"></span><br><span class="line"> @param view 要显示的视图</span><br><span class="line"> @return MBProgressHUD实例对象</span><br><span class="line"> */</span><br><span class="line">+ (MBProgressHUD *)wb_showActivity:(UIView *)view;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> 菊花+文字 (白字+黑底)</span><br><span class="line"></span><br><span class="line"> @param message 加载文字</span><br><span class="line"> @return  MBProgressHUD实例对象</span><br><span class="line"> */</span><br><span class="line">+ (MBProgressHUD *)wb_showActivityMessage:(NSString *)message;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> 菊花+文字 (白字+黑底)</span><br><span class="line"></span><br><span class="line"> @param message 加载文字</span><br><span class="line"> @param view 要显示的视图</span><br><span class="line"> @return MBProgressHUD实例对象</span><br><span class="line"> */</span><br><span class="line">+ (MBProgressHUD *)wb_showActivityMessage:(NSString *)message</span><br><span class="line">                                   toView:(UIView *)view;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> 菊花+文字 （自定义文字+内容颜色+蒙版颜色+容器颜色）</span><br><span class="line"></span><br><span class="line"> @param message 加载文字</span><br><span class="line"> @param view 要显示的视图</span><br><span class="line"> @param contentColor 内容颜色</span><br><span class="line"> @param maskColor 蒙版颜色</span><br><span class="line"> @param bezelColor 容器颜色</span><br><span class="line"> @return MBProgressHUD实例对象</span><br><span class="line"> */</span><br><span class="line">+ (MBProgressHUD *)wb_showActivityMessage:(NSString *)message</span><br><span class="line">                                   toView:(UIView *)view</span><br><span class="line">                             contentColor:(UIColor *)contentColor</span><br><span class="line">                                maskColor:(UIColor *)maskColor</span><br><span class="line">                               bezelColor:(UIColor *)bezelColor;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> 菊花+文字 （自定义文字+文字颜色+蒙版颜色+容器颜色）</span><br><span class="line"></span><br><span class="line"> @param message 加载文字</span><br><span class="line"> @param view 要显示的视图</span><br><span class="line"> @param titleColor 文字颜色</span><br><span class="line"> @param maskColor 蒙版颜色</span><br><span class="line"> @param bezelColor 容器颜色</span><br><span class="line"> @return MBProgressHUD实例对象</span><br><span class="line"> */</span><br><span class="line">+ (MBProgressHUD *)wb_showActivityMessage:(NSString *)message</span><br><span class="line">                                   toView:(UIView *)view</span><br><span class="line">                               titleColor:(UIColor *)titleColor</span><br><span class="line">                                maskColor:(UIColor *)maskColor</span><br><span class="line">                               bezelColor:(UIColor *)bezelColor;</span><br><span class="line"></span><br><span class="line">// MARK:Text</span><br><span class="line">/**</span><br><span class="line"> 提示文字 （自定义文+位置中间 + 显示在window）</span><br><span class="line"></span><br><span class="line"> @param message 文字</span><br><span class="line"> */</span><br><span class="line">+ (void)wb_showMessage:(NSString *)message;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> 提示文字 (标题 + 详情文字)</span><br><span class="line"></span><br><span class="line"> @param message 文字</span><br><span class="line"> @param detailMessage 详情文字</span><br><span class="line"> */</span><br><span class="line">+ (void)wb_showMessage:(NSString *)message</span><br><span class="line">         detailMessage:(NSString *)detailMessage;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> 提示文字 (标题 + 详情文字 + 自定义位置 + 视图)</span><br><span class="line"></span><br><span class="line"> @param message 文字</span><br><span class="line"> @param detailMessage 详情文字</span><br><span class="line"> @param position 位置</span><br><span class="line"> */</span><br><span class="line">+ (void)wb_showMessage:(NSString *)message</span><br><span class="line">         detailMessage:(NSString *)detailMessage</span><br><span class="line">                toView:(UIView *)view</span><br><span class="line">              position:(WBHUDPositionStyle)position;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> 提示文字（自定义文+位置中间+显示在window+完成回调）</span><br><span class="line"></span><br><span class="line"> @param message 文字</span><br><span class="line"> @param completion 完成回调</span><br><span class="line"> */</span><br><span class="line">+ (void)wb_showMessage:(NSString *)message</span><br><span class="line">            completion:(MBProgressHUDCompletionBlock)completion;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> 提示文字（自定文字+位置中间+自定义显示视图+完成回调）</span><br><span class="line"></span><br><span class="line"> @param message 文字</span><br><span class="line"> @param view 要显示的视图</span><br><span class="line"> @param completion 完成回调</span><br><span class="line"> */</span><br><span class="line">+ (void)wb_showMessage:(NSString *)message</span><br><span class="line">                toView:(UIView *)view</span><br><span class="line">            completion:(MBProgressHUDCompletionBlock)completion;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> 提示文字 (自定义文字+自定义位置+自定义显示视图)</span><br><span class="line"></span><br><span class="line"> @param message 文字</span><br><span class="line"> @param view 要显示的视图</span><br><span class="line"> @param position 位置</span><br><span class="line"> @param completion 完成回调</span><br><span class="line"> */</span><br><span class="line">+ (void)wb_showMessage:(NSString *)message</span><br><span class="line">                toView:(UIView *)view</span><br><span class="line">              position:(WBHUDPositionStyle)position</span><br><span class="line">            completion:(MBProgressHUDCompletionBlock)completion;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> 提示文字 (自定义文字+详情文字+自定义位置+内容样式)</span><br><span class="line"></span><br><span class="line"> @param message 文字</span><br><span class="line"> @param detailTitle 详情文字</span><br><span class="line"> @param view 要显示的视图</span><br><span class="line"> @param position 显示位置</span><br><span class="line"> @param contentStyle 内容样式</span><br><span class="line"> @param completion 完成回调</span><br><span class="line"> */</span><br><span class="line">+ (void)wb_showMessage:(NSString *)message</span><br><span class="line">           detailTitle:(NSString *)detailTitle</span><br><span class="line">                toView:(UIView *)view</span><br><span class="line">              position:(WBHUDPositionStyle)position</span><br><span class="line">          contentStyle:(WBHUDContentStyle)contentStyle</span><br><span class="line">            completion:(MBProgressHUDCompletionBlock)completion;</span><br><span class="line"></span><br><span class="line">// MARK:Image</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> 自定义成功提示 (显示在window)</span><br><span class="line"></span><br><span class="line"> @param success 提示文字</span><br><span class="line"> */</span><br><span class="line">+ (void)wb_showSuccess:(NSString *)success;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> 自定义成功提示 (显示在window + 完成回调)</span><br><span class="line"></span><br><span class="line"> @param success 提示文字</span><br><span class="line"> @param completion 完成回调</span><br><span class="line"> */</span><br><span class="line">+ (void)wb_showSuccess:(NSString *)success</span><br><span class="line">            completion:(MBProgressHUDCompletionBlock)completion;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> 自定义成功提示 (显示在window + 完成回调 + 自定义显示视图)</span><br><span class="line"></span><br><span class="line"> @param success 提示文字</span><br><span class="line"> @param view 显示视图</span><br><span class="line"> @param completion 完成回调</span><br><span class="line"> */</span><br><span class="line">+ (void)wb_showSuccess:(NSString *)success</span><br><span class="line">                toView:(UIView *)view</span><br><span class="line">            completion:(MBProgressHUDCompletionBlock)completion;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> 错误提示 (显示在window)</span><br><span class="line"></span><br><span class="line"> @param error 提示文字</span><br><span class="line"> */</span><br><span class="line">+ (void)wb_showError:(NSString *)error;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> 错误提示 (显示在window + 完成回调)</span><br><span class="line"></span><br><span class="line"> @param error 错误提示</span><br><span class="line"> @param completion 完成回调</span><br><span class="line"> */</span><br><span class="line">+ (void)wb_showError:(NSString *)error</span><br><span class="line">          completion:(MBProgressHUDCompletionBlock)completion;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> 错误提示 (显示在window + 完成回调 + 自定义显示视图)</span><br><span class="line"></span><br><span class="line"> @param error 错误提示</span><br><span class="line"> @param view 示视图</span><br><span class="line"> @param completion 完成回调</span><br><span class="line"> */</span><br><span class="line">+ (void)wb_showError:(NSString *)error</span><br><span class="line">              toView:(UIView *)view</span><br><span class="line">          completion:(MBProgressHUDCompletionBlock)completion;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> 信息提示 (window)</span><br><span class="line"></span><br><span class="line"> @param info 提示文字</span><br><span class="line"> */</span><br><span class="line">+ (void)wb_showInfo:(NSString *)info;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> 信息提示 (window + 完成回调)</span><br><span class="line"></span><br><span class="line"> @param info 提示文字</span><br><span class="line"> @param completion 完成回调</span><br><span class="line"> */</span><br><span class="line">+ (void)wb_showInfo:(NSString *)info</span><br><span class="line">         completion:(MBProgressHUDCompletionBlock)completion;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> 信息提示 (window + 完成回调 + 自定义显示视图)</span><br><span class="line"></span><br><span class="line"> @param info 提示文字</span><br><span class="line"> @param view 自定义显示视图</span><br><span class="line"> @param completion 完成回调</span><br><span class="line"> */</span><br><span class="line">+ (void)wb_showInfo:(NSString *)info</span><br><span class="line">             toView:(UIView *)view</span><br><span class="line">         completion:(MBProgressHUDCompletionBlock)completion;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> 警告提示 (window)</span><br><span class="line"></span><br><span class="line"> @param warning 提示文字</span><br><span class="line"> */</span><br><span class="line">+ (void)wb_showWarning:(NSString *)warning;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line">  警告提示 (window + 完成回调)</span><br><span class="line"></span><br><span class="line"> @param warning 警告</span><br><span class="line"> @param completion 完成回调</span><br><span class="line"> */</span><br><span class="line">+ (void)wb_showWarning:(NSString *)warning</span><br><span class="line">            completion:(MBProgressHUDCompletionBlock)completion;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> 警告提示 (window + 完成回调 + 自定义视图)</span><br><span class="line"></span><br><span class="line"> @param warning 警告</span><br><span class="line"> @param view 自定义视图</span><br><span class="line"> @param completion 完成回调</span><br><span class="line"> */</span><br><span class="line">+ (void)wb_showWarning:(NSString *)warning</span><br><span class="line">                toView:(UIView *)view</span><br><span class="line">            completion:(MBProgressHUDCompletionBlock)completion;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> 自定义图片 + 文字提示</span><br><span class="line"></span><br><span class="line"> @param text 文字</span><br><span class="line"> @param icon 图片名</span><br><span class="line"> @param view 要显示的视图</span><br><span class="line"> @param completion 完成回调</span><br><span class="line"> */</span><br><span class="line">+ (void)wb_show:(NSString *)text</span><br><span class="line">           icon:(NSString *)icon</span><br><span class="line">           view:(UIView *)view</span><br><span class="line">     completion:(MBProgressHUDCompletionBlock)completion;</span><br><span class="line"></span><br><span class="line">// MARK:Switch Model</span><br><span class="line">/**</span><br><span class="line"> Model切换</span><br><span class="line"></span><br><span class="line"> @param view 要显示的视图</span><br><span class="line"> @param title 要显示的文字</span><br><span class="line"> @param configBlock 配置hud</span><br><span class="line"> @return MBProgressHUD实例对象</span><br><span class="line"> */</span><br><span class="line">+ (MBProgressHUD *)wb_showModelSwitch:(UIView *)view</span><br><span class="line">                                title:(NSString *)title</span><br><span class="line">                          configBlock:(WBHUDConfigBlock)configBlock;</span><br><span class="line"></span><br><span class="line">// MARK:Progress</span><br><span class="line">/**</span><br><span class="line"> 文字 + 进度条</span><br><span class="line"></span><br><span class="line"> @param view 要显示的视图</span><br><span class="line"> @param progressStyle 进度样式</span><br><span class="line"> @param title 提示文字</span><br><span class="line"> @param configBlock 进度配置block</span><br><span class="line"> @return MBProgressHUD实例对象</span><br><span class="line"> */</span><br><span class="line">+ (MBProgressHUD *)wb_showDownloadToView:(UIView *)view</span><br><span class="line">                           progressStyle:(WBHUDProgressStyle)progressStyle</span><br><span class="line">                                   title:(NSString *)title</span><br><span class="line">                             configBlock:(WBHUDConfigBlock)configBlock;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> 文字 + 进度条 + 取消按钮</span><br><span class="line"></span><br><span class="line"> @param view 要显示的视图</span><br><span class="line"> @param progressStyle 进度样式</span><br><span class="line"> @param title 提示文字</span><br><span class="line"> @param cancelTitle 取消按钮标题</span><br><span class="line"> @param configBlock 进度配置block</span><br><span class="line"> @param cancelBlock 取消按钮点击回调</span><br><span class="line"> @return MBProgressHUD实例对象</span><br><span class="line"> */</span><br><span class="line">+ (MBProgressHUD *)wb_showDownloadToView:(UIView *)view</span><br><span class="line">                           progressStyle:(WBHUDProgressStyle)progressStyle</span><br><span class="line">                                   title:(NSString *)title</span><br><span class="line">                             cancelTitle:(NSString *)cancelTitle</span><br><span class="line">                             configBlock:(WBHUDConfigBlock)configBlock</span><br><span class="line">                             cancelBlock:(WBHUDCancelBlock)cancelBlock;</span><br><span class="line"></span><br><span class="line">// MARK:Hide</span><br><span class="line">+ (void)wb_hideHUD;</span><br><span class="line">+ (void)wb_hideHUDForView:(UIView *)view;</span><br></pre></td></tr></table></figure></p><p>举一个.m显示菊花方法的例子吧，MBProgressHUD最新版本对比老版本API还是有些变化的：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">/** &lt; 创建HUD &gt; */</span><br><span class="line">+ (MBProgressHUD *)wb_createHUD:(UIView *)view &#123;</span><br><span class="line">    if (view == nil) view = (UIView *)[UIApplication sharedApplication].delegate.window;</span><br><span class="line">    return [MBProgressHUD showHUDAddedTo:view</span><br><span class="line">                                animated:YES];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/** &lt; 设置HUD &gt; */</span><br><span class="line">+ (MBProgressHUD *)wb_configHUDWithView:(UIView *)view</span><br><span class="line">                                  title:(NSString *)title</span><br><span class="line">                            autoDismiss:(BOOL)autoDismiss</span><br><span class="line">                             completion:(MBProgressHUDCompletionBlock)completion &#123;</span><br><span class="line">    MBProgressHUD *hud = [self wb_createHUD:view];</span><br><span class="line">    /** &lt; 自动换行 &gt; */</span><br><span class="line">    hud.label.numberOfLines = 0;</span><br><span class="line">    /** &lt; 提示文字 &gt; */</span><br><span class="line">    hud.title(title);</span><br><span class="line">    /** &lt; 隐藏移除 &gt; */</span><br><span class="line">    hud.removeFromSuperViewOnHide = YES;</span><br><span class="line">    /** &lt;默认内容样式：黑底白字 &gt; */</span><br><span class="line">    hud.hudContentStyle(WBHUDContentBlackStyle);</span><br><span class="line">    /** &lt; 自动隐藏 &gt; */</span><br><span class="line">    if (autoDismiss) &#123;</span><br><span class="line">        [hud hideAnimated:YES</span><br><span class="line">               afterDelay:KHideAfterDelayTime];</span><br><span class="line">    &#125;</span><br><span class="line">    hud.completionBlock = completion;</span><br><span class="line">    return hud;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>感兴趣的朋友，可以下载Demo查看具体方法实现，请戳：<a href="https://github.com/wenmobo/WBHUDManager" target="_blank" rel="noopener">WBHUDManager</a><br><img src="https://ws4.sinaimg.cn/large/006tKfTcly1ftuhtkjtapg308p0i80x9.gif" alt=""></p><h3 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h3><blockquote><p>选择哪一款提示框架，都要看自己喜好了，因为我代码水平有限，有些地方可能考虑的不够完善，只能说是抛砖引玉吧，大神们可能有更好的封装。要想基于这些框架自定义出自己需要风格的UI，还是要对框架提供的方法属性有一定的了解。</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p class=&quot;description&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="iOS" scheme="http://blogwenbo.com/categories/iOS/"/>
    
    
      <category term="iOS" scheme="http://blogwenbo.com/tags/iOS/"/>
    
      <category term="Objective-C" scheme="http://blogwenbo.com/tags/Objective-C/"/>
    
      <category term="GitHub" scheme="http://blogwenbo.com/tags/GitHub/"/>
    
      <category term="MBProgressHUD" scheme="http://blogwenbo.com/tags/MBProgressHUD/"/>
    
      <category term="Swift" scheme="http://blogwenbo.com/tags/Swift/"/>
    
  </entry>
  
  <entry>
    <title>Mac OS X系统常用工具</title>
    <link href="http://blogwenbo.com/2018/07/08/Mac-OS-X%E7%B3%BB%E7%BB%9F%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/"/>
    <id>http://blogwenbo.com/2018/07/08/Mac-OS-X系统常用工具/</id>
    <published>2018-07-08T09:33:50.000Z</published>
    <updated>2020-03-30T14:09:57.143Z</updated>
    
    <content type="html"><![CDATA[<p class="description"></p><a id="more"></a><h1 id="分类目录"><a href="#分类目录" class="headerlink" title="分类目录"></a>分类目录</h1><blockquote><p><strong>版本控制</strong></p><ul><li>Cornerstone</li><li>Sourcetree</li><li>Tower</li><li>GitHubDesktop</li></ul></blockquote><blockquote><p><strong>办公</strong></p><ul><li>office2016</li></ul></blockquote><blockquote><p><strong>效率</strong></p><ul><li>Alfred</li></ul></blockquote><blockquote><p><strong>实用</strong></p><ul><li>Mounty</li><li>CleanMyMac</li><li>HideSwitch</li><li>LICEcap</li></ul></blockquote><blockquote><p><strong>iOS开发必备</strong></p><ul><li>Dash</li><li>真机调试包</li></ul></blockquote><blockquote><p><strong>数据库管理</strong></p><ul><li>Navicat</li></ul></blockquote><blockquote><p><strong>设计工具</strong></p><ul><li>Sketch</li></ul></blockquote><blockquote><p><strong>MarkDown 工具</strong></p><ul><li>Typora</li><li>iPic</li><li>Cmd Markdown</li><li>Sublime Text</li></ul></blockquote><blockquote><p><strong>网络工具</strong></p><ul><li>shadowsocks</li><li>Charles</li></ul></blockquote><blockquote><p><strong>终端工具</strong></p><ul><li>iTerm 2</li></ul></blockquote><h1 id="版本控制"><a href="#版本控制" class="headerlink" title="版本控制"></a>版本控制</h1><h3 id="Cornerstone"><a href="#Cornerstone" class="headerlink" title="Cornerstone"></a>Cornerstone</h3><blockquote><p>Cornerstone is an elegant SVN client designed specifically for the Mac. It is built on Subversion, a popular version control system well-known for its performance, flexibility, and scalability. Cornerstone excels in tracking &amp; displaying changes to data; its comparison tools enable users to view differences in multi-language formats. Better yet, Planio is now integrated into the Cornerstone environment — so you can now easily sync a local folder with your <a href="https://plan.io/subversion-hosting-and-git-hosting/" target="_blank" rel="noopener">Planio repositories</a> using your Mac!  </p></blockquote><p>MAC上一款优雅的SVN客服端，进入公司后，使用的第一款项目版本控制工具就是它了。它是建立在Subversion之上的，因其简洁、灵活、可扩展性而闻名。</p><h4 id="官方网站：planio"><a href="#官方网站：planio" class="headerlink" title="官方网站：planio"></a>官方网站：<a href="https://plan.io/cornerstone-svn/" target="_blank" rel="noopener">planio</a></h4><p><img src="https://user-gold-cdn.xitu.io/2018/6/20/1641ddfd2b663a3b?w=1240&amp;h=567&amp;f=png&amp;s=277892" alt="1615c2235a0ed7ce.png"></p><hr><h3 id="Sourcetree"><a href="#Sourcetree" class="headerlink" title="Sourcetree"></a>Sourcetree</h3><blockquote><p>Simplicity and power in a beautiful Git GUI. </p></blockquote><p>一款免费非常值得推荐的Git GUI图形客户端。自己托管在GitHub上的demo就是用的这款软件，使用很方便，免去了git繁琐命令，极大提高了工作效率。</p><h4 id="官方网站：Sourcetree"><a href="#官方网站：Sourcetree" class="headerlink" title="官方网站：Sourcetree"></a>官方网站：<a href="https://www.sourcetreeapp.com/" target="_blank" rel="noopener">Sourcetree</a></h4><h4 id="相关博客：Sourcetree安装与使用"><a href="#相关博客：Sourcetree安装与使用" class="headerlink" title="相关博客：Sourcetree安装与使用"></a>相关博客：<a href="https://www.jianshu.com/p/fdbf7c0bca93" target="_blank" rel="noopener">Sourcetree安装与使用</a></h4><p><img src="https://ws3.sinaimg.cn/large/006tNc79ly1ft2lp2voypj31kw0qjhda.jpg" alt=""></p><hr><h3 id="Tower"><a href="#Tower" class="headerlink" title="Tower"></a>Tower</h3><blockquote><p>Version control with Git - made easy.<br>In a beautiful, efficient, and powerful app.</p></blockquote><p>MAC&amp;&amp;Windows平台上最好用的Git GUI客户端。不像Sourcetree，这个款软件是付费的，RMB大概500元左右，不过也有破解版的，我也没有使用过，感觉功能和Sourcetree差不多吧。</p><h4 id="官方网址：git-tower"><a href="#官方网址：git-tower" class="headerlink" title="官方网址：git-tower"></a>官方网址：<a href="https://www.git-tower.com/mac/" target="_blank" rel="noopener">git-tower</a></h4><p><img src="https://ws1.sinaimg.cn/large/006tNc79ly1ft2lnzddz9j31kw0rctjc.jpg" alt=""></p><hr><h3 id="GitHubDesktop"><a href="#GitHubDesktop" class="headerlink" title="GitHubDesktop"></a>GitHubDesktop</h3><blockquote><p>Extend your GitHub workflow beyond your browser with GitHub Desktop, completely redesigned with Electron. Get a unified cross-platform experience that’s completely open source and ready to customize.</p></blockquote><p>在我搜索MAC上好用的Git GUI客户端时下载用过，功能不是很多，基本的Git操都有，可以自己去了解下吧。</p><h4 id="官方网址：GitHubDesktop"><a href="#官方网址：GitHubDesktop" class="headerlink" title="官方网址：GitHubDesktop"></a>官方网址：<a href="https://desktop.github.com/" target="_blank" rel="noopener">GitHubDesktop</a></h4><p><img src="https://ws1.sinaimg.cn/large/006tNc79ly1ft2lm9pqnuj31kw0v80zi.jpg" alt=""></p><hr><h1 id="网络工具"><a href="#网络工具" class="headerlink" title="网络工具"></a>网络工具</h1><h3 id="shadowsocks"><a href="#shadowsocks" class="headerlink" title="shadowsocks"></a>shadowsocks</h3><blockquote><p>A secure socks5 proxy, designed to protect your Internet traffic.</p></blockquote><p>一个安全的socks5代理，旨在保护你的网络流量。ShadowsocksX-NG有些文件是用swift写的，也是最近才接触，配置VPN时用到。</p><h4 id="官网网址：shadowsocks"><a href="#官网网址：shadowsocks" class="headerlink" title="官网网址：shadowsocks"></a>官网网址：<a href="https://github.com/shadowsocks" target="_blank" rel="noopener">shadowsocks</a></h4><p><img src="https://ws3.sinaimg.cn/large/006tNc79ly1ft2lkqycsjj31kw07ataf.jpg" alt=""></p><hr><h3 id="Charles"><a href="#Charles" class="headerlink" title="Charles"></a>Charles</h3><blockquote><p>Charles is an HTTP proxy / HTTP monitor / Reverse Proxy that enables a developer to view all of the HTTP and SSL / HTTPS traffic between their machine and the Internet. This includes requests, responses and the HTTP headers (which contain the cookies and caching information). </p></blockquote><p><a href="http://www.charlesproxy.com/" target="_blank" rel="noopener">Charles</a> 是在 Mac 下常用的网络封包截取工具，在做<br>移动开发时，我们为了调试与服务器端的网络通讯协议，常常需要截取网络封包来分析。</p><p>Charles 通过将自己设置成系统的网络访问代理服务器，使得所有的网络访问请求都通过它来完成，从而实现了网络封包的截取和分析。</p><p>除了在做移动开发中调试端口外，Charles 也可以用于分析第三方应用的通讯协议。配合 Charles 的 SSL 功能，Charles 还可以分析 Https 协议。</p><p>Charles 是收费软件，可以免费试用 30 天。试用期过后，未付费的用户仍然可以继续使用，但是每次使用时间不能超过 30 分钟，并且启动时将会有 10 秒种的延时。因此，该付费方案对广大用户还是相当友好的，即使你长期不付费，也能使用完整的软件功能。只是当你需要长时间进行封包调试时，会因为 Charles 强制关闭而遇到影响。</p><h4 id="官方网址：Charles"><a href="#官方网址：Charles" class="headerlink" title="官方网址：Charles"></a>官方网址：<a href="https://www.charlesproxy.com/" target="_blank" rel="noopener">Charles</a></h4><p><img src="https://ws4.sinaimg.cn/large/006tNc79ly1ft2m8kkhc4j31kw0eq12y.jpg" alt=""></p><h1 id="iOS开发必备"><a href="#iOS开发必备" class="headerlink" title="iOS开发必备"></a>iOS开发必备</h1><h3 id="Dash"><a href="#Dash" class="headerlink" title="Dash"></a>Dash</h3><blockquote><p>Dash is an API Documentation Browser and Code Snippet Manager. Dash stores snippets of code and instantly searches offline documentation sets for 200+ APIs, 100+ cheat sheets and more. You can even generate your own docsets or request docsets to be included.</p></blockquote><p>开发人员不可缺少的杰作。作为一名开发开者，我们可以通过这款软件阅读官方文档，存储代码片段，离线搜索API文档集，开发必备软件。</p><h4 id="官方网站：Dash"><a href="#官方网站：Dash" class="headerlink" title="官方网站：Dash"></a>官方网站：<a href="https://kapeli.com/dash" target="_blank" rel="noopener">Dash</a></h4><p><img src="https://ws2.sinaimg.cn/large/006tNc79ly1ft2lft1yk1j31kw0loqak.jpg" alt="1615c3aa45f22f8c.png"></p><h1 id="实用工具"><a href="#实用工具" class="headerlink" title="实用工具"></a>实用工具</h1><h3 id="LICEcap"><a href="#LICEcap" class="headerlink" title="LICEcap"></a>LICEcap</h3><blockquote><p>simple animated screen captures   </p></blockquote><p>一款简单好用的屏幕GIF录制软件。比如做demo的时候，录制demo效果。</p><h4 id="官网网址：LICEcap"><a href="#官网网址：LICEcap" class="headerlink" title="官网网址：LICEcap"></a>官网网址：<a href="https://www.cockos.com/licecap/" target="_blank" rel="noopener">LICEcap</a></h4><h4 id="相关博客：licecap-For-Mac安装与使用"><a href="#相关博客：licecap-For-Mac安装与使用" class="headerlink" title="相关博客：licecap For Mac安装与使用"></a>相关博客：<a href="https://www.jianshu.com/p/ea8f828802a3" target="_blank" rel="noopener">licecap For Mac安装与使用</a></h4><p><img src="https://ws2.sinaimg.cn/large/006tNc79ly1ft2ljbjo8nj31kw0iujw8.jpg" alt=""></p><hr><h3 id="Mounty"><a href="#Mounty" class="headerlink" title="Mounty"></a>Mounty</h3><blockquote><p>A tiny tool to re-mount write-protected NTFS volumes under Mac OS X 10.9+ in read-write mode.</p></blockquote><p>一款MAC上mini的NTFS读写软件，相比付费的NTFS读写软件，这款软件值得推荐哦。</p><h4 id="官网：Mounty"><a href="#官网：Mounty" class="headerlink" title="官网：Mounty"></a>官网：<a href="http://enjoygineering.com/mounty/" target="_blank" rel="noopener">Mounty</a></h4><h4 id="通过Homebrew安装："><a href="#通过Homebrew安装：" class="headerlink" title="通过Homebrew安装："></a>通过Homebrew安装：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew cask install mounty</span><br></pre></td></tr></table></figure><p><img src="https://ws1.sinaimg.cn/large/006tNc79ly1ft2li35swmj31g60so44q.jpg" alt=""></p><hr><h3 id="HideSwitch"><a href="#HideSwitch" class="headerlink" title="HideSwitch"></a>HideSwitch</h3><blockquote><p>一款实用小工具，显示和隐藏系统隐藏文件，和Show Or Hide这个款软件类似。<br><img src="https://user-gold-cdn.xitu.io/2018/6/20/1641ddfd8a452070?w=520&amp;h=158&amp;f=webp&amp;s=3692" alt="1615c2b4f7a59971.png"></p></blockquote><hr><h3 id="CleanMyMac"><a href="#CleanMyMac" class="headerlink" title="CleanMyMac"></a>CleanMyMac</h3><blockquote><p>MAC系统清理软件，MAC上非常值得推荐的一款软件，不过是需要付费的，不过也有破解版的哦。</p></blockquote><h4 id="官方中文网站：mycleanmymac"><a href="#官方中文网站：mycleanmymac" class="headerlink" title="官方中文网站：mycleanmymac"></a>官方中文网站：<a href="http://www.mycleanmymac.com/" target="_blank" rel="noopener">mycleanmymac</a></h4><p><img src="https://user-gold-cdn.xitu.io/2018/6/20/1641ddfdc473d485?w=1240&amp;h=724&amp;f=png&amp;s=348857" alt="屏幕快照 2018-02-03 下午11.19.21.png"></p><hr><h1 id="效率"><a href="#效率" class="headerlink" title="效率"></a>效率</h1><h3 id="Alfred"><a href="#Alfred" class="headerlink" title="Alfred"></a>Alfred</h3><blockquote><p>Alfred is an award-winning app for Mac OS X which boosts your efficiency with hotkeys, keywords, text expansion and more. Search your Mac and the web, and be more productive with custom actions to control your Mac.</p></blockquote><p>它是MAC OS X一款可以极大提高操作效率的软件，被人称之为一款神器。我们可以通过快捷键唤出Alfred，然后通过关键词搜索，总之，它是一款强大的软件。我也是最近才安装，了解的也不是很多，有兴趣的朋友可以下载使用吧。</p><h4 id="官方网站：Alfred"><a href="#官方网站：Alfred" class="headerlink" title="官方网站：Alfred"></a>官方网站：<a href="https://www.alfredapp.com/" target="_blank" rel="noopener">Alfred</a></h4><p><img src="https://ws3.sinaimg.cn/large/006tNc79ly1ft2laclcp7j31kw0qo1kx.jpg" alt=""></p><hr><h1 id="办公"><a href="#办公" class="headerlink" title="办公"></a>办公</h1><h3 id="office2016"><a href="#office2016" class="headerlink" title="office2016"></a>office2016</h3><blockquote><p>MAC平台下的办公软件。<br><img src="https://ws1.sinaimg.cn/large/006tNc79ly1ft2ldy5lvyj31kw0nu7wh.jpg" alt="1615c30cc3cfe199.png"></p></blockquote><h1 id="终端工具"><a href="#终端工具" class="headerlink" title="终端工具"></a>终端工具</h1><h3 id="iTerm-2"><a href="#iTerm-2" class="headerlink" title="iTerm 2"></a>iTerm 2</h3><blockquote><p>iTerm2 is a replacement for Terminal and the successor to iTerm. It works on Macs with macOS 10.10 or newer. iTerm2 brings the terminal into the modern age with features you never knew you always wanted.</p></blockquote><p>MAC上最好用的终端工具。</p><h4 id="官方网站：iTerm-2"><a href="#官方网站：iTerm-2" class="headerlink" title="官方网站：iTerm 2"></a>官方网站：<a href="http://www.iterm2.com/" target="_blank" rel="noopener">iTerm 2</a></h4><p>相关博客：<a href="https://www.jianshu.com/p/34e0f4d6f7c0" target="_blank" rel="noopener">MAC上iTerm 2安装与使用</a><br><img src="https://user-gold-cdn.xitu.io/2018/5/20/1637e1a0a82db7fe?w=1240&amp;h=484&amp;f=jpeg&amp;s=30907" alt=""></p><hr><h1 id="数据库管理"><a href="#数据库管理" class="headerlink" title="数据库管理"></a>数据库管理</h1><h3 id="Navicat"><a href="#Navicat" class="headerlink" title="Navicat"></a>Navicat</h3><blockquote><p>Powerful . Intuitive . Easy-to-use The ultimate solution for MongoDB management and development</p></blockquote><p>Navicat是一套快速、可靠并价格相当便宜的<a href="https://baike.baidu.com/item/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AE%A1%E7%90%86/10509024" target="_blank" rel="noopener">数据库管理</a>工具，专为简化数据库的管理及降低系统管理成本而设。它的设计符合<a href="https://baike.baidu.com/item/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AE%A1%E7%90%86%E5%91%98/1216449" target="_blank" rel="noopener">数据库管理员</a>、开发人员及中小企业的需要。Navicat 是以直觉化的<a href="https://baike.baidu.com/item/%E5%9B%BE%E5%BD%A2%E7%94%A8%E6%88%B7%E7%95%8C%E9%9D%A2/3352324" target="_blank" rel="noopener">图形用户界面</a>而建的，让你可以以安全并且简单的方式创建、组织、访问并共用信息。</p><h4 id="官方网址：Navicat"><a href="#官方网址：Navicat" class="headerlink" title="官方网址：Navicat"></a>官方网址：<a href="https://www.navicat.com/en/" target="_blank" rel="noopener">Navicat</a></h4><p><img src="https://ws4.sinaimg.cn/large/006tNc79ly1ft2mcnzraej31kw0ns4qp.jpg" alt=""></p><h1 id="MarkDown-工具"><a href="#MarkDown-工具" class="headerlink" title="MarkDown 工具"></a>MarkDown 工具</h1><h3 id="Typora"><a href="#Typora" class="headerlink" title="Typora"></a>Typora</h3><blockquote><p>Typora will give you a seamless experience as both a reader and a writer. It removes the preview window, mode switcher, syntax symbols of markdown source code, and all other unnecessary distractions. Replace them with a real live preview feature to help you concentrate the content itself.</p></blockquote><p>所见即所得，一款免费MarkDown编辑工具，自己也有使用一段时间，开始觉得挺好用的，后来发现有些操作有些卡顿不流畅，后来就放弃了，不过还是值得推荐。</p><h4 id="官方网址：Typora"><a href="#官方网址：Typora" class="headerlink" title="官方网址：Typora"></a>官方网址：<a href="https://www.typora.io/" target="_blank" rel="noopener">Typora</a></h4><p><img src="https://ws1.sinaimg.cn/large/0069RVTdly1fv71n24v2pj31kw0rqjt3.jpg" alt=""></p><h3 id="iPic"><a href="#iPic" class="headerlink" title="iPic"></a>iPic</h3><blockquote><p>一款图床神器，还在为MarkDown图传选择而烦恼吗，iPic将是你不错的选择，可直接在App Store下载。</p></blockquote><p><a href="https://toolinbox.net/iPic/" target="_blank" rel="noopener">介绍博客</a><br><img src="https://ws2.sinaimg.cn/large/0069RVTdly1fv71t4bw8xj30b6086mz5.jpg" alt=""></p><h3 id="Cmd-Markdown"><a href="#Cmd-Markdown" class="headerlink" title="Cmd Markdown"></a>Cmd Markdown</h3><blockquote><p>我们理解您需要更便捷更高效的工具记录思想，整理笔记、知识，并将其中承载的价值传播给他人，Cmd Markdown 是我们给出的答案 —— 我们为记录思想和分享知识提供更专业的工具。</p></blockquote><p>作业部落 Cmd Markdown这款编辑器，放弃<strong>Typora</strong>之后，最近在使用这款编辑器，感觉用起来比较稳定流畅，支持在线存储，如果你最求稳定，它将是一款不错的选择哦。</p><h4 id="官方网址：Cmd-Markdown"><a href="#官方网址：Cmd-Markdown" class="headerlink" title="官方网址：Cmd Markdown"></a>官方网址：<a href="https://www.zybuluo.com/cmd/" target="_blank" rel="noopener">Cmd Markdown</a></h4><p><img src="https://ws3.sinaimg.cn/large/0069RVTdly1fv71z0255mj31kw0rwq6v.jpg" alt=""></p><h3 id="Sublime-Text"><a href="#Sublime-Text" class="headerlink" title="Sublime Text"></a>Sublime Text</h3><blockquote><p>A sophisticated text editor for code, markup and prose.</p></blockquote><p>Sublime Text是一套跨平台的文本编辑器，支持基于Python的插件。Sublime Text是专有软件，可透过包（Package）扩展。大多数的包使用自由软件授权发布，并由社群建置维护。在自己最开始接触Markdown的时候安装使用过，但是觉得写作的时候不够直观，就放弃了，最近发现这款工具真的很强大，对于代码块的编辑，有联想功能，非常值得推荐。</p><h4 id="官方网址：Sublime-Text"><a href="#官方网址：Sublime-Text" class="headerlink" title="官方网址：Sublime_Text"></a>官方网址：<a href="https://zh.wikipedia.org/wiki/Sublime_Text" target="_blank" rel="noopener">Sublime_Text</a></h4><p><img src="https://ws4.sinaimg.cn/large/0069RVTdly1fv7241p9usj31kw0rukcf.jpg" alt=""></p>]]></content>
    
    <summary type="html">
    
      自己使用Mac OS X系统也有一段时间了，也使用过许多MAC上好用的软件，下面是我对使用过和了解的软件资源一些整理。以后可能也会接触使用新的软件，我也会对文章进行更新。
    
    </summary>
    
      <category term="MAC" scheme="http://blogwenbo.com/categories/MAC/"/>
    
    
      <category term="MAC" scheme="http://blogwenbo.com/tags/MAC/"/>
    
      <category term="DMG" scheme="http://blogwenbo.com/tags/DMG/"/>
    
  </entry>
  
  <entry>
    <title>WBCategoryKit</title>
    <link href="http://blogwenbo.com/2018/07/08/WBCategoryKit/"/>
    <id>http://blogwenbo.com/2018/07/08/WBCategoryKit/</id>
    <published>2018-07-08T09:26:13.000Z</published>
    <updated>2020-03-30T14:09:57.143Z</updated>
    
    <content type="html"><![CDATA[<p class="description"></p><a id="more"></a><h2 id="中文说明"><a href="#中文说明" class="headerlink" title="中文说明"></a>中文说明</h2><blockquote><p>Some useful Objective-C ategories and Macro,that contain UIKit.framework、Foundation.framework、AVFoundation.framework、QuartzCore. framework、CoreTelephony.framework、WebKit.framework、MobileCoreServices.framework、Photos.framework、AssetsLibrary.framework、Accelerate.framework、ImageIO.framework、CoreText.framework、CoreGraphics.framework and so on,i will continue to tidy up updates.</p></blockquote><p> iOS 系统常用框架分类封装，开发常用宏定义，支持cocoapod集成，支持只集成子模块。持续更新中…</p><h2 id="Requirements"><a href="#Requirements" class="headerlink" title="Requirements"></a>Requirements</h2><ul><li>iOS 8+</li><li>Xcode 8+</li></ul><h2 id="Installation"><a href="#Installation" class="headerlink" title="Installation"></a>Installation</h2><h3 id="Cocoapods安装"><a href="#Cocoapods安装" class="headerlink" title="Cocoapods安装"></a>Cocoapods安装</h3><ul><li><p>安装所有分类文件</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pod <span class="string">'WBCategoryKit'</span></span><br></pre></td></tr></table></figure></li><li><p>集成子组件</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pod <span class="string">'WBCategoryKit/UIKit'</span></span><br></pre></td></tr></table></figure></li></ul><p>或者<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pod <span class="string">'WBCategoryKit/UIKit/WKWebView'</span></span><br></pre></td></tr></table></figure></p><h3 id="手动集成"><a href="#手动集成" class="headerlink" title="手动集成"></a>手动集成</h3><p>将需要的分类文件拖入工程即可。</p><h2 id="Usage"><a href="#Usage" class="headerlink" title="Usage"></a>Usage</h2><h3 id="Foundation"><a href="#Foundation" class="headerlink" title="Foundation"></a>Foundation</h3><ul><li>NSObject     <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//swizzle 类方法</span><br><span class="line">+ (void)swizzleClassMethodWithOriginSel:(SEL)oriSel</span><br><span class="line">                            swizzledSel:(SEL)swiSel</span><br><span class="line">                              selfClass:(Class)selfClass;</span><br></pre></td></tr></table></figure></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//swizzle 实例方法 </span><br><span class="line">+ (void)swizzleInstanceMethodWithOriginSel:(SEL)oriSel</span><br><span class="line">                               swizzledSel:(SEL)swiSel</span><br><span class="line">                                 selfClass:(Class)selfClass;</span><br></pre></td></tr></table></figure><ul><li>NSDate    <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//NSDateFormatter缓存 </span><br><span class="line">- (NSDateFormatter *)wb_dateFormatterWithFormat:(NSString *)format;</span><br></pre></td></tr></table></figure></li></ul><p>//朋友圈时间格式<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">+ (NSString *)compareCurrentTimeWithTimeString:(NSString *)timeString;</span><br></pre></td></tr></table></figure></p><h3 id="Macro"><a href="#Macro" class="headerlink" title="Macro"></a>Macro</h3><p>//设置平方字体PingFangSC<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#define kWB_PFR kWB_SYSTEM_VERSION_9_OR_LATER ? @&quot;PingFangSC-Regular&quot; : @&quot;PingFang SC&quot;</span><br><span class="line">#define kWB_PFR_FONT(s) [UIFont fontWithName:kWB_PFR size:s]</span><br></pre></td></tr></table></figure></p><p>//主线程安全执行<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#ifndef dispatch_main_async_safe</span><br><span class="line">#define dispatch_main_async_safe(block) dispatch_queue_async_safe(dispatch_get_main_queue(), block)</span><br><span class="line">#endif</span><br></pre></td></tr></table></figure></p><p>//同步锁<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#define kWB_LOCK(lock) dispatch_semaphore_wait(lock, DISPATCH_TIME_FOREVER);</span><br><span class="line">#define kWB_UNLOCK(lock) dispatch_semaphore_signal(lock);</span><br></pre></td></tr></table></figure></p><h3 id="UIKit"><a href="#UIKit" class="headerlink" title="UIKit"></a>UIKit</h3><ul><li>WKWebView    <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">//获取某个标签的结点个数</span><br><span class="line">- (void)wb_nodeCountOfTag:(NSString *)tag</span><br><span class="line">completedHandler:(void (^) (int tagCount))completedHandler;</span><br></pre></td></tr></table></figure></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//获取网页中的图片 </span><br><span class="line">- (void)wb_getImages:(void (^) (NSArray *images))completedHandler;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//获取网页内容高度</span><br><span class="line">- (void)wb_getScrollHeight:(void (^) (CGFloat scrollHeight))completedHandler;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//为所有图片添加点击事件</span><br><span class="line">- (void)wb_addClickEventOnImg;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//根据id隐藏网页元素</span><br><span class="line">- (void)wb_hiddenElementById:(NSString *)idString;</span><br></pre></td></tr></table></figure><ul><li><p>UIFont       </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//runtime字体适配</span><br><span class="line">+ (UIFont *)_wb_systemFontOfSize:(CGFloat)fontSize;</span><br><span class="line">+ (UIFont *)_wb_boldSystemFontOfSize:(CGFloat)fontSize;</span><br><span class="line">+ (UIFont *)_wb_fontWithName:(NSString *)fontName</span><br><span class="line">                        size:(CGFloat)fontSize;</span><br></pre></td></tr></table></figure><p>更多分类使用方法，请查看<a href="https://github.com/wenmobo/WBCategoryKit" target="_blank" rel="noopener">WBCategoryKit</a>。</p><h2 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h2><p>本库主要是记录自己积累学习的一个过程，最初在github创建这个工程的时候，我就在自己的博客中写道将来有一天将本库制作成pod公有库，如今完成了本库的制作，虽然在制作过程中遇到了很多的问题，但还是很有成就感。如过在使用过程中，有任何建议或者问题，可以通过以下方式联系我，十分感谢。</p></li></ul><p>author：wenbo<br>     QQ：1050794513<br>  email：<a href="mailto:1050794513@qq.com" target="_blank" rel="noopener">1050794513@qq.com</a><br> 喜欢就❤️下鼓励下吧。</p><h2 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h2><blockquote><ul><li>2018-09-05 （1.0.2）： 修改podspec文件，支持三级目录。</li></ul></blockquote><ul><li><a href="https://www.jianshu.com/p/e917e7d95f69" target="_blank" rel="noopener">https://www.jianshu.com/p/e917e7d95f69</a>)</li></ul>]]></content>
    
    <summary type="html">
    
      在日常开发过程中，我们也经常用到分类。分类（Category）是OC中的特有语法，它是表示一个指向分类的结构体的指针。原则上它只能增加方法，不能增加成员（实例）变量
    
    </summary>
    
      <category term="iOS" scheme="http://blogwenbo.com/categories/iOS/"/>
    
    
      <category term="iOS" scheme="http://blogwenbo.com/tags/iOS/"/>
    
      <category term="Objective-C" scheme="http://blogwenbo.com/tags/Objective-C/"/>
    
      <category term="CocoaPods" scheme="http://blogwenbo.com/tags/CocoaPods/"/>
    
      <category term="GitHub" scheme="http://blogwenbo.com/tags/GitHub/"/>
    
  </entry>
  
  <entry>
    <title>MAC上iTerm 2安装与使用</title>
    <link href="http://blogwenbo.com/2018/07/08/MAC%E4%B8%8AiTerm-2%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/"/>
    <id>http://blogwenbo.com/2018/07/08/MAC上iTerm-2安装与使用/</id>
    <published>2018-07-08T09:20:04.000Z</published>
    <updated>2020-03-30T14:09:57.143Z</updated>
    
    <content type="html"><![CDATA[<p class="description"></p><a id="more"></a><h3 id="更新日志"><a href="#更新日志" class="headerlink" title="更新日志"></a>更新日志</h3><ul><li>2018-05-20 <a href="https://blog.csdn.net/Mona_233/article/details/54563416" target="_blank" rel="noopener">Mac安装powerline 权限问题</a></li></ul><h3 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h3><p>iTerm2是MAC下最好用的终端工具，并且还是免费的。iTerm2 是配置完毕开箱即用的 tmux，有标签变色、智能选中等特色功能。在日常开发中，我们难免会与终端命令打交道，比如使用Git，CocoaPods，Homebrew，Hexo等，下面开始介绍自定义终端样式吧！</p><h3 id="二、目录"><a href="#二、目录" class="headerlink" title="二、目录"></a>二、目录</h3><blockquote><ul><li>下载安装<a href="http://www.iterm2.com/" target="_blank" rel="noopener">iTerm 2</a></li><li>安装powerline</li><li>安装oh-my-zsh</li><li>安装字体库<a href="https://github.com/powerline/fonts" target="_blank" rel="noopener">fonts</a></li><li>导入配色</li><li>主题设置</li><li>添加指令高亮效果<a href="https://github.com/zsh-users/zsh-syntax-highlighting" target="_blank" rel="noopener">zsh-syntax-highlighting</a></li><li>快捷键</li><li>问题解决</li></ul></blockquote><h3 id="三、下载安装iTerm-2"><a href="#三、下载安装iTerm-2" class="headerlink" title="三、下载安装iTerm 2"></a>三、下载安装<a href="http://www.iterm2.com/" target="_blank" rel="noopener">iTerm 2</a></h3><ul><li><a href="https://github.com/gnachman/iTerm2" target="_blank" rel="noopener">GitHub</a></li></ul><h3 id="四、安装powerline"><a href="#四、安装powerline" class="headerlink" title="四、安装powerline"></a>四、安装powerline</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//没有安装pip先安装pip</span><br><span class="line">sudo easy_install pip</span><br><span class="line"></span><br><span class="line">//之后安装powerline（这里可能会报错，可以参考问题解决）</span><br><span class="line">pip install powerline-status</span><br></pre></td></tr></table></figure><h3 id="五、安装oh-my-zsh"><a href="#五、安装oh-my-zsh" class="headerlink" title="五、安装oh-my-zsh"></a>五、安装oh-my-zsh</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -L https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh | sh</span><br></pre></td></tr></table></figure><h3 id="六、安装字体库fonts"><a href="#六、安装字体库fonts" class="headerlink" title="六、安装字体库fonts"></a>六、安装字体库<a href="https://github.com/powerline/fonts" target="_blank" rel="noopener">fonts</a></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">//克隆字体库到本地</span><br><span class="line">git clone https://github.com/powerline/fonts.git</span><br><span class="line"></span><br><span class="line">//安装字体</span><br><span class="line">cd fonts</span><br><span class="line">./install.sh</span><br></pre></td></tr></table></figure><p>安装成功之后输出：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">➜  fonts git:(master) ./install.sh</span><br><span class="line">Copying fonts...</span><br><span class="line">Powerline fonts installed to /Users/WENBO/Library/Fonts</span><br></pre></td></tr></table></figure></p><h3 id="七、导入配色"><a href="#七、导入配色" class="headerlink" title="七、导入配色"></a>七、导入配色</h3><ul><li><p>首先到GitHub下载<a href="https://github.com/altercation/solarized" target="_blank" rel="noopener">solarized</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/altercation/solarized</span><br></pre></td></tr></table></figure></li><li><p>解压zip文件，进入<strong>solarized/iterm2-colors-solarized</strong><br>文件，双击<strong>Solarized Dark.itermcolors</strong>和<strong>Solarized Light.itermcolors</strong>进行安装导入，如下图所示<br><img src="https://user-gold-cdn.xitu.io/2018/5/20/1637e1a0a8980e6e?w=1196&amp;h=762&amp;f=png&amp;s=130004" alt="install-solarized.png"></p></li><li>进入系统偏好设置，<strong>profiles</strong>-&gt;<strong>Colors</strong>选择刚刚导入的配色方案即可<br><img src="https://user-gold-cdn.xitu.io/2018/5/20/1637e1a0a8c30214?w=384&amp;h=570&amp;f=png&amp;s=95177" alt="屏幕快照 2018-02-12 下午4.07.41.png"><h3 id="八、主题设置"><a href="#八、主题设置" class="headerlink" title="八、主题设置"></a>八、主题设置</h3></li><li><p>使用<a href="https://github.com/fcamblor/oh-my-zsh-agnoster-fcamblor" target="_blank" rel="noopener">agnoster</a>，下载安装：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">//克隆主题到本地</span><br><span class="line">git clone  https://github.com/fcamblor/oh-my-zsh-agnoster-fcamblor</span><br><span class="line"></span><br><span class="line">//安装主题</span><br><span class="line">cd oh-my-zsh-agnoster-fcamblor</span><br><span class="line">./install</span><br></pre></td></tr></table></figure></li><li><p>安装成功之后，编辑<strong>~/.zshrc</strong>文件，将<strong>ZSH_THEME</strong>改为<strong>agnoster</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># Set name of the theme to load. Optionally, if you set this to &quot;random&quot;</span><br><span class="line"># it&apos;ll load a random theme each time that oh-my-zsh is loaded.</span><br><span class="line"># See https://github.com/robbyrussell/oh-my-zsh/wiki/Themes</span><br><span class="line">ZSH_THEME=&quot;agnoster&quot;</span><br></pre></td></tr></table></figure></li></ul><h3 id="九、添加指令高亮效果zsh-syntax-highlighting"><a href="#九、添加指令高亮效果zsh-syntax-highlighting" class="headerlink" title="九、添加指令高亮效果zsh-syntax-highlighting"></a>九、添加指令高亮效果<a href="https://github.com/zsh-users/zsh-syntax-highlighting" target="_blank" rel="noopener">zsh-syntax-highlighting</a></h3><ul><li><p>下载文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//克隆项目到本地</span><br><span class="line">git clone git://github.com/zsh-users/zsh-syntax-highlighting.git</span><br></pre></td></tr></table></figure></li><li><p>编辑<strong>.zshrc</strong>文件，在最后添加如下内容</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">source /Users/WENBO/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh</span><br><span class="line">plugins=(zsh-syntax-highlighting)</span><br></pre></td></tr></table></figure></li></ul><p><strong>注意</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/Users/WENBO是*.zshrc文件所在路径，这里替换成你自己的就好了</span><br></pre></td></tr></table></figure></p><ul><li>设置成功之后，效果如下：<br><img src="https://user-gold-cdn.xitu.io/2018/5/20/1637e1a0a8d66380?w=1144&amp;h=140&amp;f=png&amp;s=31193" alt="屏幕快照 2018-02-12 下午4.55.25.png"></li></ul><h3 id="十、快捷键"><a href="#十、快捷键" class="headerlink" title="十、快捷键"></a>十、快捷键</h3><p>自己也才安装，先记录下来吧。</p><table><thead><tr><th style="text-align:center">说明</th><th style="text-align:center">快捷键</th></tr></thead><tbody><tr><td style="text-align:center">新建标签</td><td style="text-align:center">command + t</td></tr><tr><td style="text-align:center">关闭标签</td><td style="text-align:center">command + w</td></tr><tr><td style="text-align:center">切换标签</td><td style="text-align:center">command + 数字 command + 左右方向键</td></tr><tr><td style="text-align:center">切换全屏</td><td style="text-align:center">command + enter</td></tr><tr><td style="text-align:center">查找</td><td style="text-align:center">command +f</td></tr><tr><td style="text-align:center">垂直分屏</td><td style="text-align:center">command + d</td></tr><tr><td style="text-align:center">水平分屏</td><td style="text-align:center">command + shift + d</td></tr><tr><td style="text-align:center">切换屏幕</td><td style="text-align:center">command + option + 方向键 command + [ 或 command + ]</td></tr><tr><td style="text-align:center">查看历史命令</td><td style="text-align:center">command + ;</td></tr><tr><td style="text-align:center">查看剪贴板历史</td><td style="text-align:center">command + shift + h</td></tr><tr><td style="text-align:center">清除当前行</td><td style="text-align:center">ctrl + u</td></tr><tr><td style="text-align:center">到行首</td><td style="text-align:center">ctrl + a</td></tr><tr><td style="text-align:center">到行尾</td><td style="text-align:center">ctrl + e</td></tr><tr><td style="text-align:center">前进后退</td><td style="text-align:center">ctrl + f/b (相当于左右方向键)</td></tr><tr><td style="text-align:center">上一条命令</td><td style="text-align:center">ctrl + p</td></tr><tr><td style="text-align:center">搜索命令历史</td><td style="text-align:center">ctrl + r</td></tr><tr><td style="text-align:center">删除当前光标的字符</td><td style="text-align:center">ctrl + d</td></tr><tr><td style="text-align:center">删除光标之前的字符</td><td style="text-align:center">ctrl + h</td></tr><tr><td style="text-align:center">删除光标之前的单词</td><td style="text-align:center">ctrl + w</td></tr><tr><td style="text-align:center">删除到文本末尾</td><td style="text-align:center">ctrl + k</td></tr><tr><td style="text-align:center">交换光标处文本</td><td style="text-align:center">ctrl + t</td></tr><tr><td style="text-align:center">清屏1</td><td style="text-align:center">command + r</td></tr><tr><td style="text-align:center">清屏2</td><td style="text-align:center">ctrl + l</td></tr></tbody></table><h3 id="十一、问题解决"><a href="#十一、问题解决" class="headerlink" title="十一、问题解决"></a>十一、问题解决</h3><ul><li><a href="http://blog.csdn.net/tymatlab/article/details/78609861" target="_blank" rel="noopener">brew link python报错</a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo mkdir /usr/local/Frameworks</span><br><span class="line">sudo chown $(whoami):admin /usr/local/Frameworks</span><br></pre></td></tr></table></figure></li></ul><p>之后执行，链接成功<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew link python</span><br></pre></td></tr></table></figure></p><ul><li><p>安装powerline报错<strong>Permission denied</strong>，原因是没有安装python,，通过homebrew安装python</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install python</span><br></pre></td></tr></table></figure></li><li><p>命令显示？号，如下图所示：<br><img src="https://user-gold-cdn.xitu.io/2018/5/20/1637e1a0a8a8e24b?w=1146&amp;h=78&amp;f=png&amp;s=18694" alt="屏幕快照 2018-02-12 下午4.38.27.png"><br>解决办法：进入<strong>Preference</strong>-&gt;<strong>Profiles</strong>-&gt;<strong>Text</strong>，做如下配置即可：<br><img src="https://user-gold-cdn.xitu.io/2018/5/20/1637e1a0a8f2d04e?w=1240&amp;h=742&amp;f=png&amp;s=251534" alt="屏幕快照 2018-02-12 下午4.59.18.png"></p></li><li>Mac安装powerline 权限问题，报错如下<br><img src="https://user-gold-cdn.xitu.io/2018/5/20/1637e1a0cbe25c05?w=1136&amp;h=328&amp;f=png&amp;s=60589" alt="屏幕快照 2018-05-20 下午3.57.18.png"><br>解决办法：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install powerline-status --user -U</span><br></pre></td></tr></table></figure></li></ul><h3 id="十二、结语"><a href="#十二、结语" class="headerlink" title="十二、结语"></a>十二、结语</h3><p>在掘金上发现了这款终端工具，自己平时也有用到终端工具，于是就尝试给自己的MAC装上这款软件，在安装过程中还是遇到一些问题，不过最后都解决了。如果你也爱好终端命令操作，可以尝试DIY你喜欢的终端样式哦。</p><h3 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h3><ul><li><a href="https://www.jianshu.com/p/7de00c73a2bb" target="_blank" rel="noopener">iTerm 2 &amp;&amp; Oh My Zsh【DIY教程——亲身体验过程】</a></li><li><a href="http://matt33.com/2016/07/09/mac-software/" target="_blank" rel="noopener">Mac终端iTerm2配置</a></li></ul>]]></content>
    
    <summary type="html">
    
      iTerm2是MAC下最好用的终端工具，并且还是免费的。iTerm2 是配置完毕开箱即用的 tmux，有标签变色、智能选中等特色功能。在日常开发中，我们难免会与终端命令打交道，比如使用Git，CocoaPods，Homebrew，Hexo等，下面开始介绍自定义终端样式吧
    
    </summary>
    
      <category term="Terminal" scheme="http://blogwenbo.com/categories/Terminal/"/>
    
    
      <category term="Terminal" scheme="http://blogwenbo.com/tags/Terminal/"/>
    
      <category term="MAC" scheme="http://blogwenbo.com/tags/MAC/"/>
    
      <category term="item2" scheme="http://blogwenbo.com/tags/item2/"/>
    
  </entry>
  
  <entry>
    <title>Cell自适应高度标签</title>
    <link href="http://blogwenbo.com/2018/07/08/Cell%E8%87%AA%E9%80%82%E5%BA%94%E9%AB%98%E5%BA%A6%E6%A0%87%E7%AD%BE/"/>
    <id>http://blogwenbo.com/2018/07/08/Cell自适应高度标签/</id>
    <published>2018-07-08T09:12:24.000Z</published>
    <updated>2020-03-30T14:09:57.140Z</updated>
    
    <content type="html"><![CDATA[<p class="description"></p><a id="more"></a><h3 id="一、本地数据自适应"><a href="#一、本地数据自适应" class="headerlink" title="一、本地数据自适应"></a>一、本地数据自适应</h3><ul><li>在做项目意见反馈的时候，需要选择反馈类型，整个界面是UITableView，我现在喜欢用自动布局，用的Masonry布局框架，开始选择类型是放在本地的，用Masonry实现cell高度自适应还算相对简单的，下面是实现数据在本地高度自适应的核心代码，该方法在cell初始化方法中调用：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line">- (void)initSubviews &#123;</span><br><span class="line">    /** &lt;&lt; init subviews &gt; */</span><br><span class="line">    CGFloat margin = 15.f;</span><br><span class="line">    CGFloat spacing = 10.f;</span><br><span class="line">    CGFloat maxWidth = ScreenWidth;</span><br><span class="line">    __block CGFloat rowWidth = 0;</span><br><span class="line">    __block BOOL isNeedChangeLine = YES;</span><br><span class="line">    __block UIButton *lastButton = nil;</span><br><span class="line">    NSInteger count = self.dataArray.count;</span><br><span class="line">    [self.dataArray enumerateObjectsUsingBlock:^(CYBImageTitleModel * _Nonnull obj, NSUInteger idx, BOOL * _Nonnull stop) &#123;</span><br><span class="line">        UIButton *button = [UIButton buttonWithType:UIButtonTypeCustom];</span><br><span class="line">        button.titleLabel.font = FONT(14.f);</span><br><span class="line">        button.adjustsImageWhenHighlighted = NO;</span><br><span class="line">        [button setTitleColor:[UIColor lightGrayColor]</span><br><span class="line">                     forState:UIControlStateNormal];</span><br><span class="line">        [button setTitleColor:Color_Orange</span><br><span class="line">                     forState:UIControlStateSelected];</span><br><span class="line">        [button setBackgroundImage:obj.image</span><br><span class="line">                          forState:UIControlStateNormal];</span><br><span class="line">        [button setBackgroundImage:obj.selectedImage</span><br><span class="line">                          forState:UIControlStateSelected];</span><br><span class="line">        [button setTitle:obj.title</span><br><span class="line">                forState:UIControlStateNormal];</span><br><span class="line">        button.tag = kBTN_TAG + idx;</span><br><span class="line">        button.selected = obj.isSelected;</span><br><span class="line">        if (obj.isSelected) &#123;</span><br><span class="line">            tempBtn = button;</span><br><span class="line">        &#125;</span><br><span class="line">        [button wb_addTarget:self action:@selector(buttonClicked:)];</span><br><span class="line">        </span><br><span class="line">        [self.contentView addSubview:button];</span><br><span class="line"></span><br><span class="line">        CGFloat titleWidth = [obj.title boundingRectWithSize:CGSizeMake(CGFLOAT_MAX, 28)</span><br><span class="line">                                                     options:NSStringDrawingUsesLineFragmentOrigin</span><br><span class="line">                                                  attributes:@&#123;NSFontAttributeName : FONT(14.f)&#125; context:nil].size.width + 2 * 8;</span><br><span class="line">        rowWidth += titleWidth + spacing;</span><br><span class="line">        /** &lt; 是否需要换行 &gt;  */</span><br><span class="line">        if (rowWidth &gt; maxWidth - 2 * margin) &#123;</span><br><span class="line">            isNeedChangeLine = YES;</span><br><span class="line">            /** &lt; 判断是否超过最大值 &gt;  */</span><br><span class="line">            if (titleWidth + 2 * margin &gt; maxWidth) &#123;</span><br><span class="line">                titleWidth = maxWidth - 2 * margin;</span><br><span class="line">            &#125;</span><br><span class="line">            /** &lt; 换行后重新设置当前行的总宽度 &gt;  */</span><br><span class="line">            rowWidth = titleWidth + spacing;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        [button mas_makeConstraints:^(MASConstraintMaker *make) &#123;</span><br><span class="line">            /** &lt; 换行 &gt;  */</span><br><span class="line">            if (isNeedChangeLine) &#123;</span><br><span class="line">                if (!lastButton) &#123;</span><br><span class="line">                    make.top.equalTo(self.contentView.mas_top).offset(margin);</span><br><span class="line">                &#125;else &#123;</span><br><span class="line">                    make.top.equalTo(lastButton.mas_bottom).offset(spacing);</span><br><span class="line">                &#125;</span><br><span class="line">                make.left.equalTo(self.contentView.mas_left).offset(margin);</span><br><span class="line">                isNeedChangeLine = NO;</span><br><span class="line">            &#125;else &#123;</span><br><span class="line">                make.left.equalTo(lastButton.mas_right).offset(spacing);</span><br><span class="line">                make.top.equalTo(lastButton.mas_top);</span><br><span class="line">            &#125;</span><br><span class="line">            make.height.mas_equalTo(@(28));</span><br><span class="line">            make.width.mas_equalTo(@(titleWidth));</span><br><span class="line">            </span><br><span class="line">            /** &lt; 最后一个 &gt;  */</span><br><span class="line">            if (idx == count - 1) &#123;</span><br><span class="line">                make.bottom.equalTo(self.contentView.mas_bottom).offset(-margin);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;];</span><br><span class="line">        lastButton = button;</span><br><span class="line">    &#125;];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="二、网络请求数据高度自适应"><a href="#二、网络请求数据高度自适应" class="headerlink" title="二、网络请求数据高度自适应"></a>二、网络请求数据高度自适应</h3><ul><li><p>后来改需求了，需要从网络请求意见反馈类型，好吧，上面的方法已经有实现高度自适应关键代码了，只要稍作修改就可实现了。但是实现过程并不是想象中那么简单，中间也经理了很多波折。因为时间还是很充裕的，我就考虑到将标签空间封装成一个视图，等要使用的时候自己添加到cell上，并设置上下左右约束，封装完成之后并没有达到我想要的效果，我发现cell根本就撑不起来，我检查了一遍约束，上下左右约束没有遗漏呀，封装的视图<strong>WBAutoTagListView</strong>核心代码如下，约束实在<strong>layoutSubviews</strong>设置的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">#pragma mark &lt; Layout &gt;</span><br><span class="line">- (void)layoutSubviews &#123;</span><br><span class="line">    [super layoutSubviews];</span><br><span class="line">    </span><br><span class="line">    CGFloat maxWidth = self.bounds.size.width - _secionInset.left - _secionInset.right;</span><br><span class="line">    __block CGFloat rowWidth = 0;</span><br><span class="line">    __block BOOL isNeedChangeLine = YES;</span><br><span class="line">    __block WBTagListItem *lastItem = nil;</span><br><span class="line">    NSInteger count = self.itemArray.count;</span><br><span class="line">    [self.itemArray enumerateObjectsUsingBlock:^(WBTagListItem * _Nonnull obj, NSUInteger idx, BOOL * _Nonnull stop) &#123;</span><br><span class="line">        </span><br><span class="line">        CGFloat titleWidth = obj.titleWidth;</span><br><span class="line">        rowWidth += titleWidth + _minimumInteritemSpacing;</span><br><span class="line">         /** &lt; 是否需要换行 &gt;  */</span><br><span class="line">        if (rowWidth &gt; maxWidth - 2 * _minimumInteritemSpacing) &#123;</span><br><span class="line">            isNeedChangeLine = YES;</span><br><span class="line">            /** &lt; 判断是否超过最大值 &gt;  */</span><br><span class="line">            if (titleWidth + 2 * _minimumInteritemSpacing &gt; maxWidth) &#123;</span><br><span class="line">                titleWidth = maxWidth - 2 * _minimumInteritemSpacing;</span><br><span class="line">            &#125;</span><br><span class="line">            /** &lt; 换行后重新设置当前行的总宽度 &gt;  */</span><br><span class="line">            rowWidth = titleWidth + _minimumInteritemSpacing;</span><br><span class="line">        &#125;</span><br><span class="line">        [obj mas_makeConstraints:^(MASConstraintMaker *make) &#123;</span><br><span class="line">            /** &lt; 换行 &gt;  */</span><br><span class="line">            if (isNeedChangeLine) &#123;</span><br><span class="line">                if (!lastItem) &#123;</span><br><span class="line">                    make.top.equalTo(self.mas_top).offset(_secionInset.top);</span><br><span class="line">                &#125;else &#123;</span><br><span class="line">                    make.top.equalTo(lastItem.mas_bottom).offset(_minimumLineSpacing);</span><br><span class="line">                &#125;</span><br><span class="line">                make.left.equalTo(self.mas_left).offset(_secionInset.left);</span><br><span class="line">                isNeedChangeLine = NO;</span><br><span class="line">            &#125;else &#123;</span><br><span class="line">                make.left.equalTo(lastItem.mas_right).offset(_minimumInteritemSpacing);</span><br><span class="line">                make.top.equalTo(lastItem.mas_top);</span><br><span class="line">            &#125;</span><br><span class="line">            make.height.mas_equalTo(@(_itemHeight));</span><br><span class="line">            make.width.mas_equalTo(@(titleWidth));</span><br><span class="line">            </span><br><span class="line">            /** &lt; 最后一个 &gt;  */</span><br><span class="line">            if (idx == count - 1) &#123;</span><br><span class="line">                make.bottom.mas_offset(-_secionInset.bottom).priorityMedium();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;];</span><br><span class="line">        lastItem = obj;</span><br><span class="line">    &#125;];</span><br><span class="line">    NSLog(@&quot;%f&quot;,[self systemLayoutSizeFittingSize:UILayoutFittingCompressedSize].height);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>经测试，将该视图添加到控制器的视图上是可以自适应高度的，但是添加的cell上，就无法撑cell高度，尝试了许多写法，还是未能实现，控制台提示了无法算出cell的高度，就给了一个默认高度，顿时都无语了，有知道的大神能告诉我为什么有内容却无法撑起cell高度吗？</p></li><li><p>既然封装的视图无法实现cell高度自适应，我就尝试另外的思路方法，既然是cell自适应，那就索性封装一个标签cell吧<strong>WBTagListViewCell</strong>，为了可复用性，也为<strong>WBTagListViewCell</strong>添加了一些配置属性，如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">/** &lt; 数据源 &gt; */</span><br><span class="line">@property (nonatomic, strong) NSArray &lt;WBTagListModel *&gt;*items;</span><br><span class="line">/** &lt; 内边距 默认： UIEdgeInsetsMake(15, 15, 15, 15) &gt; */</span><br><span class="line">@property (nonatomic, assign) UIEdgeInsets secionInset;</span><br><span class="line">/** &lt; 行间距 默认：15 &gt; */</span><br><span class="line">@property (nonatomic, assign) CGFloat minimumLineSpacing;</span><br><span class="line">/** &lt; item之间距离 默认：10 &gt; */</span><br><span class="line">@property (nonatomic, assign) CGFloat minimumInteritemSpacing;</span><br><span class="line">/** &lt; 是否允许点击 默认：YES &gt; */</span><br><span class="line">@property (nonatomic, assign) BOOL allowSelection;</span><br><span class="line">/** &lt; 是否允许多选 默认：NO &gt; */</span><br><span class="line">@property (nonatomic, assign) BOOL allowMultipleSelection;</span><br><span class="line">/** &lt; 标签高度 默认：28.f &gt; */</span><br><span class="line">@property (nonatomic, assign) CGFloat itemHeight;</span><br><span class="line"></span><br><span class="line">/** &lt; 标签左右间距 默认：10.f &gt; */</span><br><span class="line">@property (nonatomic, assign) CGFloat leftRightMargin;</span><br><span class="line">/** &lt; 背景图片 &gt; */</span><br><span class="line">@property (nonatomic, copy) NSString *bgImageName;</span><br><span class="line">/** &lt; 选中背景图片 &gt; */</span><br><span class="line">@property (nonatomic, copy) NSString *selectedBgImageName;</span><br><span class="line">/** &lt; 标签颜色 默认：浅灰色 &gt; */</span><br><span class="line">@property (nonatomic, strong) UIColor *titleColor;</span><br><span class="line">/** &lt; 按钮选中颜色 &gt; */</span><br><span class="line">@property (nonatomic, strong) UIColor *titleSelectedColor;</span><br><span class="line">/** &lt; 标题大小 默认：14pt &gt; */</span><br><span class="line">@property (nonatomic, strong) UIFont *font;</span><br><span class="line">/** &lt; 边框宽度 默认：0 &gt; */</span><br><span class="line">@property (nonatomic, assign) CGFloat borderWidth;</span><br><span class="line">/** &lt; 边框颜色 bodoerWidth &gt; 0 设置有效 &gt; */</span><br><span class="line">@property (nonatomic, strong) UIColor *borderColor;</span><br><span class="line">/** &lt; 选中边框颜色 bodoerWidth &gt; 0 设置有效 &gt; */</span><br><span class="line">@property (nonatomic, strong) UIColor *selectedBorderColor;</span><br><span class="line">/** &lt; 圆角大小 默认：0 &gt; */</span><br><span class="line">@property (nonatomic, assign) CGFloat cornerRadius;</span><br><span class="line">/** &lt; 选中的item &gt; */</span><br><span class="line">@property (nonatomic, strong) NSMutableArray *selectedItems;</span><br><span class="line"></span><br><span class="line">@property (nonatomic, weak) id &lt;WBTagListViewCellDelegate&gt; delegate;</span><br></pre></td></tr></table></figure></li><li><p>关键实现步骤是重写了cell的<strong>updateConstraints</strong>，在有数据源的时候调用<strong>setNeedsUpdateConstraints</strong>，关键代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line">- (void)createTagWithData:(NSArray &lt;WBTagListModel *&gt;*)itemsArray &#123;</span><br><span class="line">    for (UIView *view in self.itemArray) &#123;</span><br><span class="line">        [view removeFromSuperview];</span><br><span class="line">    &#125;</span><br><span class="line">    [self.itemArray removeAllObjects];</span><br><span class="line">    </span><br><span class="line">    for (NSInteger index = 0; index &lt; itemsArray.count; index ++) &#123;</span><br><span class="line">        WBTagListItem *item = [WBTagListItem new];</span><br><span class="line">        item.title = itemsArray[index].title;</span><br><span class="line">        item.isSelected = itemsArray[index].isSelected;</span><br><span class="line">        item.itemTag = index;</span><br><span class="line">        item.delegate = self;</span><br><span class="line">        [self.contentView addSubview:item];</span><br><span class="line">        [self.itemArray addObject:item];</span><br><span class="line">        </span><br><span class="line">        /** &lt; 默认选中第一个 &gt; */</span><br><span class="line">        if (index == 0 &amp;&amp; itemsArray[index].isSelected) &#123;</span><br><span class="line">            _tempItem = item;</span><br><span class="line">            [self.selectedItems removeAllObjects];</span><br><span class="line">            [self.selectedItems addObject:_tempItem];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    [self setNeedsUpdateConstraints];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (void)updateConstraints &#123;</span><br><span class="line">    [super updateConstraints];</span><br><span class="line">    </span><br><span class="line">    CGFloat maxWidth = self.contentView.bounds.size.width - _secionInset.left - _secionInset.right;</span><br><span class="line">    __block CGFloat rowWidth = 0;</span><br><span class="line">    __block BOOL isNeedChangeLine = YES;</span><br><span class="line">    __block WBTagListItem *lastItem = nil;</span><br><span class="line">    NSInteger count = self.itemArray.count;</span><br><span class="line">    [self.itemArray enumerateObjectsUsingBlock:^(WBTagListItem * _Nonnull obj, NSUInteger idx, BOOL * _Nonnull stop) &#123;</span><br><span class="line">        </span><br><span class="line">        CGFloat titleWidth = obj.titleWidth;</span><br><span class="line">        rowWidth += titleWidth + _minimumInteritemSpacing;</span><br><span class="line">        /** &lt; 是否需要换行 &gt;  */</span><br><span class="line">        if (rowWidth &gt; maxWidth - 2 * _minimumInteritemSpacing) &#123;</span><br><span class="line">            isNeedChangeLine = YES;</span><br><span class="line">            /** &lt; 判断是否超过最大值 &gt;  */</span><br><span class="line">            if (titleWidth + 2 * _minimumInteritemSpacing &gt; maxWidth) &#123;</span><br><span class="line">                titleWidth = maxWidth - 2 * _minimumInteritemSpacing;</span><br><span class="line">            &#125;</span><br><span class="line">            /** &lt; 换行后重新设置当前行的总宽度 &gt;  */</span><br><span class="line">            rowWidth = titleWidth + _minimumInteritemSpacing;</span><br><span class="line">        &#125;</span><br><span class="line">        [obj mas_makeConstraints:^(MASConstraintMaker *make) &#123;</span><br><span class="line">            /** &lt; 换行 &gt;  */</span><br><span class="line">            if (isNeedChangeLine) &#123;</span><br><span class="line">                if (!lastItem) &#123;</span><br><span class="line">                    make.top.equalTo(self.contentView.mas_top).offset(_secionInset.top);</span><br><span class="line">                &#125;else &#123;</span><br><span class="line">                    make.top.equalTo(lastItem.mas_bottom).offset(_minimumLineSpacing);</span><br><span class="line">                &#125;</span><br><span class="line">                make.left.equalTo(self.contentView.mas_left).offset(_secionInset.left);</span><br><span class="line">                isNeedChangeLine = NO;</span><br><span class="line">            &#125;else &#123;</span><br><span class="line">                make.left.equalTo(lastItem.mas_right).offset(_minimumInteritemSpacing);</span><br><span class="line">                make.top.equalTo(lastItem.mas_top);</span><br><span class="line">            &#125;</span><br><span class="line">            make.height.mas_equalTo(@(_itemHeight));</span><br><span class="line">            make.width.mas_equalTo(@(titleWidth));</span><br><span class="line">            </span><br><span class="line">            /** &lt; 最后一个 &gt;  */</span><br><span class="line">            if (idx == count - 1) &#123;</span><br><span class="line">                make.bottom.equalTo(self.contentView.mas_bottom).offset(-_secionInset.bottom).priorityMedium();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;];</span><br><span class="line">        lastItem = obj;</span><br><span class="line">    &#125;];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>最后运行效果也贴一张图吧<br><img src="https://user-gold-cdn.xitu.io/2018/6/8/163db0915798250b?w=884&amp;h=1915&amp;f=png&amp;s=173327" alt="Simulator Screen Shot - iPhone X - 2018-06-07 at 23.48.33.png"></p></li><li>封装cell在实现过程中，也遇到一些问题，最开始把约束写到<strong>layoutSubviews</strong>还是无法自适应高度，再就是要考虑到cell复用的问题。不管怎样最后还是实现了自己想要的效果，由于技术有限，可能我有写的不对不好的地方，还请斧正。最后也贴出自动布局和frame布局标签demo，如果觉得对你有帮助，请Star鼓励下吧。<h3 id="三、GitHub-Demo"><a href="#三、GitHub-Demo" class="headerlink" title="三、GitHub Demo"></a>三、GitHub Demo</h3>Auto：<a href="https://github.com/wenmobo/WBTagsView/tree/master/WBAutoTagListViewDemo" target="_blank" rel="noopener">WBAutoTagListViewDemo</a><br>Frame：<a href="https://github.com/wenmobo/WBTagsView/tree/master/WB_TagsViewDemo" target="_blank" rel="noopener">WB_TagsViewDemo</a></li></ul><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul><li><a href="https://developer.apple.com/documentation/uikit/uiview/1622450-setneedsupdateconstraints" target="_blank" rel="noopener">Apple官方文档</a></li></ul>]]></content>
    
    <summary type="html">
    
      好久没有更新自己的博客了，去年自己在博客总结说到自己要坚持更新博客，不管是否有技术含量，都要持之以恒，无论做什么，都贵在坚持，我希望通过写博客能积累自己的技术与经验。不多说了，言归正传，下面开始介绍我是如何实现Cell标签自适应的吧。
    
    </summary>
    
      <category term="iOS" scheme="http://blogwenbo.com/categories/iOS/"/>
    
    
      <category term="iOS" scheme="http://blogwenbo.com/tags/iOS/"/>
    
      <category term="Objective-C" scheme="http://blogwenbo.com/tags/Objective-C/"/>
    
  </entry>
  
</feed>
